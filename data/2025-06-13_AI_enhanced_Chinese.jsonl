{"id": "2506.10021", "pdf": "https://arxiv.org/pdf/2506.10021", "abs": "https://arxiv.org/abs/2506.10021", "authors": ["Jordi de la Torre"], "title": "From Tool Calling to Symbolic Thinking: LLMs in a Persistent Lisp Metaprogramming Loop", "categories": ["cs.PL", "cs.AI"], "comment": null, "summary": "We propose a novel architecture for integrating large language models (LLMs)\nwith a persistent, interactive Lisp environment. This setup enables LLMs to\ndefine, invoke, and evolve their own tools through programmatic interaction\nwith a live REPL. By embedding Lisp expressions within generation and\nintercepting them via a middleware layer, the system allows for stateful\nexternal memory, reflective programming, and dynamic tool creation. We present\na design framework and architectural principles to guide future implementations\nof interactive AI systems that integrate symbolic programming with neural\nlanguage generation.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5c06\u5927\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u4e0e\u4ea4\u4e92\u5f0fLisp\u73af\u5883\u7ed3\u5408\u7684\u65b0\u67b6\u6784\uff0c\u652f\u6301LLMs\u901a\u8fc7REPL\u52a8\u6001\u5b9a\u4e49\u548c\u8c03\u7528\u5de5\u5177\u3002", "motivation": "\u63a2\u7d22\u5982\u4f55\u5c06\u7b26\u53f7\u7f16\u7a0b\u4e0e\u795e\u7ecf\u8bed\u8a00\u751f\u6210\u7ed3\u5408\uff0c\u4ee5\u5b9e\u73b0\u72b6\u6001\u5316\u5916\u90e8\u5b58\u50a8\u548c\u52a8\u6001\u5de5\u5177\u521b\u5efa\u3002", "method": "\u901a\u8fc7\u4e2d\u95f4\u4ef6\u5c42\u62e6\u622aLisp\u8868\u8fbe\u5f0f\uff0c\u5d4c\u5165\u751f\u6210\u8fc7\u7a0b\u4e2d\uff0c\u5b9e\u73b0\u7a0b\u5e8f\u5316\u4ea4\u4e92\u3002", "result": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u6846\u67b6\u548c\u67b6\u6784\u539f\u5219\uff0c\u652f\u6301\u4ea4\u4e92\u5f0fAI\u7cfb\u7edf\u7684\u672a\u6765\u5b9e\u73b0\u3002", "conclusion": "\u8be5\u67b6\u6784\u4e3a\u7ed3\u5408\u7b26\u53f7\u7f16\u7a0b\u4e0e\u795e\u7ecf\u8bed\u8a00\u751f\u6210\u7684\u4ea4\u4e92\u5f0fAI\u7cfb\u7edf\u63d0\u4f9b\u4e86\u53ef\u884c\u65b9\u6848\u3002"}}
{"id": "2506.10026", "pdf": "https://arxiv.org/pdf/2506.10026", "abs": "https://arxiv.org/abs/2506.10026", "authors": ["Tesla Zhang", "Sonya Simkin", "Rui Li", "Yue Yao", "Stephanie Balzer"], "title": "A Language-Agnostic Logical Relation for Message-Passing Protocols", "categories": ["cs.PL"], "comment": "19 pages, 8 figures", "summary": "Today's computing landscape has been gradually shifting to applications\ntargeting distributed and *heterogeneous* systems, such as cloud computing and\nInternet of Things (IoT) applications. These applications are predominantly\n*concurrent*, employ *message-passing*, and interface with *foreign objects*,\nranging from externally implemented code to actual physical devices such as\nsensors. Verifying that the resulting systems adhere to the intended protocol\nof interaction is challenging -- the usual assumption of a common\nimplementation language, let alone a type system, no longer applies, ruling out\nany verification method based on them. This paper develops a framework for\ncertifying *protocol compliance* of heterogeneous message-passing systems. It\ncontributes the first mechanization of a *language-agnostic logical relation*,\nasserting that its inhabitants comply with the protocol specified. This\ndefinition relies entirely on a labelled transition-based semantics,\naccommodating arbitrary inhabitants, typed and untyped alike, including foreign\nobjects. As a case study, the paper considers two scenarios: (1) *per-instance\nverification* of a specific application or hardware device, and (2)\n*once-and-for-all verification* of well-typed applications for a given type\nsystem. The logical relation and both scenarios are mechanized in the Coq\ntheorem prover.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u7528\u4e8e\u9a8c\u8bc1\u5f02\u6784\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u534f\u8bae\u5408\u89c4\u6027\u7684\u6846\u67b6\uff0c\u9996\u6b21\u5b9e\u73b0\u4e86\u8bed\u8a00\u65e0\u5173\u7684\u903b\u8f91\u5173\u7cfb\u673a\u68b0\u5316\uff0c\u652f\u6301\u4efb\u610f\u5bf9\u8c61\uff08\u5305\u62ec\u5916\u90e8\u5bf9\u8c61\uff09\u7684\u9a8c\u8bc1\uff0c\u5e76\u5728Coq\u4e2d\u5b9e\u73b0\u4e86\u6848\u4f8b\u7814\u7a76\u3002", "motivation": "\u968f\u7740\u5206\u5e03\u5f0f\u548c\u5f02\u6784\u7cfb\u7edf\uff08\u5982\u4e91\u8ba1\u7b97\u548c\u7269\u8054\u7f51\uff09\u7684\u666e\u53ca\uff0c\u9a8c\u8bc1\u8fd9\u4e9b\u7cfb\u7edf\u7684\u534f\u8bae\u5408\u89c4\u6027\u53d8\u5f97\u590d\u6742\uff0c\u4f20\u7edf\u57fa\u4e8e\u5171\u540c\u8bed\u8a00\u6216\u7c7b\u578b\u7cfb\u7edf\u7684\u65b9\u6cd5\u4e0d\u518d\u9002\u7528\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u57fa\u4e8e\u6807\u8bb0\u8f6c\u79fb\u8bed\u4e49\u7684\u8bed\u8a00\u65e0\u5173\u903b\u8f91\u5173\u7cfb\u6846\u67b6\uff0c\u652f\u6301\u5bf9\u4efb\u610f\u5bf9\u8c61\uff08\u5305\u62ec\u5916\u90e8\u5bf9\u8c61\uff09\u7684\u9a8c\u8bc1\uff0c\u5e76\u5728Coq\u4e2d\u5b9e\u73b0\u4e86\u4e24\u79cd\u9a8c\u8bc1\u573a\u666f\u7684\u673a\u68b0\u5316\u3002", "result": "\u6846\u67b6\u6210\u529f\u9a8c\u8bc1\u4e86\u4e24\u79cd\u573a\u666f\uff1a\uff081\uff09\u7279\u5b9a\u5e94\u7528\u6216\u786c\u4ef6\u8bbe\u5907\u7684\u5b9e\u4f8b\u7ea7\u9a8c\u8bc1\uff0c\uff082\uff09\u7ed9\u5b9a\u7c7b\u578b\u7cfb\u7edf\u4e2d\u826f\u597d\u7c7b\u578b\u5316\u5e94\u7528\u7684\u4e00\u52b3\u6c38\u9038\u9a8c\u8bc1\u3002", "conclusion": "\u8be5\u6846\u67b6\u4e3a\u5f02\u6784\u6d88\u606f\u4f20\u9012\u7cfb\u7edf\u7684\u534f\u8bae\u5408\u89c4\u6027\u63d0\u4f9b\u4e86\u901a\u7528\u4e14\u7075\u6d3b\u7684\u9a8c\u8bc1\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u5e7f\u6cdb\u7684\u5b9e\u9645\u5e94\u7528\u573a\u666f\u3002"}}
{"id": "2506.10781", "pdf": "https://arxiv.org/pdf/2506.10781", "abs": "https://arxiv.org/abs/2506.10781", "authors": ["Zhiyao Zhong", "Cyrus Omar"], "title": "Hazel Deriver: A Live Editor for Constructing Rule-Based Derivations", "categories": ["cs.PL", "68N15, 68U35", "D.3.0; K.3.2"], "comment": "5 pages, 2 figures, includes a preliminary user study; intended for\n  computer science education and PL/HCI conference audiences", "summary": "Students in programming languages and formal logic courses often struggle\nwith constructing rule-based derivation trees due to the complexity of applying\ninference rules, the lack of immediate feedback, and the manual effort required\nfor handwritten proofs. We present Hazel Deriver, a live, web-based editor\ndesigned to scaffold derivation construction through multiple layers of\nsupport. Built on the Hazel live programming environment, it provides a\nstructured, interactive experience that encourages iterative exploration and\nreal-time feedback. A preliminary user study with former students suggests that\nHazel Deriver reduces the perceived difficulty of derivation tasks while\nimproving conceptual understanding and engagement. We discuss the design of its\nlayered scaffolding features and raise questions about balancing system\nguidance with learner autonomy.", "AI": {"tldr": "Hazel Deriver\u662f\u4e00\u4e2a\u57fa\u4e8e\u7f51\u7edc\u7684\u5b9e\u65f6\u7f16\u8f91\u5668\uff0c\u65e8\u5728\u901a\u8fc7\u591a\u5c42\u6b21\u652f\u6301\u5e2e\u52a9\u5b66\u751f\u6784\u5efa\u57fa\u4e8e\u89c4\u5219\u7684\u63a8\u5bfc\u6811\uff0c\u51cf\u5c11\u4efb\u52a1\u96be\u5ea6\u5e76\u63d0\u5347\u7406\u89e3\u548c\u53c2\u4e0e\u5ea6\u3002", "motivation": "\u5b66\u751f\u5728\u7f16\u7a0b\u8bed\u8a00\u548c\u5f62\u5f0f\u903b\u8f91\u8bfe\u7a0b\u4e2d\u5e38\u56e0\u63a8\u7406\u89c4\u5219\u590d\u6742\u3001\u7f3a\u4e4f\u5373\u65f6\u53cd\u9988\u548c\u624b\u5de5\u8bc1\u660e\u7684\u7e41\u7410\u800c\u96be\u4ee5\u6784\u5efa\u63a8\u5bfc\u6811\u3002", "method": "\u57fa\u4e8eHazel\u5b9e\u65f6\u7f16\u7a0b\u73af\u5883\u5f00\u53d1\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u3001\u4ea4\u4e92\u5f0f\u4f53\u9a8c\uff0c\u652f\u6301\u8fed\u4ee3\u63a2\u7d22\u548c\u5b9e\u65f6\u53cd\u9988\u3002", "result": "\u521d\u6b65\u7528\u6237\u7814\u7a76\u8868\u660e\uff0cHazel Deriver\u964d\u4f4e\u4e86\u63a8\u5bfc\u4efb\u52a1\u7684\u611f\u77e5\u96be\u5ea6\uff0c\u63d0\u5347\u4e86\u6982\u5ff5\u7406\u89e3\u548c\u53c2\u4e0e\u5ea6\u3002", "conclusion": "\u8ba8\u8bba\u4e86\u5206\u5c42\u652f\u6301\u529f\u80fd\u7684\u8bbe\u8ba1\uff0c\u5e76\u63a2\u8ba8\u4e86\u7cfb\u7edf\u6307\u5bfc\u4e0e\u5b66\u4e60\u8005\u81ea\u4e3b\u6027\u4e4b\u95f4\u7684\u5e73\u8861\u95ee\u9898\u3002"}}
{"id": "2506.10913", "pdf": "https://arxiv.org/pdf/2506.10913", "abs": "https://arxiv.org/abs/2506.10913", "authors": ["Ashley Samuelson", "Andrew K. Hirsch", "Ethan Cecchetti"], "title": "Choreographic Quick Changes: First-Class Location (Set) Polymorphism", "categories": ["cs.PL"], "comment": "In submission to OOPSLA 2025", "summary": "Choreographic programming is a promising new paradigm for programming\nconcurrent systems where a developer writes a single centralized program that\ncompiles to individual programs for each node. Existing choreographic\nlanguages, however, lack critical features integral to modern systems, like the\nability of one node to dynamically compute who should perform a computation and\nsend that decision to others. This work addresses this gap with $\\lambda_{QC}$,\nthe first typed choreographic language with \\emph{first class process names}\nand polymorphism over both types and (sets of) locations. $\\lambda_{QC}$ also\nimproves expressive power over previous work by supporting algebraic and\nrecursive data types as well as multiply-located values. We formalize and\nmechanically verify our results in Rocq, including the standard choreographic\nguarantee of deadlock freedom.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u578b\u7684\u7f16\u6392\u7f16\u7a0b\u8bed\u8a00\u03bbQC\uff0c\u652f\u6301\u52a8\u6001\u8ba1\u7b97\u548c\u4f20\u9012\u8ba1\u7b97\u8282\u70b9\u7684\u80fd\u529b\uff0c\u5e76\u6269\u5c55\u4e86\u8868\u8fbe\u80fd\u529b\u548c\u7c7b\u578b\u7cfb\u7edf\u3002", "motivation": "\u73b0\u6709\u7f16\u6392\u8bed\u8a00\u7f3a\u4e4f\u73b0\u4ee3\u7cfb\u7edf\u6240\u9700\u7684\u5173\u952e\u529f\u80fd\uff0c\u5982\u52a8\u6001\u8ba1\u7b97\u548c\u4f20\u9012\u8282\u70b9\u51b3\u7b56\u7684\u80fd\u529b\u3002", "method": "\u8bbe\u8ba1\u4e86\u03bbQC\u8bed\u8a00\uff0c\u652f\u6301\u7b2c\u4e00\u7c7b\u8fdb\u7a0b\u540d\u3001\u7c7b\u578b\u548c\u4f4d\u7f6e\u7684\u591a\u6001\u6027\uff0c\u4ee5\u53ca\u4ee3\u6570\u4e0e\u9012\u5f52\u6570\u636e\u7c7b\u578b\u3002", "result": "\u03bbQC\u5728\u8868\u8fbe\u80fd\u529b\u4e0a\u4f18\u4e8e\u73b0\u6709\u5de5\u4f5c\uff0c\u5e76\u901a\u8fc7Rocq\u5f62\u5f0f\u5316\u548c\u9a8c\u8bc1\u4e86\u5176\u65e0\u6b7b\u9501\u6027\u3002", "conclusion": "\u03bbQC\u586b\u8865\u4e86\u7f16\u6392\u8bed\u8a00\u7684\u7a7a\u767d\uff0c\u63d0\u4f9b\u4e86\u66f4\u5f3a\u7684\u8868\u8fbe\u80fd\u529b\u548c\u7c7b\u578b\u5b89\u5168\u6027\u3002"}}
{"id": "2506.10056", "pdf": "https://arxiv.org/pdf/2506.10056", "abs": "https://arxiv.org/abs/2506.10056", "authors": ["Gabriel Orlanski", "Nicholas Roberts", "Aws Albarghouthi", "Frederic Sala"], "title": "Reward Models Enable Scalable Code Verification by Trading Accuracy for Throughput", "categories": ["cs.SE", "cs.PL"], "comment": "29 pages, 6 figures, code released here:\n  https://github.com/SprocketLab/orm-code-verifier", "summary": "The standard paradigm for solving coding tasks via large language models\n(LLMs) is to generate-then-rank programs, where the latter step uses a verifier\nin the ranking process. The growing consensus is that a comprehensive verifier\n(e.g., a full test suite) should be prioritized over an outcome reward model\n(ORM) whenever possible, with little consideration given to the trade-offs\ninvolved. We aim to challenge this assumption by systematically exploring the\ntradeoff between speed and accuracy. We find that ORMs play a crucial role in\nscaling verification through trading accuracy for speed, even when a\ncomprehensive verifier is available. Their value becomes especially apparent\nwhen used in a generate-prune-then-rank approach, where a faster but less\naccurate verifier removes incorrect solutions prior to ranking -- leading to a\nsystem that is 11.65x faster while only being 8.33% less accurate than the full\ntest suite. We analyze the generate-prune-then-rank approach and show that it\nworks by filtering out incorrect but highly ranked solutions. These findings\nenable the design of scalable and accurate program ranking systems.", "AI": {"tldr": "\u8bba\u6587\u6311\u6218\u4e86\u5728LLM\u7f16\u7a0b\u4efb\u52a1\u4e2d\u4f18\u5148\u4f7f\u7528\u5168\u9762\u9a8c\u8bc1\u5668\uff08\u5982\u5b8c\u6574\u6d4b\u8bd5\u5957\u4ef6\uff09\u7684\u5171\u8bc6\uff0c\u901a\u8fc7\u7cfb\u7edf\u63a2\u7d22\u901f\u5ea6\u4e0e\u51c6\u786e\u6027\u7684\u6743\u8861\uff0c\u53d1\u73b0\u7ed3\u679c\u5956\u52b1\u6a21\u578b\uff08ORM\uff09\u5728\u727a\u7272\u5c11\u91cf\u51c6\u786e\u6027\uff088.33%\uff09\u7684\u60c5\u51b5\u4e0b\u663e\u8457\u63d0\u5347\u901f\u5ea6\uff0811.65\u500d\uff09\u3002", "motivation": "\u7814\u7a76\u52a8\u673a\u662f\u8d28\u7591\u5f53\u524d\u4f18\u5148\u4f7f\u7528\u5168\u9762\u9a8c\u8bc1\u5668\u7684\u5171\u8bc6\uff0c\u63a2\u7d22\u901f\u5ea6\u4e0e\u51c6\u786e\u6027\u4e4b\u95f4\u7684\u6743\u8861\u3002", "method": "\u91c7\u7528\u751f\u6210-\u4fee\u526a-\u6392\u5e8f\u65b9\u6cd5\uff0c\u5148\u7528\u8f83\u5feb\u7684ORM\u9a8c\u8bc1\u5668\u8fc7\u6ee4\u9519\u8bef\u89e3\uff0c\u518d\u7528\u5168\u9762\u9a8c\u8bc1\u5668\u6392\u5e8f\u3002", "result": "\u7ed3\u679c\u663e\u793a\uff0c\u8be5\u65b9\u6cd5\u5728\u4ec5\u964d\u4f4e8.33%\u51c6\u786e\u6027\u7684\u60c5\u51b5\u4e0b\uff0c\u901f\u5ea6\u63d0\u534711.65\u500d\u3002", "conclusion": "\u7ed3\u8bba\u8868\u660e\uff0cORM\u5728\u53ef\u6269\u5c55\u4e14\u51c6\u786e\u7684\u7a0b\u5e8f\u6392\u5e8f\u7cfb\u7edf\u8bbe\u8ba1\u4e2d\u5177\u6709\u91cd\u8981\u4ef7\u503c\u3002"}}
{"id": "2506.10803", "pdf": "https://arxiv.org/pdf/2506.10803", "abs": "https://arxiv.org/abs/2506.10803", "authors": ["Ryan Gibb", "Patrick Ferris", "David Allsopp", "Michael Winston Dales", "Mark Elvers", "Thomas Gazagnaire", "Sadiq Jaffer", "Thomas Leonard", "Jon Ludlam", "Anil Madhavapeddy"], "title": "Solving Package Management via Hypergraph Dependency Resolution", "categories": ["cs.SE", "cs.PL"], "comment": "Submitted to SPLASH 2025", "summary": "Package managers are everywhere, with seemingly every language and operating\nsystem implementing their own solution. The lack of interoperability between\nthese systems means that multi-lingual projects are unable to express precise\ndependencies across language ecosystems, and external system and hardware\ndependencies are typically implicit and unversioned. We define HyperRes, a\nformal system for describing versioned dependency resolution using a hypergraph\nthat is expressive enough to model many ecosystems and solve dependency\nconstraints across them. We define translations from dozens of existing package\nmanagers to HyperRes and comprehensively demonstrate that dependency resolution\ncan work across ecosystems that are currently distinct. This does not require\nusers to shift their choice of package managers; instead, HyperRes allows for\nthe translation of packaging metadata between ecosystems, and for solving to be\nprecisely specialised to a particular deployment environment.", "AI": {"tldr": "HyperRes\u662f\u4e00\u4e2a\u57fa\u4e8e\u8d85\u56fe\u7684\u7248\u672c\u5316\u4f9d\u8d56\u89e3\u6790\u7cfb\u7edf\uff0c\u652f\u6301\u8de8\u8bed\u8a00\u751f\u6001\u7cfb\u7edf\u7684\u4f9d\u8d56\u7ba1\u7406\u3002", "motivation": "\u89e3\u51b3\u591a\u8bed\u8a00\u9879\u76ee\u4e2d\u4f9d\u8d56\u7ba1\u7406\u4e0d\u4e92\u901a\u7684\u95ee\u9898\uff0c\u4ee5\u53ca\u5916\u90e8\u7cfb\u7edf\u548c\u786c\u4ef6\u4f9d\u8d56\u7684\u9690\u5f0f\u548c\u65e0\u7248\u672c\u5316\u95ee\u9898\u3002", "method": "\u5b9a\u4e49HyperRes\u7cfb\u7edf\uff0c\u901a\u8fc7\u8d85\u56fe\u5efa\u6a21\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u652f\u6301\u73b0\u6709\u5305\u7ba1\u7406\u5668\u7684\u5143\u6570\u636e\u8f6c\u6362\u3002", "result": "\u8bc1\u660e\u4f9d\u8d56\u89e3\u6790\u53ef\u4ee5\u5728\u5f53\u524d\u72ec\u7acb\u7684\u751f\u6001\u7cfb\u7edf\u4e2d\u8de8\u5e73\u53f0\u5de5\u4f5c\uff0c\u65e0\u9700\u7528\u6237\u66f4\u6362\u5305\u7ba1\u7406\u5668\u3002", "conclusion": "HyperRes\u63d0\u4f9b\u4e86\u4e00\u79cd\u8de8\u751f\u6001\u7cfb\u7edf\u7684\u4f9d\u8d56\u7ba1\u7406\u89e3\u51b3\u65b9\u6848\uff0c\u652f\u6301\u7cbe\u786e\u7684\u90e8\u7f72\u73af\u5883\u9002\u914d\u3002"}}
