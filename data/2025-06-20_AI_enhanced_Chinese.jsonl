{"id": "2506.15174", "pdf": "https://arxiv.org/pdf/2506.15174", "abs": "https://arxiv.org/abs/2506.15174", "authors": ["Hossein Albakri", "Kazem Cheshmi"], "title": "A Novel Compiler Transformation for Fast Sparse Matrix Multiplication in GPUs", "categories": ["cs.PL"], "comment": null, "summary": "Sparse data structures are commonly used in neural networks to reduce the memory footprint. These data structures are compact but cause irregularities such as random memory accesses, which prevent efficient use of the memory hierarchy. GPUs are a common platform for machine learning practitioners, but running compact data structures on these devices often leads to slow-downs due to inefficient use of computing and memory resources. This paper proposes a new compiler transformation, enumerate-and-sparse-coarsen, that accelerates sparse matrix-matrix multiplication (SPMM) on GPU devices. The transformation increases data reuse in registers and caches while creating more balanced workloads for GPU computing resources. The transformation is tested on sparse neural networks in convolutional and transformer models. On an A100 GPU and across a columns of matrix B (bCols) in $ A \\times B = C$ from range of 32 to 128, the transformation yields a geometric mean speedup of 1.84$\\times$ to 2.27$\\times$ compared to cuBLAS and cuSPARSE baselines, respectively.", "AI": {"tldr": "\u63d0\u51fa\u4e00\u79cd\u65b0\u7684\u7f16\u8bd1\u5668\u8f6c\u6362\u65b9\u6cd5\uff0c\u7528\u4e8e\u52a0\u901fGPU\u4e0a\u7684\u7a00\u758f\u77e9\u9635\u4e58\u6cd5\uff0c\u63d0\u9ad8\u6570\u636e\u91cd\u7528\u548c\u8d1f\u8f7d\u5747\u8861\uff0c\u5728A100 GPU\u4e0a\u5b9e\u73b01.84\u00d7\u52302.27\u00d7\u7684\u52a0\u901f\u3002", "motivation": "\u7a00\u758f\u6570\u636e\u7ed3\u6784\u5728\u795e\u7ecf\u7f51\u7edc\u4e2d\u5e38\u7528\u4ee5\u51cf\u5c11\u5185\u5b58\u5360\u7528\uff0c\u4f46\u5176\u968f\u673a\u5185\u5b58\u8bbf\u95ee\u5bfc\u81f4GPU\u8d44\u6e90\u5229\u7528\u6548\u7387\u4f4e\u4e0b\uff0c\u9700\u8981\u4f18\u5316\u3002", "method": "\u63d0\u51faenumerate-and-sparse-coarsen\u7f16\u8bd1\u5668\u8f6c\u6362\uff0c\u901a\u8fc7\u589e\u52a0\u5bc4\u5b58\u5668\u548c\u7f13\u5b58\u4e2d\u7684\u6570\u636e\u91cd\u7528\uff0c\u4f18\u5316GPU\u8ba1\u7b97\u8d44\u6e90\u8d1f\u8f7d\u5747\u8861\u3002", "result": "\u5728A100 GPU\u4e0a\uff0c\u5bf9\u7a00\u758f\u77e9\u9635\u4e58\u6cd5\uff08SPMM\uff09\u5b9e\u73b01.84\u00d7\u52302.27\u00d7\u7684\u51e0\u4f55\u5e73\u5747\u52a0\u901f\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u663e\u8457\u63d0\u5347\u4e86GPU\u4e0a\u7a00\u758f\u77e9\u9635\u4e58\u6cd5\u7684\u6548\u7387\uff0c\u9002\u7528\u4e8e\u5377\u79ef\u548cTransformer\u6a21\u578b\u3002"}}
{"id": "2506.15424", "pdf": "https://arxiv.org/pdf/2506.15424", "abs": "https://arxiv.org/abs/2506.15424", "authors": ["Michael Mendler", "Marc Pouzet"], "title": "PSM: Policy Synchronised Deterministic Memory", "categories": ["cs.PL"], "comment": "This report summarises work on coding the theory of policy-synchronised memory (see https://rdcu.be/erBwl) in Haskell. This was developed for a graduate level course on Functional Reactive Programming taught at Bamberg University by the first author during 2020-2023. An early version of the PSM library had been presented at the SYNCHRON Workshop (Aussois, France), November 2019", "summary": "Concurrency and determinacy do not go well with each other when resources must be shared. Haskell provides parallel programming abstractions such as IVar and LVar in the Par monad and concurrent abstractions such as MVar and TVar in the in IO and STM monads, respectively. The former are determinate but have no destructive updates and the latter have destructive updates but do not guarantee determinacy. Programming patterns that are both concurrent and determinate, such as those provided by Kahn or Berry require memory abstractions at a higher level than is currently available. In this paper we describe a new type context PSM for policy synchronised memory in Haskell. Like STM and IO, the computations in PSM can access persistent state and, as a side-effect, update the memory in imperative style. Like the Par and IO monads, PSM supports concurrent threads and shared state. However, in contrast to IO, our PSM contexts are race-free since concurrent accesses are policy coordinated which guarantees determinacy.Well-typed transactions in the PSM context can accommodate abstract data structures that are imperative, concurrently shareable and still behave deterministically, by construction.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684Haskell\u7c7b\u578b\u4e0a\u4e0b\u6587PSM\uff0c\u7528\u4e8e\u5b9e\u73b0\u5e76\u53d1\u4e14\u786e\u5b9a\u6027\u7684\u5171\u4eab\u5185\u5b58\u7f16\u7a0b\uff0c\u89e3\u51b3\u4e86\u4f20\u7edf\u65b9\u6cd5\u4e2d\u5e76\u53d1\u4e0e\u786e\u5b9a\u6027\u96be\u4ee5\u5171\u5b58\u7684\u95ee\u9898\u3002", "motivation": "\u4f20\u7edfHaskell\u4e2d\u7684\u5e76\u884c\u7f16\u7a0b\u62bd\u8c61\uff08\u5982Par monad\uff09\u548c\u5e76\u53d1\u62bd\u8c61\uff08\u5982IO\u548cSTM monads\uff09\u65e0\u6cd5\u540c\u65f6\u6ee1\u8db3\u786e\u5b9a\u6027\u548c\u7834\u574f\u6027\u66f4\u65b0\u7684\u9700\u6c42\uff0c\u800cPSM\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\u3002", "method": "\u8bba\u6587\u4ecb\u7ecd\u4e86PSM\uff08Policy Synchronised Memory\uff09\u7c7b\u578b\u4e0a\u4e0b\u6587\uff0c\u652f\u6301\u5e76\u53d1\u7ebf\u7a0b\u548c\u5171\u4eab\u72b6\u6001\uff0c\u5e76\u901a\u8fc7\u7b56\u7565\u534f\u8c03\u786e\u4fdd\u65e0\u7ade\u4e89\u548c\u786e\u5b9a\u6027\u3002", "result": "PSM\u4e0a\u4e0b\u6587\u5b9e\u73b0\u4e86\u5e76\u53d1\u3001\u5171\u4eab\u548c\u786e\u5b9a\u6027\u7684\u7edf\u4e00\uff0c\u652f\u6301\u62bd\u8c61\u6570\u636e\u7ed3\u6784\u7684\u786e\u5b9a\u6027\u884c\u4e3a\u3002", "conclusion": "PSM\u4e3aHaskell\u63d0\u4f9b\u4e86\u4e00\u79cd\u65b0\u7684\u7f16\u7a0b\u8303\u5f0f\uff0c\u89e3\u51b3\u4e86\u5e76\u53d1\u4e0e\u786e\u5b9a\u6027\u7684\u77db\u76fe\uff0c\u9002\u7528\u4e8e\u9700\u8981\u786e\u5b9a\u6027\u884c\u4e3a\u7684\u5e76\u53d1\u7f16\u7a0b\u573a\u666f\u3002"}}
{"id": "2506.15135", "pdf": "https://arxiv.org/pdf/2506.15135", "abs": "https://arxiv.org/abs/2506.15135", "authors": ["Zhengqun Koo"], "title": "Towards Bug-Free Distributed Go Programs", "categories": ["cs.SE", "cs.LO", "cs.PL"], "comment": "Version 1. B.Comp. Dissertation", "summary": "Programmers of distributed systems need to reason about concurrency to avoid races. However, reasoning about concurrency is difficult, and unexpected races show up as bugs. Data race detection in shared memory systems is well-studied (dynamic data race detection [13], behavioral types [15], dynamic race detection [31]). Similar to how a data race consists of reads and writes not related by happens-before at a shared memory location, a communication race consists of receives and sends not related by happens-before on a shared channel. Communication races are problematic: a receiver expects a specific message from a specific sender, but with a communication race, the receiver can receive a message meant for another receiver, or not receive anything at all. In this work, we describe a verification framework that can prove the absence of communication races for distributed programs that use a subset of the Go programming language, where synchronization is mainly achieved via message passing. We statically reason about how a distributed program executes, using a happens-before order, extended to buffered and unbuffered channels.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u9759\u6001\u9a8c\u8bc1\u6846\u67b6\uff0c\u7528\u4e8e\u8bc1\u660e\u4f7f\u7528Go\u5b50\u96c6\u7684\u5206\u5e03\u5f0f\u7a0b\u5e8f\u4e2d\u901a\u4fe1\u7ade\u4e89\u7684\u7f3a\u5931\u3002", "motivation": "\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u7684\u5e76\u53d1\u95ee\u9898\u96be\u4ee5\u63a8\u7406\uff0c\u901a\u4fe1\u7ade\u4e89\u4f1a\u5bfc\u81f4\u63a5\u6536\u8005\u6536\u5230\u9519\u8bef\u6d88\u606f\u6216\u65e0\u6d88\u606f\uff0c\u5f15\u53d1\u9519\u8bef\u3002", "method": "\u6269\u5c55\u4e86happens-before\u987a\u5e8f\uff0c\u9759\u6001\u5206\u6790\u5206\u5e03\u5f0f\u7a0b\u5e8f\u7684\u6267\u884c\uff0c\u9002\u7528\u4e8e\u7f13\u51b2\u548c\u975e\u7f13\u51b2\u901a\u9053\u3002", "result": "\u6846\u67b6\u80fd\u591f\u8bc1\u660e\u7a0b\u5e8f\u5728\u901a\u4fe1\u7ade\u4e89\u65b9\u9762\u7684\u5b89\u5168\u6027\u3002", "conclusion": "\u8be5\u6846\u67b6\u4e3a\u5206\u5e03\u5f0f\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u4e00\u79cd\u9759\u6001\u9a8c\u8bc1\u901a\u4fe1\u7ade\u4e89\u7f3a\u5931\u7684\u6709\u6548\u65b9\u6cd5\u3002"}}
