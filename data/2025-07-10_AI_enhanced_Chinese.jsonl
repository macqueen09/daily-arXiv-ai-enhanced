{"id": "2507.06360", "pdf": "https://arxiv.org/pdf/2507.06360", "abs": "https://arxiv.org/abs/2507.06360", "authors": ["Dustin Jamner", "Gabriel Kammer", "Ritam Nag", "Adam Chlipala"], "title": "Pyrosome: Verified Compilation for Modular Metatheory", "categories": ["cs.PL"], "comment": null, "summary": "We present Pyrosome, a generic framework for modular language metatheory that\nembodies a novel approach to extensible semantics and compilation, implemented\nin Coq. Common techniques for semantic reasoning are often tied to the specific\nstructures of the languages and compilers that they support. In Pyrosome,\nverified compilers are fully extensible, meaning that to extend a language\n(even with a new kind of effect) simply requires defining and verifying the\ncompilation of the new feature, reusing the old correctness theorem for all\nother cases. The novel enabling idea is an inductive formulation of equivalence\npreservation that supports the addition of new rules to the source language,\ntarget language, and compiler.\n  Pyrosome defines a formal, deeply embedded notion of programming languages\nwith semantics given by dependently sorted equational theories, so all\ncompiler-correctness proofs boil down to type-checking and equational\nreasoning. We support vertical composition of any compilers expressed in our\nframework in addition to feature extension. As a case study, we present a\nmultipass compiler from System F with simple references, through CPS\ntranslation and closure conversion. Specifically, we demonstrate how we can\nbuild such a compiler incrementally by starting with a compiler for simply\ntyped lambda-calculus and adding natural numbers, the unit type, recursive\nfunctions, and a global heap, then extending judgments with a type environment\nand adding type abstraction, all while reusing the original theorems. We also\npresent a linear version of the simply typed CPS pass and compile a small\nimperative language to the simply typed target to show how Pyrosome handles\nsubstructural typing and imperative features.", "AI": {"tldr": "Pyrosome\u662f\u4e00\u4e2a\u6a21\u5757\u5316\u8bed\u8a00\u5143\u7406\u8bba\u7684\u901a\u7528\u6846\u67b6\uff0c\u652f\u6301\u53ef\u6269\u5c55\u8bed\u4e49\u548c\u7f16\u8bd1\uff0c\u901a\u8fc7Coq\u5b9e\u73b0\u3002\u5176\u6838\u5fc3\u521b\u65b0\u662f\u652f\u6301\u8bed\u8a00\u3001\u76ee\u6807\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u7684\u65b0\u89c4\u5219\u6dfb\u52a0\u7684\u7b49\u4ef7\u6027\u4fdd\u6301\u5f52\u7eb3\u5f62\u5f0f\u5316\u3002", "motivation": "\u4f20\u7edf\u8bed\u4e49\u63a8\u7406\u6280\u672f\u901a\u5e38\u4e0e\u7279\u5b9a\u8bed\u8a00\u548c\u7f16\u8bd1\u5668\u7ed3\u6784\u7d27\u5bc6\u8026\u5408\uff0c\u7f3a\u4e4f\u7075\u6d3b\u6027\u3002Pyrosome\u65e8\u5728\u63d0\u4f9b\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u6846\u67b6\uff0c\u4f7f\u5f97\u8bed\u8a00\u6269\u5c55\uff08\u5982\u65b0\u6548\u679c\uff09\u53ea\u9700\u5b9a\u4e49\u548c\u9a8c\u8bc1\u65b0\u7279\u6027\uff0c\u540c\u65f6\u590d\u7528\u539f\u6709\u6b63\u786e\u6027\u5b9a\u7406\u3002", "method": "Pyrosome\u901a\u8fc7\u4f9d\u8d56\u6392\u5e8f\u7684\u7b49\u5f0f\u7406\u8bba\u5b9a\u4e49\u7f16\u7a0b\u8bed\u8a00\u7684\u6df1\u5c42\u5d4c\u5165\u5f62\u5f0f\uff0c\u6240\u6709\u7f16\u8bd1\u5668\u6b63\u786e\u6027\u8bc1\u660e\u5f52\u7ed3\u4e3a\u7c7b\u578b\u68c0\u67e5\u548c\u7b49\u5f0f\u63a8\u7406\u3002\u652f\u6301\u5782\u76f4\u7ec4\u5408\u548c\u7279\u6027\u6269\u5c55\u3002", "result": "\u6848\u4f8b\u7814\u7a76\u5c55\u793a\u4e86\u4eceSystem F\u5230CPS\u7ffb\u8bd1\u548c\u95ed\u5305\u8f6c\u6362\u7684\u591a\u9636\u6bb5\u7f16\u8bd1\u5668\u6784\u5efa\uff0c\u901a\u8fc7\u9010\u6b65\u6269\u5c55\u7279\u6027\uff08\u5982\u81ea\u7136\u6570\u3001\u9012\u5f52\u51fd\u6570\u3001\u5168\u5c40\u5806\u7b49\uff09\u5e76\u590d\u7528\u539f\u6709\u5b9a\u7406\u3002\u8fd8\u652f\u6301\u7ebf\u6027\u7c7b\u578b\u548c\u547d\u4ee4\u5f0f\u7279\u6027\u3002", "conclusion": "Pyrosome\u63d0\u4f9b\u4e86\u4e00\u79cd\u7075\u6d3b\u4e14\u53ef\u6269\u5c55\u7684\u8bed\u8a00\u5143\u7406\u8bba\u6846\u67b6\uff0c\u652f\u6301\u6a21\u5757\u5316\u6269\u5c55\u548c\u9a8c\u8bc1\uff0c\u9002\u7528\u4e8e\u590d\u6742\u8bed\u8a00\u7279\u6027\u7684\u9010\u6b65\u6784\u5efa\u548c\u9a8c\u8bc1\u3002"}}
{"id": "2507.06456", "pdf": "https://arxiv.org/pdf/2507.06456", "abs": "https://arxiv.org/abs/2507.06456", "authors": ["Scott Kovach", "Praneeth Kolichala", "Kyle A. Miller", "David Broman", "Fredrik Kjolstad"], "title": "Fast Collection Operations from Indexed Stream Fusion", "categories": ["cs.PL"], "comment": null, "summary": "We present a system of efficient methods for traversing and combining\nassociative collection data structures. A distinguishing feature of the system\nis that, like traditional sequential iterator libraries, it does not require\nspecialized compiler infrastructure or staged compilation for efficiency and\ncomposability. By using a representation based on indexed streams, the library\ncan express complex joins over input collections while using no intermediate\nallocations. We implement the library for the Lean, Morphic, and Rust\nprogramming languages and provide a mechanized proof of functional correctness\nin Lean.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u9ad8\u6548\u904d\u5386\u548c\u7ec4\u5408\u5173\u8054\u96c6\u5408\u6570\u636e\u7ed3\u6784\u7684\u7cfb\u7edf\uff0c\u65e0\u9700\u4e13\u7528\u7f16\u8bd1\u5668\u6216\u5206\u9636\u6bb5\u7f16\u8bd1\u5373\u53ef\u5b9e\u73b0\u9ad8\u6548\u6027\u548c\u53ef\u7ec4\u5408\u6027\u3002", "motivation": "\u4f20\u7edf\u8fed\u4ee3\u5668\u5e93\u9700\u8981\u4e13\u7528\u7f16\u8bd1\u5668\u652f\u6301\uff0c\u9650\u5236\u4e86\u6548\u7387\u548c\u53ef\u7ec4\u5408\u6027\uff0c\u672c\u7cfb\u7edf\u65e8\u5728\u89e3\u51b3\u8fd9\u4e00\u95ee\u9898\u3002", "method": "\u57fa\u4e8e\u7d22\u5f15\u6d41\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u907f\u514d\u4e2d\u95f4\u5206\u914d\uff0c\u652f\u6301\u590d\u6742\u8fde\u63a5\u64cd\u4f5c\u3002", "result": "\u5728Lean\u3001Morphic\u548cRust\u4e2d\u5b9e\u73b0\uff0c\u5e76\u5728Lean\u4e2d\u63d0\u4f9b\u4e86\u529f\u80fd\u6b63\u786e\u6027\u7684\u673a\u68b0\u5316\u8bc1\u660e\u3002", "conclusion": "\u8be5\u7cfb\u7edf\u5c55\u793a\u4e86\u65e0\u9700\u4e13\u7528\u7f16\u8bd1\u5668\u5373\u53ef\u9ad8\u6548\u5904\u7406\u5173\u8054\u96c6\u5408\u7684\u53ef\u884c\u6027\u3002"}}
{"id": "2507.06584", "pdf": "https://arxiv.org/pdf/2507.06584", "abs": "https://arxiv.org/abs/2507.06584", "authors": ["Qiong Feng", "Xiaotian Ma", "Ziyuan Feng", "Marat Akhin", "Wei Song", "Peng Liang"], "title": "Finding Compiler Bugs through Cross-Language Code Generator and Differential Testing", "categories": ["cs.PL", "cs.SE"], "comment": "The 40th ACM SIGPLAN International Conference on Object-Oriented\n  Programming, Systems, Languages, and Applications (OOPSLA)", "summary": "Compilers play a central role in translating high-level code into executable\nprograms, making their correctness essential for ensuring code safety and\nreliability. While extensive research has focused on verifying the correctness\nof compilers for single-language compilation, the correctness of cross-language\ncompilation - which involves the interaction between two languages and their\nrespective compilers - remains largely unexplored. To fill this research gap,\nwe propose CrossLangFuzzer, a novel framework that introduces a universal\nintermediate representation (IR) for JVM-based languages and automatically\ngenerates cross-language test programs with diverse type parameters and complex\ninheritance structures. After generating the initial IR, CrossLangFuzzer\napplies three mutation techniques - LangShuffler, FunctionRemoval, and\nTypeChanger - to enhance program diversity. By evaluating both the original and\nmutated programs across multiple compiler versions, CrossLangFuzzer\nsuccessfully uncovered 10 confirmed bugs in the Kotlin compiler, 4 confirmed\nbugs in the Groovy compiler, 7 confirmed bugs in the Scala 3 compiler, 2\nconfirmed bugs in the Scala 2 compiler, and 1 confirmed bug in the Java\ncompiler. Among all mutators, TypeChanger is the most effective, detecting 11\nof the 24 compiler bugs. Furthermore, we analyze the symptoms and root causes\nof cross-compilation bugs, examining the respective responsibilities of\nlanguage compilers when incorrect behavior occurs during cross-language\ncompilation. To the best of our knowledge, this is the firstwork specifically\nfocused on identifying and diagnosing compiler bugs in cross-language\ncompilation scenarios. Our research helps to understand these challenges and\ncontributes to improving compiler correctness in multi-language environments.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51faCrossLangFuzzer\u6846\u67b6\uff0c\u901a\u8fc7\u901a\u7528\u4e2d\u95f4\u8868\u793a\u548c\u7a0b\u5e8f\u53d8\u5f02\u6280\u672f\uff0c\u53d1\u73b0\u5e76\u8bca\u65ad\u8de8\u8bed\u8a00\u7f16\u8bd1\u4e2d\u7684\u7f16\u8bd1\u5668\u9519\u8bef\u3002", "motivation": "\u8de8\u8bed\u8a00\u7f16\u8bd1\u7684\u6b63\u786e\u6027\u7814\u7a76\u4e0d\u8db3\uff0c\u73b0\u6709\u5de5\u4f5c\u591a\u5173\u6ce8\u5355\u8bed\u8a00\u7f16\u8bd1\u9a8c\u8bc1\u3002", "method": "\u63d0\u51fa\u57fa\u4e8eJVM\u8bed\u8a00\u7684\u901a\u7528\u4e2d\u95f4\u8868\u793a\uff0c\u5e76\u5e94\u7528\u4e09\u79cd\u53d8\u5f02\u6280\u672f\uff08LangShuffler\u3001FunctionRemoval\u3001TypeChanger\uff09\u751f\u6210\u591a\u6837\u5316\u6d4b\u8bd5\u7a0b\u5e8f\u3002", "result": "\u53d1\u73b0\u591a\u4e2a\u7f16\u8bd1\u5668\u4e2d\u768424\u4e2a\u9519\u8bef\uff0c\u5176\u4e2dTypeChanger\u6700\u6709\u6548\u3002", "conclusion": "\u9996\u6b21\u9488\u5bf9\u8de8\u8bed\u8a00\u7f16\u8bd1\u9519\u8bef\u8fdb\u884c\u7814\u7a76\uff0c\u4e3a\u591a\u8bed\u8a00\u73af\u5883\u4e0b\u7684\u7f16\u8bd1\u5668\u6b63\u786e\u6027\u63d0\u4f9b\u6539\u8fdb\u65b9\u5411\u3002"}}
{"id": "2507.06939", "pdf": "https://arxiv.org/pdf/2507.06939", "abs": "https://arxiv.org/abs/2507.06939", "authors": ["Guilherme Espada", "Alcides Fonseca"], "title": "Sound Interval-Based Synthesis for Probabilistic Programs", "categories": ["cs.PL"], "comment": null, "summary": "Probabilistic programming has become a standard practice to model stochastic\nevents and learn about the behavior of nature in different scientific contexts,\nranging from Genetics and Ecology to Linguistics and Psychology. However,\ndomain practitioners (such as biologists) also need to be experts in statistics\nin order to select which probabilistic model is suitable for a given particular\nproblem, relying then on probabilistic inference engines such as Stan, Pyro or\nEdward to fine-tune the parameters of that particular model. Probabilistic\nProgramming would be more useful if the model selection is made automatic,\nwithout requiring statistics expertise from the end user. Automatically\nselecting the model is challenging because of the large search space of\nprobabilistic programs needed to be explored, because the fact that most of\nthat search space contains invalid programs, and because invalid programs may\nonly be detected in some executions, due to its probabilistic nature. We\npropose a type system to statically reject invalid probabilistic programs, a\ntype-directed synthesis algorithm that guarantees that generated programs are\ntype-safe by construction, and an heuristic search procedure to handle the vast\nsearch space. We collect a number of probabilistic programs from the\nliterature, and use them to compare our method with both a type-agnostic random\nsearch, and a data-guided method from the literature (DaPPer). Our results show\nthat our technique both outperforms random search and DaPPer, specially on more\ncomplex programs. This drastic performance difference in synthesis allows for\nfast sampling of programs and enables techniques that previously suffered from\nthe complexity of synthesis, such as Genetic Programming, to be applied.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684\u81ea\u52a8\u9009\u62e9\u6982\u7387\u6a21\u578b\u7684\u65b9\u6cd5\uff0c\u5305\u62ec\u7c7b\u578b\u7cfb\u7edf\u3001\u7c7b\u578b\u5bfc\u5411\u7684\u5408\u6210\u7b97\u6cd5\u548c\u542f\u53d1\u5f0f\u641c\u7d22\uff0c\u663e\u8457\u4f18\u4e8e\u968f\u673a\u641c\u7d22\u548c\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u6982\u7387\u7f16\u7a0b\u9700\u8981\u7edf\u8ba1\u4e13\u4e1a\u77e5\u8bc6\u9009\u62e9\u6a21\u578b\uff0c\u9650\u5236\u4e86\u975e\u4e13\u5bb6\u7528\u6237\u7684\u4f7f\u7528\u3002\u81ea\u52a8\u6a21\u578b\u9009\u62e9\u56e0\u641c\u7d22\u7a7a\u95f4\u5927\u548c\u65e0\u6548\u7a0b\u5e8f\u591a\u800c\u5177\u6709\u6311\u6218\u6027\u3002", "method": "\u8bbe\u8ba1\u7c7b\u578b\u7cfb\u7edf\u9759\u6001\u62d2\u7edd\u65e0\u6548\u7a0b\u5e8f\uff0c\u5f00\u53d1\u7c7b\u578b\u5bfc\u5411\u7684\u5408\u6210\u7b97\u6cd5\u786e\u4fdd\u7a0b\u5e8f\u7c7b\u578b\u5b89\u5168\uff0c\u5e76\u91c7\u7528\u542f\u53d1\u5f0f\u641c\u7d22\u5904\u7406\u5927\u641c\u7d22\u7a7a\u95f4\u3002", "result": "\u5b9e\u9a8c\u8868\u660e\uff0c\u8be5\u65b9\u6cd5\u5728\u590d\u6742\u7a0b\u5e8f\u4e0a\u663e\u8457\u4f18\u4e8e\u968f\u673a\u641c\u7d22\u548cDaPPer\u65b9\u6cd5\uff0c\u652f\u6301\u5feb\u901f\u91c7\u6837\u548c\u9057\u4f20\u7f16\u7a0b\u7b49\u6280\u672f\u7684\u5e94\u7528\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u89e3\u51b3\u4e86\u6982\u7387\u7f16\u7a0b\u4e2d\u6a21\u578b\u81ea\u52a8\u9009\u62e9\u7684\u6311\u6218\uff0c\u4e3a\u975e\u4e13\u5bb6\u7528\u6237\u63d0\u4f9b\u4e86\u66f4\u4fbf\u6377\u7684\u5de5\u5177\u3002"}}
{"id": "2507.06396", "pdf": "https://arxiv.org/pdf/2507.06396", "abs": "https://arxiv.org/abs/2507.06396", "authors": ["Mandana Vaziri", "Louis Mandel", "Yuji Watanabe", "Hirokuni Kitahara", "Martin Hirzel", "Anca Sailer"], "title": "Representing Prompting Patterns with PDL: Compliance Agent Case Study", "categories": ["cs.AI", "cs.LG", "cs.PL", "cs.SE"], "comment": "ICML 2025 Workshop on Programmatic Representations for Agent Learning", "summary": "Prompt engineering for LLMs remains complex, with existing frameworks either\nhiding complexity behind restrictive APIs or providing inflexible canned\npatterns that resist customization -- making sophisticated agentic programming\nchallenging. We present the Prompt Declaration Language (PDL), a novel approach\nto prompt representation that tackles this fundamental complexity by bringing\nprompts to the forefront, enabling manual and automatic prompt tuning while\ncapturing the composition of LLM calls together with rule-based code and\nexternal tools. By abstracting away the plumbing for such compositions, PDL\naims at improving programmer productivity while providing a declarative\nrepresentation that is amenable to optimization. This paper demonstrates PDL's\nutility through a real-world case study of a compliance agent. Tuning the\nprompting pattern of this agent yielded up to 4x performance improvement\ncompared to using a canned agent and prompt pattern.", "AI": {"tldr": "\u672c\u6587\u4ecb\u7ecd\u4e86Prompt Declaration Language (PDL)\uff0c\u4e00\u79cd\u65b0\u578b\u7684\u63d0\u793a\u8868\u793a\u65b9\u6cd5\uff0c\u65e8\u5728\u89e3\u51b3\u73b0\u6709\u6846\u67b6\u5728\u7075\u6d3b\u6027\u548c\u590d\u6742\u6027\u4e0a\u7684\u4e0d\u8db3\uff0c\u5e76\u901a\u8fc7\u6848\u4f8b\u7814\u7a76\u5c55\u793a\u4e86\u5176\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u73b0\u6709\u63d0\u793a\u5de5\u7a0b\u6846\u67b6\u8981\u4e48\u8fc7\u4e8e\u590d\u6742\uff0c\u8981\u4e48\u7f3a\u4e4f\u7075\u6d3b\u6027\uff0c\u96be\u4ee5\u652f\u6301\u9ad8\u7ea7\u4ee3\u7406\u7f16\u7a0b\u9700\u6c42\u3002", "method": "\u63d0\u51faPDL\uff0c\u5c06\u63d0\u793a\u7f6e\u4e8e\u9996\u8981\u4f4d\u7f6e\uff0c\u652f\u6301\u624b\u52a8\u548c\u81ea\u52a8\u63d0\u793a\u8c03\u4f18\uff0c\u5e76\u6574\u5408LLM\u8c03\u7528\u3001\u89c4\u5219\u4ee3\u7801\u548c\u5916\u90e8\u5de5\u5177\u3002", "result": "\u901a\u8fc7\u5408\u89c4\u4ee3\u7406\u7684\u6848\u4f8b\u7814\u7a76\uff0cPDL\u7684\u6027\u80fd\u6bd4\u4f20\u7edf\u65b9\u6cd5\u63d0\u5347\u4e864\u500d\u3002", "conclusion": "PDL\u901a\u8fc7\u58f0\u660e\u5f0f\u8868\u793a\u548c\u4f18\u5316\u6f5c\u529b\uff0c\u663e\u8457\u63d0\u5347\u4e86\u7a0b\u5e8f\u5458\u751f\u4ea7\u529b\u548c\u4ee3\u7406\u6027\u80fd\u3002"}}
