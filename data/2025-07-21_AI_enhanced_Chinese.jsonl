{"id": "2507.13494", "pdf": "https://arxiv.org/pdf/2507.13494", "abs": "https://arxiv.org/abs/2507.13494", "authors": ["Feras A. Saad", "Wonyeol Lee"], "title": "Random Variate Generation with Formal Guarantees", "categories": ["cs.PL", "stat.CO"], "comment": null, "summary": "This article introduces a new approach to principled and practical random\nvariate generation with formal guarantees. The key idea is to first specify the\ndesired probability distribution in terms of a finite-precision numerical\nprogram that defines its cumulative distribution function (CDF), and then\ngenerate exact random variates according to this CDF. We present a universal\nand fully automated method to synthesize exact random variate generators given\nany numerical CDF implemented in any binary number format, such as\nfloating-point, fixed-point, and posits. The method is guaranteed to operate\nwith the same precision used to specify the CDF, does not overflow, avoids\nexpensive arbitrary-precision arithmetic, and exposes a consistent API. The\nmethod rests on a novel space-time optimal implementation for the class of\ngenerators that attain the information-theoretically optimal Knuth and Yao\nentropy rate, consuming the least possible number of input random bits per\noutput variate. We develop a random variate generation library using our method\nin C and evaluate it on a diverse set of ``continuous'' and ``discrete''\ndistributions, showing competitive runtime with the state-of-the-art GNU\nScientific Library while delivering higher accuracy, entropy efficiency, and\nautomation.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u968f\u673a\u53d8\u91cf\u751f\u6210\u65b9\u6cd5\uff0c\u901a\u8fc7\u6570\u503c\u7a0b\u5e8f\u5b9a\u4e49CDF\uff0c\u751f\u6210\u7cbe\u786e\u968f\u673a\u53d8\u91cf\uff0c\u5177\u6709\u5f62\u5f0f\u5316\u4fdd\u8bc1\u3002", "motivation": "\u73b0\u6709\u968f\u673a\u53d8\u91cf\u751f\u6210\u65b9\u6cd5\u5728\u7cbe\u5ea6\u3001\u6548\u7387\u548c\u81ea\u52a8\u5316\u65b9\u9762\u5b58\u5728\u4e0d\u8db3\uff0c\u9700\u8981\u4e00\u79cd\u66f4\u4f18\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u57fa\u4e8e\u6709\u9650\u7cbe\u5ea6\u6570\u503c\u7a0b\u5e8f\u5b9a\u4e49CDF\uff0c\u5408\u6210\u7cbe\u786e\u968f\u673a\u53d8\u91cf\u751f\u6210\u5668\uff0c\u652f\u6301\u591a\u79cd\u4e8c\u8fdb\u5236\u6570\u683c\u5f0f\uff0c\u907f\u514d\u4efb\u610f\u7cbe\u5ea6\u8ba1\u7b97\u3002", "result": "\u5f00\u53d1\u4e86C\u8bed\u8a00\u5e93\uff0c\u5728\u591a\u79cd\u5206\u5e03\u4e0a\u8868\u73b0\u4f18\u4e8eGNU\u79d1\u5b66\u5e93\uff0c\u5177\u6709\u66f4\u9ad8\u7cbe\u5ea6\u548c\u71b5\u6548\u7387\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u5728\u7cbe\u5ea6\u3001\u6548\u7387\u548c\u81ea\u52a8\u5316\u65b9\u9762\u4f18\u4e8e\u73b0\u6709\u6280\u672f\uff0c\u9002\u7528\u4e8e\u5e7f\u6cdb\u5206\u5e03\u7c7b\u578b\u3002"}}
{"id": "2507.13533", "pdf": "https://arxiv.org/pdf/2507.13533", "abs": "https://arxiv.org/abs/2507.13533", "authors": ["Priyam Gupta"], "title": "Increasing the Expressiveness of a Gradual Verifier", "categories": ["cs.PL"], "comment": "Presented at the 52nd ACM SIGPLAN Symposium on Principles of\n  Programming Languages (POPL 2025) Student Research Competition", "summary": "Static verification provides strong correctness guarantees for code; however,\nfully specifying programs for static verification is a complex, burdensome\nprocess for users. Gradual verification was introduced to make this process\neasier by supporting the verification of partially specified programs. The only\ncurrently working gradual verifier, Gradual C0, successfully verifies heap\nmanipulating programs, but lacks expressiveness in its specification language.\nThis paper describes the design and implementation of an extension to Gradual\nC0 that supports unfolding expressions, which allow more intuitive\nspecifications of recursive heap data structures.", "AI": {"tldr": "\u672c\u6587\u6269\u5c55\u4e86Gradual C0\uff0c\u652f\u6301\u5c55\u5f00\u8868\u8fbe\u5f0f\uff0c\u4ee5\u66f4\u76f4\u89c2\u5730\u6307\u5b9a\u9012\u5f52\u5806\u6570\u636e\u7ed3\u6784\u3002", "motivation": "\u9759\u6001\u9a8c\u8bc1\u867d\u7136\u63d0\u4f9b\u5f3a\u6b63\u786e\u6027\u4fdd\u8bc1\uff0c\u4f46\u5b8c\u5168\u6307\u5b9a\u7a0b\u5e8f\u7684\u8fc7\u7a0b\u590d\u6742\u4e14\u7e41\u7410\u3002\u9010\u6b65\u9a8c\u8bc1\u65e8\u5728\u7b80\u5316\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4f46\u73b0\u6709\u5de5\u5177Gradual C0\u5728\u89c4\u8303\u8bed\u8a00\u4e0a\u7f3a\u4e4f\u8868\u73b0\u529b\u3002", "method": "\u8bbe\u8ba1\u5e76\u5b9e\u73b0\u4e86\u5bf9Gradual C0\u7684\u6269\u5c55\uff0c\u652f\u6301\u5c55\u5f00\u8868\u8fbe\u5f0f\u3002", "result": "\u6269\u5c55\u540e\u7684\u5de5\u5177\u80fd\u591f\u66f4\u76f4\u89c2\u5730\u6307\u5b9a\u9012\u5f52\u5806\u6570\u636e\u7ed3\u6784\u3002", "conclusion": "\u901a\u8fc7\u652f\u6301\u5c55\u5f00\u8868\u8fbe\u5f0f\uff0c\u63d0\u5347\u4e86\u9010\u6b65\u9a8c\u8bc1\u5de5\u5177\u7684\u5b9e\u7528\u6027\u548c\u8868\u73b0\u529b\u3002"}}
{"id": "2507.13774", "pdf": "https://arxiv.org/pdf/2507.13774", "abs": "https://arxiv.org/abs/2507.13774", "authors": ["Arthur Adjedj", "Meven Lennon-Bertrand", "Thibaut Benjamin", "Kenji Maillard"], "title": "AdapTT: Functoriality for Dependent Type Casts", "categories": ["cs.PL", "cs.LO", "D.3.1; F.3.2; F.4.1"], "comment": null, "summary": "The ability to cast values between related types is a leitmotiv of many\nflavors of dependent type theory, such as observational type theories,\nsubtyping, or cast calculi for gradual typing. These casts all exhibit a common\nstructural behavior that boils down to the pervasive functoriality of type\nformers. We propose and extensively study a type theory, called AdapTT, which\nmakes systematic and precise this idea of functorial type formers, with respect\nto an abstract notion of adapters relating types. Leveraging descriptions for\nfunctorial inductive types in AdapTT, we derive structural laws for type casts\non general inductive type formers.", "AI": {"tldr": "AdapTT \u662f\u4e00\u79cd\u7c7b\u578b\u7406\u8bba\uff0c\u901a\u8fc7\u62bd\u8c61\u9002\u914d\u5668\u5173\u7cfb\u7c7b\u578b\uff0c\u7cfb\u7edf\u5316\u5730\u7814\u7a76\u7c7b\u578b\u6784\u9020\u5668\u7684\u51fd\u5b50\u6027\uff0c\u5e76\u63a8\u5bfc\u51fa\u901a\u7528\u5f52\u7eb3\u7c7b\u578b\u6784\u9020\u5668\u7684\u7c7b\u578b\u8f6c\u6362\u7ed3\u6784\u89c4\u5f8b\u3002", "motivation": "\u7814\u7a76\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u4e2d\u7c7b\u578b\u8f6c\u6362\u7684\u5171\u540c\u7ed3\u6784\u884c\u4e3a\uff0c\u5c24\u5176\u662f\u7c7b\u578b\u6784\u9020\u5668\u7684\u51fd\u5b50\u6027\u3002", "method": "\u63d0\u51fa AdapTT \u7c7b\u578b\u7406\u8bba\uff0c\u5229\u7528\u9002\u914d\u5668\u5173\u7cfb\u7c7b\u578b\uff0c\u7cfb\u7edf\u5316\u5730\u63cf\u8ff0\u7c7b\u578b\u6784\u9020\u5668\u7684\u51fd\u5b50\u6027\u3002", "result": "\u901a\u8fc7 AdapTT \u7684\u63cf\u8ff0\uff0c\u63a8\u5bfc\u51fa\u901a\u7528\u5f52\u7eb3\u7c7b\u578b\u6784\u9020\u5668\u7684\u7c7b\u578b\u8f6c\u6362\u7ed3\u6784\u89c4\u5f8b\u3002", "conclusion": "AdapTT \u63d0\u4f9b\u4e86\u4e00\u79cd\u7cfb\u7edf\u5316\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u7814\u7a76\u548c\u5e94\u7528\u7c7b\u578b\u6784\u9020\u5668\u7684\u51fd\u5b50\u6027\u53ca\u5176\u5728\u7c7b\u578b\u8f6c\u6362\u4e2d\u7684\u4f5c\u7528\u3002"}}
{"id": "2507.13792", "pdf": "https://arxiv.org/pdf/2507.13792", "abs": "https://arxiv.org/abs/2507.13792", "authors": ["Riccardo Bianchini", "Francesco Dagnino", "Paola Giannini", "Elena Zucca"], "title": "Don't exhaust, don't waste", "categories": ["cs.PL"], "comment": "Submitted to JFP (Journal of Functional Programming)", "summary": "We extend the semantics and type system of a lambda calculus equipped with\ncommon constructs to be resource-aware. That is, the semantics keep tracks of\nthe usage of resources, and is stuck, besides in case of type errors, if either\na needed resource is exhausted, or a provided resource would be wasted. In such\nway, the type system guarantees, besides standard soundness, that for\nwell-typed programs there is a computation where no resource gets either\nexhausted or wasted.\n  The no-waste extension is parametric on an arbitrary grade algebra, modeling\nan arbitrary assortment of possible usages, and does not require ad-hoc changes\nto the underlying language. To this end, the semantics needs to be formalized\nin big-step style; as a consequence, expressing and proving (resource-aware)\nsoundness is challenging, and is achieved by applying recent techniques based\non coinductive reasoning.", "AI": {"tldr": "\u6269\u5c55\u4e86lambda\u6f14\u7b97\u7684\u8bed\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\uff0c\u4f7f\u5176\u5177\u5907\u8d44\u6e90\u611f\u77e5\u80fd\u529b\uff0c\u786e\u4fdd\u8d44\u6e90\u4e0d\u88ab\u8017\u5c3d\u6216\u6d6a\u8d39\u3002", "motivation": "\u4e3alambda\u6f14\u7b97\u5f15\u5165\u8d44\u6e90\u611f\u77e5\u80fd\u529b\uff0c\u4ee5\u8ddf\u8e2a\u8d44\u6e90\u4f7f\u7528\u60c5\u51b5\uff0c\u907f\u514d\u8d44\u6e90\u8017\u5c3d\u6216\u6d6a\u8d39\u3002", "method": "\u57fa\u4e8e\u4efb\u610f\u7b49\u7ea7\u4ee3\u6570\u53c2\u6570\u5316\u6269\u5c55\uff0c\u65e0\u9700\u5bf9\u5e95\u5c42\u8bed\u8a00\u8fdb\u884c\u7279\u6b8a\u4fee\u6539\uff0c\u91c7\u7528\u5927\u6b65\u8bed\u4e49\u5f62\u5f0f\u5316\u3002", "result": "\u7c7b\u578b\u7cfb\u7edf\u4fdd\u8bc1\u5728\u826f\u597d\u7c7b\u578b\u7a0b\u5e8f\u4e2d\u5b58\u5728\u65e0\u8d44\u6e90\u8017\u5c3d\u6216\u6d6a\u8d39\u7684\u8ba1\u7b97\u8def\u5f84\u3002", "conclusion": "\u901a\u8fc7\u5171\u5f52\u7eb3\u63a8\u7406\u6280\u672f\uff0c\u6210\u529f\u5b9e\u73b0\u4e86\u8d44\u6e90\u611f\u77e5\u7684\u8bed\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\u7684\u5f62\u5f0f\u5316\u4e0e\u9a8c\u8bc1\u3002"}}
{"id": "2507.13499", "pdf": "https://arxiv.org/pdf/2507.13499", "abs": "https://arxiv.org/abs/2507.13499", "authors": ["Chandra Maddila", "Negar Ghorbani", "James Saindon", "Parth Thakkar", "Vijayaraghavan Murali", "Rui Abreu", "Jingyue Shen", "Brian Zhou", "Nachiappan Nagappan", "Peter C. Rigby"], "title": "AI-Assisted Fixes to Code Review Comments at Scale", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": null, "summary": "Aim. There are 10s of thousands of code review comments each week at Meta. We\ndeveloped Metamate for Code Review (MetaMateCR) that provides AI-assisted fixes\nfor reviewer comments in production at scale.\n  Method. We developed an internal benchmark of 64k <review comment, patch>\ndata points to fine-tune Llama models. Once our models achieve reasonable\noffline results, we roll them into production. To ensure that our AI-assisted\nfixes do not negatively impact the time it takes to do code reviews, we conduct\nrandomized controlled safety trials as well as full production experiments.\n  Offline Results. As a baseline, we compare GPT-4o to our small and large\nLlama models. In offline results, our LargeLSFT model creates an exact match\npatch 68% of the time outperforming GPT-4o by 9 percentage points (pp). The\ninternal models also use more modern Hack functions when compared to the PHP\nfunctions suggested by GPT-4o.\n  Safety Trial. When we roll MetaMateCR into production in a safety trial that\ncompares no AI patches with AI patch suggestions, we see a large regression\nwith reviewers taking over 5% longer to conduct reviews. After investigation,\nwe modify the UX to only show authors the AI patches, and see no regressions in\nthe time for reviews.\n  Production. When we roll LargeLSFT into production, we see an\nActionableToApplied rate of 19.7%, which is a 9.2pp improvement over GPT-4o.\nOur results illustrate the importance of safety trials in ensuring that AI does\nnot inadvertently slow down engineers, and a successful review comment to AI\npatch product running at scale.", "AI": {"tldr": "Meta\u5f00\u53d1\u4e86MetaMateCR\uff0c\u5229\u7528AI\u4e3a\u4ee3\u7801\u5ba1\u67e5\u63d0\u4f9b\u81ea\u52a8\u4fee\u590d\u5efa\u8bae\uff0c\u5e76\u901a\u8fc7\u5b89\u5168\u8bd5\u9a8c\u786e\u4fdd\u4e0d\u5f71\u54cd\u5ba1\u67e5\u6548\u7387\uff0c\u6700\u7ec8\u5728\u751f\u4ea7\u4e2d\u663e\u8457\u63d0\u5347\u4e86\u4fee\u590d\u7387\u3002", "motivation": "Meta\u6bcf\u5468\u6709\u6570\u4e07\u6761\u4ee3\u7801\u5ba1\u67e5\u8bc4\u8bba\uff0c\u9700\u8981\u9ad8\u6548\u5de5\u5177\u8f85\u52a9\u5f00\u53d1\u8005\u5feb\u901f\u4fee\u590d\u95ee\u9898\u3002", "method": "\u901a\u8fc764k\u6570\u636e\u70b9\u5fae\u8c03Llama\u6a21\u578b\uff0c\u5e76\u8fdb\u884c\u79bb\u7ebf\u6d4b\u8bd5\u3001\u5b89\u5168\u8bd5\u9a8c\u548c\u751f\u4ea7\u5b9e\u9a8c\u3002", "result": "\u5927\u578bLlama\u6a21\u578b\u79bb\u7ebf\u51c6\u786e\u738768%\uff0c\u4f18\u4e8eGPT-4o 9\u4e2a\u767e\u5206\u70b9\uff1b\u751f\u4ea7\u4e2d\u4fee\u590d\u7387\u63d0\u53479.2\u4e2a\u767e\u5206\u70b9\u3002", "conclusion": "MetaMateCR\u5c55\u793a\u4e86AI\u8f85\u52a9\u5de5\u5177\u5728\u89c4\u6a21\u5316\u5e94\u7528\u4e2d\u7684\u6210\u529f\uff0c\u540c\u65f6\u5f3a\u8c03\u4e86\u5b89\u5168\u8bd5\u9a8c\u7684\u91cd\u8981\u6027\u3002"}}
{"id": "2507.13635", "pdf": "https://arxiv.org/pdf/2507.13635", "abs": "https://arxiv.org/abs/2507.13635", "authors": ["Nengkun Yu", "Jens Palsberg", "Thomas Reps"], "title": "SAQR-QC: A Logic for Scalable but Approximate Quantitative Reasoning about Quantum Circuits", "categories": ["quant-ph", "cs.LO", "cs.PL"], "comment": "Comments are welcome", "summary": "Reasoning about quantum programs remains a fundamental challenge, regardless\nof the programming model or computational paradigm. Despite extensive research,\nexisting verification techniques are insufficient--even for quantum circuits, a\ndeliberately restricted model that lacks classical control, but still underpins\nmany current quantum algorithms. Many existing formal methods require\nexponential time and space to represent and manipulate (representations of)\nassertions and judgments, making them impractical for quantum circuits with\nmany qubits. This paper presents a logic for reasoning in such settings, called\nSAQR-QC. The logic supports Scalable but Approximate Quantitative Reasoning\nabout Quantum Circuits, whence the name. SAQR-QC has three characteristics: (i)\nsome (deliberate) loss of precision is built into it; (ii) it has a mechanism\nto help the accumulated loss of precision during a sequence of reasoning steps\nremain small; and (iii) most importantly, to make reasoning scalable, all\nreasoning steps are local--i.e., they each involve just a small number of\nqubits. We demonstrate the effectiveness of SAQR-QC via two case studies: the\nverification of GHZ circuits involving non-Clifford gates, and the analysis of\nquantum phase estimation--a core subroutine in Shor's factoring algorithm.", "AI": {"tldr": "SAQR-QC\u662f\u4e00\u79cd\u7528\u4e8e\u91cf\u5b50\u7535\u8def\u7684\u53ef\u6269\u5c55\u8fd1\u4f3c\u5b9a\u91cf\u63a8\u7406\u903b\u8f91\uff0c\u901a\u8fc7\u727a\u7272\u90e8\u5206\u7cbe\u5ea6\u548c\u5c40\u90e8\u63a8\u7406\u6b65\u9aa4\u5b9e\u73b0\u9ad8\u6548\u6027\u3002", "motivation": "\u73b0\u6709\u91cf\u5b50\u7a0b\u5e8f\u9a8c\u8bc1\u6280\u672f\u6548\u7387\u4f4e\u4e0b\uff0c\u65e0\u6cd5\u5904\u7406\u591a\u91cf\u5b50\u4f4d\u7535\u8def\uff0c\u9700\u8981\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u63a8\u7406\u65b9\u6cd5\u3002", "method": "\u63d0\u51faSAQR-QC\u903b\u8f91\uff0c\u901a\u8fc7\u6545\u610f\u635f\u5931\u7cbe\u5ea6\u3001\u63a7\u5236\u7cbe\u5ea6\u635f\u5931\u79ef\u7d2f\u548c\u5c40\u90e8\u63a8\u7406\u6b65\u9aa4\u5b9e\u73b0\u9ad8\u6548\u63a8\u7406\u3002", "result": "\u901a\u8fc7GHZ\u7535\u8def\u548c\u91cf\u5b50\u76f8\u4f4d\u4f30\u8ba1\u6848\u4f8b\u9a8c\u8bc1\u4e86SAQR-QC\u7684\u6709\u6548\u6027\u3002", "conclusion": "SAQR-QC\u4e3a\u91cf\u5b50\u7535\u8def\u63d0\u4f9b\u4e86\u4e00\u79cd\u53ef\u6269\u5c55\u7684\u8fd1\u4f3c\u63a8\u7406\u65b9\u6cd5\uff0c\u9002\u7528\u4e8e\u590d\u6742\u91cf\u5b50\u7b97\u6cd5\u3002"}}
