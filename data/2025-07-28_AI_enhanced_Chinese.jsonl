{"id": "2507.18792", "pdf": "https://arxiv.org/pdf/2507.18792", "abs": "https://arxiv.org/abs/2507.18792", "authors": ["Zixu Zhou"], "title": "Decompiling Rust: An Empirical Study of Compiler Optimizations and Reverse Engineering Challenges", "categories": ["cs.PL", "cs.SE"], "comment": null, "summary": "Decompiling Rust binaries is challenging due to the language's rich type\nsystem, aggressive compiler optimizations, and widespread use of high-level\nabstractions. In this work, we conduct a benchmark-driven evaluation of\ndecompilation quality across core Rust features and compiler build modes. Our\nautomated scoring framework shows that generic types, trait methods, and error\nhandling constructs significantly reduce decompilation quality, especially in\nrelease builds. Through representative case studies, we analyze how specific\nlanguage constructs affect control flow, variable naming, and type information\nrecovery. Our findings provide actionable insights for tool developers and\nhighlight the need for Rust-aware decompilation strategies.", "AI": {"tldr": "\u8bba\u6587\u8bc4\u4f30\u4e86Rust\u4e8c\u8fdb\u5236\u6587\u4ef6\u53cd\u7f16\u8bd1\u7684\u6311\u6218\uff0c\u53d1\u73b0\u6cdb\u578b\u3001\u7279\u8d28\u65b9\u6cd5\u548c\u9519\u8bef\u5904\u7406\u7ed3\u6784\u663e\u8457\u964d\u4f4e\u53cd\u7f16\u8bd1\u8d28\u91cf\uff0c\u5c24\u5176\u662f\u5728\u53d1\u5e03\u7248\u672c\u4e2d\u3002", "motivation": "\u7531\u4e8eRust\u4e30\u5bcc\u7684\u7c7b\u578b\u7cfb\u7edf\u3001\u7f16\u8bd1\u5668\u4f18\u5316\u548c\u9ad8\u5c42\u62bd\u8c61\uff0c\u53cd\u7f16\u8bd1\u5176\u4e8c\u8fdb\u5236\u6587\u4ef6\u5177\u6709\u6311\u6218\u6027\u3002", "method": "\u901a\u8fc7\u57fa\u51c6\u6d4b\u8bd5\u9a71\u52a8\u7684\u8bc4\u4f30\u6846\u67b6\uff0c\u5206\u6790\u6838\u5fc3Rust\u529f\u80fd\u548c\u7f16\u8bd1\u5668\u6784\u5efa\u6a21\u5f0f\u5bf9\u53cd\u7f16\u8bd1\u8d28\u91cf\u7684\u5f71\u54cd\u3002", "result": "\u6cdb\u578b\u3001\u7279\u8d28\u65b9\u6cd5\u548c\u9519\u8bef\u5904\u7406\u7ed3\u6784\u663e\u8457\u964d\u4f4e\u53cd\u7f16\u8bd1\u8d28\u91cf\uff0c\u5c24\u5176\u662f\u5728\u53d1\u5e03\u7248\u672c\u4e2d\u3002", "conclusion": "\u7814\u7a76\u4e3a\u5de5\u5177\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u5b9e\u7528\u89c1\u89e3\uff0c\u5e76\u5f3a\u8c03\u9700\u8981Rust\u611f\u77e5\u7684\u53cd\u7f16\u8bd1\u7b56\u7565\u3002"}}
{"id": "2507.18885", "pdf": "https://arxiv.org/pdf/2507.18885", "abs": "https://arxiv.org/abs/2507.18885", "authors": ["Qiyuan Xu", "Renxi Wang", "Haonan Li", "David Sanan", "Conrad Watt"], "title": "IsaMini: Redesigned Isabelle Proof Lanugage for Machine Learning", "categories": ["cs.PL"], "comment": null, "summary": "Neural Theorem Proving (NTP) employs deep learning methods, particularly\nLarge Language Models (LLMs), to automate formal proofs in proof assistants.\nThis approach holds promise for reducing the dramatic labor costs or\ncomputation costs required in proof engineering, which is fundamental to formal\nverification and other software engineering methods. The paper explores the\npotential of improving NTP by redesigning the proof language, given that LLMs'\ncapabilities depend highly on representations. We introduce \\emph{MiniLang}, a\nredesigned proof language for Isabelle/HOL incorporating an improved version of\nSledgehammer. Experiments show MiniLang benefits two fine-tuned LLMs by\nimproving the success rate on the PISA benchmark by up to 29\\% in comparison to\ngeneration of Isar proof script. The success rate under one attempt (so-called\n\\emph{pass@1}) reaches 69.1\\%, exceeding the previous Baldur's pass@64\n(65.7\\%); The pass@8 reaches 79.2\\%, exceeding the state-of-the-art on PISA\n(71.0\\%) achieved by Magnushammer.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aMiniLang\u7684\u6539\u8fdb\u8bc1\u660e\u8bed\u8a00\uff0c\u7528\u4e8e\u63d0\u5347\u795e\u7ecf\u5b9a\u7406\u8bc1\u660e\uff08NTP\uff09\u7684\u6027\u80fd\uff0c\u5b9e\u9a8c\u663e\u793a\u5176\u5728PISA\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u663e\u8457\u63d0\u9ad8\u4e86\u6210\u529f\u7387\u3002", "motivation": "\u901a\u8fc7\u6539\u8fdb\u8bc1\u660e\u8bed\u8a00\u7684\u8868\u793a\u5f62\u5f0f\uff0c\u5229\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u7684\u80fd\u529b\uff0c\u964d\u4f4e\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4e2d\u7684\u52b3\u52a8\u529b\u548c\u8ba1\u7b97\u6210\u672c\u3002", "method": "\u8bbe\u8ba1\u4e86MiniLang\uff0c\u4e00\u79cd\u9488\u5bf9Isabelle/HOL\u7684\u6539\u8fdb\u8bc1\u660e\u8bed\u8a00\uff0c\u5e76\u7ed3\u5408\u4e86\u589e\u5f3a\u7248\u7684Sledgehammer\u5de5\u5177\uff0c\u901a\u8fc7\u5b9e\u9a8c\u9a8c\u8bc1\u5176\u6548\u679c\u3002", "result": "MiniLang\u5c06PISA\u57fa\u51c6\u6d4b\u8bd5\u7684\u6210\u529f\u7387\u63d0\u9ad8\u4e8629%\uff0cpass@1\u8fbe\u523069.1%\uff0cpass@8\u8fbe\u523079.2%\uff0c\u5747\u8d85\u8fc7\u73b0\u6709\u6280\u672f\u3002", "conclusion": "MiniLang\u901a\u8fc7\u4f18\u5316\u8bc1\u660e\u8bed\u8a00\u8868\u793a\uff0c\u663e\u8457\u63d0\u5347\u4e86NTP\u7684\u6027\u80fd\uff0c\u4e3a\u5f62\u5f0f\u5316\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u66f4\u9ad8\u6548\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2507.19015", "pdf": "https://arxiv.org/pdf/2507.19015", "abs": "https://arxiv.org/abs/2507.19015", "authors": ["Samuel Xifaras", "Panagiotis Manolios", "Andrew T. Walter", "William Robertson"], "title": "An Enumerative Embedding of the Python Type System in ACL2s", "categories": ["cs.PL", "cs.LO", "cs.SE"], "comment": "In Proceedings ACL2 2025, arXiv:2507.18567", "summary": "Python is a high-level interpreted language that has become an industry\nstandard in a wide variety of applications. In this paper, we take a first step\ntowards using ACL2s to reason about Python code by developing an embedding of a\nsubset of the Python type system in ACL2s. The subset of Python types we\nsupport includes many of the most commonly used type annotations as well as\nuser-defined types comprised of supported types. We provide ACL2s definitions\nof these types, as well as defdata enumerators that are customized to provide\ncode coverage and identify errors in Python programs. Using the ACL2s\nembedding, we can generate instances of types that can then be used as inputs\nto fuzz Python programs, which allows us to identify bugs in Python code that\nare not detected by state-of-the-art Python type checkers. We evaluate our work\nagainst four open-source repositories, extracting their type information and\ngenerating inputs for fuzzing functions with type signatures that are in the\nsupported subset of Python types. Note that we only use the type signatures of\nfunctions to generate inputs and treat the bodies of functions as black boxes.\nWe measure code coverage, which ranges from about 68% to more than 80%, and\nidentify code patterns that hinder coverage such as complex branch conditions\nand external file system dependencies. We conclude with a discussion of the\nresults and recommendations for future work.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u5728ACL2s\u4e2d\u5d4c\u5165Python\u7c7b\u578b\u7cfb\u7edf\u5b50\u96c6\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u751f\u6210\u8f93\u5165\u4ee5\u6a21\u7cca\u6d4b\u8bd5Python\u7a0b\u5e8f\uff0c\u5e76\u8bc6\u522b\u672a\u88ab\u73b0\u6709\u7c7b\u578b\u68c0\u67e5\u5668\u53d1\u73b0\u7684\u9519\u8bef\u3002", "motivation": "Python\u4f5c\u4e3a\u4e00\u79cd\u5e7f\u6cdb\u4f7f\u7528\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u5176\u7c7b\u578b\u7cfb\u7edf\u7684\u590d\u6742\u6027\u9700\u8981\u66f4\u5f3a\u5927\u7684\u5de5\u5177\u8fdb\u884c\u9a8c\u8bc1\u3002\u672c\u6587\u65e8\u5728\u5229\u7528ACL2s\u5bf9Python\u4ee3\u7801\u8fdb\u884c\u5f62\u5f0f\u5316\u9a8c\u8bc1\u3002", "method": "\u5728ACL2s\u4e2d\u5d4c\u5165Python\u7c7b\u578b\u7cfb\u7edf\u7684\u5b50\u96c6\uff0c\u5305\u62ec\u5e38\u7528\u7c7b\u578b\u6ce8\u89e3\u548c\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\uff0c\u5e76\u751f\u6210\u8f93\u5165\u4ee5\u6a21\u7cca\u6d4b\u8bd5Python\u7a0b\u5e8f\u3002", "result": "\u5728\u56db\u4e2a\u5f00\u6e90\u4ed3\u5e93\u4e2d\u6d4b\u8bd5\uff0c\u4ee3\u7801\u8986\u76d6\u7387\u4ecb\u4e8e68%\u81f380%\u4e4b\u95f4\uff0c\u5e76\u8bc6\u522b\u4e86\u5f71\u54cd\u8986\u76d6\u7387\u7684\u4ee3\u7801\u6a21\u5f0f\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6709\u6548\u8bc6\u522b\u4e86Python\u4ee3\u7801\u4e2d\u7684\u9519\u8bef\uff0c\u5e76\u63d0\u51fa\u4e86\u672a\u6765\u6539\u8fdb\u65b9\u5411\u3002"}}
{"id": "2507.19176", "pdf": "https://arxiv.org/pdf/2507.19176", "abs": "https://arxiv.org/abs/2507.19176", "authors": ["Weijun Chen", "Yuxi Fu", "Huan Long"], "title": "A Programming Language for Feasible Solutions", "categories": ["cs.PL"], "comment": null, "summary": "Runtime efficiency and termination are crucial properties in the studies of\nprogram verification. Instead of dealing with these issues in an ad hoc manner,\nit would be useful to develop a robust framework in which such properties are\nguaranteed by design. This paper introduces a new imperative programming\nlanguage whose design is grounded in a static type system that ensures the\nfollowing equivalence property: All definable programs are guaranteed to run in\npolynomial time; Conversely, all problems solvable in polynomial time can be\nsolved by some programs of the language. The contribution of this work is\ntwofold. On the theoretical side, the foundational equivalence property is\nestablished, and the proof of the equivalence theorem is non-trivial. On the\npractical side, a programming approach is proposed that can streamline program\nanalysis and verification for feasible computations. An interpreter for the\nlanguage has been implemented, demonstrating the feasibility of the approach in\npractice.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8bed\u8a00\uff0c\u5176\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\u786e\u4fdd\u6240\u6709\u53ef\u5b9a\u4e49\u7a0b\u5e8f\u5747\u5728\u591a\u9879\u5f0f\u65f6\u95f4\u5185\u8fd0\u884c\uff0c\u4e14\u6240\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u53ef\u89e3\u95ee\u9898\u5747\u53ef\u7531\u8be5\u8bed\u8a00\u89e3\u51b3\u3002", "motivation": "\u4e3a\u89e3\u51b3\u7a0b\u5e8f\u9a8c\u8bc1\u4e2d\u7684\u8fd0\u884c\u65f6\u6548\u7387\u548c\u7ec8\u6b62\u6027\u95ee\u9898\uff0c\u8bbe\u8ba1\u4e00\u4e2a\u4fdd\u8bc1\u8fd9\u4e9b\u6027\u8d28\u7684\u7a33\u5065\u6846\u67b6\u3002", "method": "\u57fa\u4e8e\u9759\u6001\u7c7b\u578b\u7cfb\u7edf\u8bbe\u8ba1\u65b0\u8bed\u8a00\uff0c\u786e\u4fdd\u7a0b\u5e8f\u8fd0\u884c\u65f6\u95f4\u591a\u9879\u5f0f\u5316\uff0c\u5e76\u8bc1\u660e\u5176\u4e0e\u591a\u9879\u5f0f\u65f6\u95f4\u95ee\u9898\u7684\u7b49\u4ef7\u6027\u3002", "result": "\u7406\u8bba\u8bc1\u660e\u4e86\u7b49\u4ef7\u6027\u5b9a\u7406\uff0c\u5b9e\u8df5\u4e0a\u5b9e\u73b0\u4e86\u8bed\u8a00\u89e3\u91ca\u5668\uff0c\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u53ef\u884c\u6027\u3002", "conclusion": "\u8be5\u8bed\u8a00\u4e3a\u7a0b\u5e8f\u5206\u6790\u548c\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u53ef\u9760\u7684\u65b9\u6cd5\u3002"}}
{"id": "2507.18755", "pdf": "https://arxiv.org/pdf/2507.18755", "abs": "https://arxiv.org/abs/2507.18755", "authors": ["Chandra Maddila", "Adam Tait", "Claire Chang", "Daniel Cheng", "Nauman Ahmad", "Vijayaraghavan Murali", "Marshall Roch", "Arnaud Avondet", "Aaron Meltzer", "Victor Montalvao", "Michael Hopko", "Chris Waterson", "Parth Thakkar", "Renuka Fernandez", "Kristian Kristensen", "Sivan Barzily", "Sherry Chen", "Rui Abreu", "Nachiappan Nagappan", "Payam Shodjai", "Killian Murphy", "James Everingham", "Aparna Ramani", "Peter C. Rigby"], "title": "Agentic Program Repair from Test Failures at Scale: A Neuro-symbolic approach with static analysis and test execution feedback", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": null, "summary": "Aim: With the advent of LLMs, sophisticated agentic program repair has become\nviable at large organizations with large codebases. In this work, we develop an\nEngineering Agent that fixes the source code based on test failures at scale\nacross diverse software offerings internally.\n  Method: Using Llama as the base, we employ the ReAct harness to develop an\nagent. We start with a test failure that was triaged by a rule-based test\nfailure bot. We then set up an agentic harness and allow the agent to reason\nand run a set of 15 actions from reading a file to generating a patch. We\nprovide feedback to the agent through static analysis and test failures so it\ncan refine its solution. We leverage an LLM-as-a-Judge to ensure that the patch\nconforms to the standards followed by a human review to land fixes.\n  Benchmark Findings: We curated offline benchmarks for our patch generator,\nthe Engineering Agent loop, and the LLM-as-a-Judge. In offline evaluations we\nfound that a specialized 70B model is highly competitive with the much larger\nbut vanilla Llama-405B. In an ablation study, we found that the ReAct harness\n(neural model) benefited from the symbolic information from static analysis\ntools and test execution traces. A model that strikes a balance between the\nsolve rate and error rate vs the cost and latency has a benchmark solve rate of\n42.3% using an average 11.8 feedback iterations.\n  Production Findings: In a three month period, 80% of the generated fixes were\nreviewed, of which 31.5% were landed (25.5% of the total number of generated\nfixes).\n  Feedback from Engineers: We used open coding to extract qualitative themes\nfrom engineers' feedback. We saw positive feedback in the form of quick\napprovals, gratitude, and surprise. We also found mixed feedback when the\nEngineering Agent's solution was partially correct and it served as a good\nstarting point.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u57fa\u4e8eLLM\u7684\u5de5\u7a0b\u4ee3\u7406\uff0c\u7528\u4e8e\u5927\u89c4\u6a21\u4fee\u590d\u4ee3\u7801\u4e2d\u7684\u6d4b\u8bd5\u5931\u8d25\u95ee\u9898\uff0c\u7ed3\u5408ReAct\u6846\u67b6\u548c\u9759\u6001\u5206\u6790\u5de5\u5177\uff0c\u53d6\u5f97\u4e8642.3%\u7684\u89e3\u51b3\u7387\uff0c\u5e76\u5728\u751f\u4ea7\u4e2d\u843d\u5730\u4e8625.5%\u7684\u4fee\u590d\u3002", "motivation": "\u968f\u7740LLM\u7684\u53d1\u5c55\uff0c\u5927\u89c4\u6a21\u4ee3\u7801\u4fee\u590d\u6210\u4e3a\u53ef\u80fd\uff0c\u76ee\u6807\u662f\u5f00\u53d1\u4e00\u4e2a\u80fd\u591f\u9ad8\u6548\u4fee\u590d\u6d4b\u8bd5\u5931\u8d25\u7684\u5de5\u7a0b\u4ee3\u7406\u3002", "method": "\u4ee5Llama\u4e3a\u57fa\u7840\uff0c\u4f7f\u7528ReAct\u6846\u67b6\u5f00\u53d1\u4ee3\u7406\uff0c\u7ed3\u5408\u9759\u6001\u5206\u6790\u548c\u6d4b\u8bd5\u53cd\u9988\u8fdb\u884c\u8fed\u4ee3\u4fee\u590d\uff0c\u5e76\u5229\u7528LLM-as-a-Judge\u786e\u4fdd\u4fee\u590d\u8d28\u91cf\u3002", "result": "\u79bb\u7ebf\u8bc4\u4f30\u4e2d\uff0c70B\u6a21\u578b\u8868\u73b0\u63a5\u8fd1405B\u6a21\u578b\uff0c\u89e3\u51b3\u7387\u4e3a42.3%\uff1b\u751f\u4ea7\u4e2d\uff0c25.5%\u7684\u4fee\u590d\u88ab\u843d\u5730\u3002", "conclusion": "\u5de5\u7a0b\u4ee3\u7406\u5728\u4ee3\u7801\u4fee\u590d\u4e2d\u8868\u73b0\u826f\u597d\uff0c\u4f46\u4ecd\u6709\u6539\u8fdb\u7a7a\u95f4\uff0c\u5c24\u5176\u662f\u5728\u90e8\u5206\u4fee\u590d\u7684\u51c6\u786e\u6027\u4e0a\u3002"}}
{"id": "2507.19012", "pdf": "https://arxiv.org/pdf/2507.19012", "abs": "https://arxiv.org/abs/2507.19012", "authors": ["Alessandro Coglio", "Eric McCarthy"], "title": "A Formalization of the Yul Language and Some Verified Yul Code Transformations", "categories": ["cs.LO", "cs.PL"], "comment": "In Proceedings ACL2 2025, arXiv:2507.18567", "summary": "Yul is an intermediate language used in the compilation of the Solidity\nprogramming language for Ethereum smart contracts. The compiler applies\ncustomizable sequences of transformations to Yul code. To help ensure the\ncorrectness of these transformations and their sequencing, we used the ACL2\ntheorem prover to develop a formalization of the syntax and semantics of Yul,\nproofs relating static and dynamic semantics, a formalization of some Yul code\ntransformations, and correctness proofs for these transformations.", "AI": {"tldr": "Yul\u662fSolidity\u7f16\u7a0b\u8bed\u8a00\u7528\u4e8e\u4ee5\u592a\u574a\u667a\u80fd\u5408\u7ea6\u7684\u4e2d\u95f4\u8bed\u8a00\uff0c\u901a\u8fc7ACL2\u5b9a\u7406\u8bc1\u660e\u5668\u9a8c\u8bc1\u5176\u8bed\u6cd5\u3001\u8bed\u4e49\u53ca\u4ee3\u7801\u8f6c\u6362\u7684\u6b63\u786e\u6027\u3002", "motivation": "\u786e\u4fddYul\u4ee3\u7801\u8f6c\u6362\u53ca\u5176\u5e8f\u5217\u7684\u6b63\u786e\u6027\u3002", "method": "\u4f7f\u7528ACL2\u5b9a\u7406\u8bc1\u660e\u5668\u5f62\u5f0f\u5316Yul\u7684\u8bed\u6cd5\u548c\u8bed\u4e49\uff0c\u9a8c\u8bc1\u9759\u6001\u4e0e\u52a8\u6001\u8bed\u4e49\u5173\u7cfb\uff0c\u5e76\u8bc1\u660e\u4ee3\u7801\u8f6c\u6362\u7684\u6b63\u786e\u6027\u3002", "result": "\u6210\u529f\u5f62\u5f0f\u5316Yul\u7684\u8bed\u6cd5\u3001\u8bed\u4e49\u53ca\u90e8\u5206\u4ee3\u7801\u8f6c\u6362\uff0c\u5e76\u9a8c\u8bc1\u5176\u6b63\u786e\u6027\u3002", "conclusion": "\u901a\u8fc7\u5f62\u5f0f\u5316\u65b9\u6cd5\u9a8c\u8bc1\u4e86Yul\u4ee3\u7801\u8f6c\u6362\u7684\u6b63\u786e\u6027\uff0c\u4e3a\u667a\u80fd\u5408\u7ea6\u7f16\u8bd1\u63d0\u4f9b\u4e86\u53ef\u9760\u6027\u4fdd\u969c\u3002"}}
{"id": "2507.19271", "pdf": "https://arxiv.org/pdf/2507.19271", "abs": "https://arxiv.org/abs/2507.19271", "authors": ["Igli Begolli", "Meltem Aksoy", "Daniel Neider"], "title": "Fine-Tuning Multilingual Language Models for Code Review: An Empirical Study on Industrial C# Projects", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": null, "summary": "Code review is essential for maintaining software quality but often\ntime-consuming and cognitively demanding, especially in industrial\nenvironments. Recent advancements in language models (LMs) have opened new\navenues for automating core review tasks. This study presents the empirical\nevaluation of monolingual fine-tuning on the performance of open-source LMs\nacross three key automated code review tasks: Code Change Quality Estimation,\nReview Comment Generation, and Code Refinement. We fine-tuned three distinct\nmodels, CodeReviewer, CodeLlama-7B, and DeepSeek-R1-Distill, on a C\\# specific\ndataset combining public benchmarks with industrial repositories. Our study\ninvestigates how different configurations of programming languages and natural\nlanguages in the training data affect LM performance, particularly in comment\ngeneration. Additionally, we benchmark the fine-tuned models against an\nautomated software analysis tool (ASAT) and human reviewers to evaluate their\npractical utility in real-world settings. Our results show that monolingual\nfine-tuning improves model accuracy and relevance compared to multilingual\nbaselines. While LMs can effectively support code review workflows, especially\nfor routine or repetitive tasks, human reviewers remain superior in handling\nsemantically complex or context-sensitive changes. Our findings highlight the\nimportance of language alignment and task-specific adaptation in optimizing LMs\nfor automated code review.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86\u5355\u8bed\u8a00\u5fae\u8c03\u5bf9\u5f00\u6e90\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u5ba1\u67e5\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u5f71\u54cd\uff0c\u53d1\u73b0\u5176\u4f18\u4e8e\u591a\u8bed\u8a00\u57fa\u7ebf\uff0c\u4f46\u4eba\u7c7b\u5ba1\u67e5\u5458\u5728\u590d\u6742\u4efb\u52a1\u4e2d\u4ecd\u66f4\u4f18\u3002", "motivation": "\u4ee3\u7801\u5ba1\u67e5\u5bf9\u8f6f\u4ef6\u8d28\u91cf\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u8017\u65f6\u4e14\u8ba4\u77e5\u8d1f\u62c5\u91cd\uff0c\u8bed\u8a00\u6a21\u578b\u4e3a\u81ea\u52a8\u5316\u5ba1\u67e5\u4efb\u52a1\u63d0\u4f9b\u4e86\u65b0\u9014\u5f84\u3002", "method": "\u5bf9CodeReviewer\u3001CodeLlama-7B\u548cDeepSeek-R1-Distill\u8fdb\u884c\u5355\u8bed\u8a00\u5fae\u8c03\uff0c\u8bc4\u4f30\u5176\u5728\u4ee3\u7801\u53d8\u66f4\u8d28\u91cf\u4f30\u8ba1\u3001\u5ba1\u67e5\u8bc4\u8bba\u751f\u6210\u548c\u4ee3\u7801\u4f18\u5316\u4efb\u52a1\u4e2d\u7684\u8868\u73b0\u3002", "result": "\u5355\u8bed\u8a00\u5fae\u8c03\u63d0\u9ad8\u4e86\u6a21\u578b\u7684\u51c6\u786e\u6027\u548c\u76f8\u5173\u6027\uff0c\u4f46\u4eba\u7c7b\u5ba1\u67e5\u5458\u5728\u8bed\u4e49\u590d\u6742\u6216\u4e0a\u4e0b\u6587\u654f\u611f\u7684\u4efb\u52a1\u4e2d\u8868\u73b0\u66f4\u4f73\u3002", "conclusion": "\u8bed\u8a00\u5bf9\u9f50\u548c\u4efb\u52a1\u7279\u5b9a\u9002\u914d\u5bf9\u4f18\u5316\u8bed\u8a00\u6a21\u578b\u5728\u81ea\u52a8\u5316\u4ee3\u7801\u5ba1\u67e5\u4e2d\u7684\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002"}}
