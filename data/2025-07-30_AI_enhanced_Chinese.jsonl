{"id": "2507.21317", "pdf": "https://arxiv.org/pdf/2507.21317", "abs": "https://arxiv.org/abs/2507.21317", "authors": ["Paulette Koronkevich", "William J. Bowman"], "title": "One Weird Trick to Untie Landin's Knot", "categories": ["cs.PL"], "comment": null, "summary": "In this work, we explore Landin's Knot, which is understood as a pattern for\nencoding general recursion, including non-termination, that is possible after\nadding higher-order references to an otherwise terminating language. We observe\nthat this isn't always true -- higher-order references, by themselves, don't\nlead to non-termination. The key insight is that Landin's Knot relies not\nprimarily on references storing functions, but on unrestricted quantification\nover a function's environment. We show this through a closure converted\nlanguage, in which the function's environment is made explicit and hides the\ntype of the environment through impredicative quantification. Once references\nare added, this impredicative quantification can be exploited to encode\nrecursion. We conjecture that by restricting the quantification over the\nenvironment, higher-order references can be safely added to terminating\nlanguages, without resorting to more complex type systems such as linearity,\nand without restricting references from storing functions.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86Landin's Knot\u5728\u7f16\u7801\u9012\u5f52\u4e2d\u7684\u4f5c\u7528\uff0c\u6307\u51fa\u9ad8\u9636\u5f15\u7528\u672c\u8eab\u4e0d\u4f1a\u5bfc\u81f4\u975e\u7ec8\u6b62\u6027\uff0c\u5173\u952e\u5728\u4e8e\u5bf9\u51fd\u6570\u73af\u5883\u7684\u65e0\u9650\u5236\u91cf\u5316\u3002\u901a\u8fc7\u95ed\u5305\u8f6c\u6362\u8bed\u8a00\u5c55\u793a\u4e86\u8fd9\u4e00\u70b9\uff0c\u5e76\u63d0\u51fa\u9650\u5236\u91cf\u5316\u53ef\u4ee5\u5b89\u5168\u5730\u6dfb\u52a0\u9ad8\u9636\u5f15\u7528\u3002", "motivation": "\u7814\u7a76Landin's Knot\u5728\u7f16\u7801\u9012\u5f52\u4e2d\u7684\u4f5c\u7528\uff0c\u6f84\u6e05\u9ad8\u9636\u5f15\u7528\u4e0e\u975e\u7ec8\u6b62\u6027\u7684\u5173\u7cfb\uff0c\u63a2\u7d22\u5982\u4f55\u5728\u7ec8\u6b62\u6027\u8bed\u8a00\u4e2d\u5b89\u5168\u6dfb\u52a0\u9ad8\u9636\u5f15\u7528\u3002", "method": "\u4f7f\u7528\u95ed\u5305\u8f6c\u6362\u8bed\u8a00\uff0c\u5c06\u51fd\u6570\u73af\u5883\u663e\u5f0f\u5316\uff0c\u5e76\u901a\u8fc7\u975e\u8c13\u8bcd\u91cf\u5316\u9690\u85cf\u73af\u5883\u7c7b\u578b\u3002\u5206\u6790\u9ad8\u9636\u5f15\u7528\u5982\u4f55\u5229\u7528\u8fd9\u79cd\u91cf\u5316\u7f16\u7801\u9012\u5f52\u3002", "result": "\u53d1\u73b0\u9ad8\u9636\u5f15\u7528\u672c\u8eab\u4e0d\u5bfc\u81f4\u975e\u7ec8\u6b62\u6027\uff0c\u5173\u952e\u5728\u4e8e\u5bf9\u51fd\u6570\u73af\u5883\u7684\u65e0\u9650\u5236\u91cf\u5316\u3002\u9650\u5236\u91cf\u5316\u53ef\u4ee5\u907f\u514d\u975e\u7ec8\u6b62\u6027\u3002", "conclusion": "\u9650\u5236\u5bf9\u51fd\u6570\u73af\u5883\u7684\u91cf\u5316\u53ef\u4ee5\u5b89\u5168\u5730\u5728\u7ec8\u6b62\u6027\u8bed\u8a00\u4e2d\u6dfb\u52a0\u9ad8\u9636\u5f15\u7528\uff0c\u65e0\u9700\u590d\u6742\u7c7b\u578b\u7cfb\u7edf\u6216\u9650\u5236\u51fd\u6570\u5b58\u50a8\u3002"}}
{"id": "2507.21439", "pdf": "https://arxiv.org/pdf/2507.21439", "abs": "https://arxiv.org/abs/2507.21439", "authors": ["Yong Qi Foo", "Brian Sze-Kai Cheong", "Michael D. Adams"], "title": "Fixed-Point-Oriented Programming: A Concise and Elegant Paradigm", "categories": ["cs.PL"], "comment": null, "summary": "Fixed-Point-Oriented Programming (FPOP) is an emerging paradigm designed to\nstreamline the implementation of problems involving self-referential\ncomputations. These include graph algorithms, static analysis, parsing, and\ndistributed computing-domains that traditionally require complex and\ntricky-to-implement work-queue algorithms. Existing programming paradigms lack\ndirect support for these inherently fixed-point computations, leading to\ninefficient and error-prone implementations.\n  This white paper explores the potential of the FPOP paradigm, which offers a\nhigh-level abstraction that enables concise and expressive problem\nformulations. By leveraging structured inference rules and user-directed\noptimizations, FPOP allows developers to write declarative specifications while\nthe compiler ensures efficient execution. It not only reduces implementation\ncomplexity for programmers but also enhances adaptability, making it easier for\nprogrammers to explore alternative solutions and optimizations without\nmodifying the core logic of their program.\n  We demonstrate how FPOP simplifies algorithm implementation, improves\nmaintainability, and enables rapid prototyping by allowing problems to be\nclearly and concisely expressed. For example, the graph distance problem can be\nexpressed in only two executable lines of code with FPOP, while it takes an\norder of magnitude more code in other paradigms. By bridging the gap between\ntheoretical fixed-point formulations and practical implementations, we aim to\nfoster further research and adoption of this paradigm.", "AI": {"tldr": "FPOP\u662f\u4e00\u79cd\u65b0\u5174\u7f16\u7a0b\u8303\u5f0f\uff0c\u65e8\u5728\u7b80\u5316\u81ea\u5f15\u7528\u8ba1\u7b97\u95ee\u9898\u7684\u5b9e\u73b0\uff0c\u5982\u7b97\u6cd5\u3001\u9759\u6001\u5206\u6790\u7b49\uff0c\u51cf\u5c11\u590d\u6742\u6027\u548c\u9519\u8bef\u3002", "motivation": "\u4f20\u7edf\u7f16\u7a0b\u8303\u5f0f\u7f3a\u4e4f\u5bf9\u56fa\u5b9a\u70b9\u8ba1\u7b97\u7684\u652f\u6301\uff0c\u5bfc\u81f4\u5b9e\u73b0\u4f4e\u6548\u4e14\u6613\u9519\u3002", "method": "FPOP\u901a\u8fc7\u7ed3\u6784\u5316\u63a8\u7406\u89c4\u5219\u548c\u7528\u6237\u5bfc\u5411\u4f18\u5316\uff0c\u63d0\u4f9b\u9ad8\u7ea7\u62bd\u8c61\uff0c\u4f7f\u5f00\u53d1\u8005\u80fd\u7f16\u5199\u58f0\u660e\u5f0f\u89c4\u8303\u3002", "result": "FPOP\u663e\u8457\u7b80\u5316\u7b97\u6cd5\u5b9e\u73b0\uff0c\u63d0\u5347\u53ef\u7ef4\u62a4\u6027\uff0c\u4f8b\u5982\u56fe\u8ddd\u79bb\u95ee\u9898\u4ec5\u9700\u4e24\u884c\u4ee3\u7801\u3002", "conclusion": "FPOP\u586b\u8865\u4e86\u7406\u8bba\u56fa\u5b9a\u70b9\u516c\u5f0f\u4e0e\u5b9e\u9645\u5b9e\u73b0\u7684\u5dee\u8ddd\uff0c\u6709\u671b\u63a8\u52a8\u8fdb\u4e00\u6b65\u7814\u7a76\u548c\u5e94\u7528\u3002"}}
{"id": "2507.22048", "pdf": "https://arxiv.org/pdf/2507.22048", "abs": "https://arxiv.org/abs/2507.22048", "authors": ["Di Wang"], "title": "Composable Effect Handling for Programming LLM-integrated Scripts", "categories": ["cs.PL"], "comment": null, "summary": "Implementing LLM-integrated scripts introduces challenges in modularity and\nperformance, as scripts are often coupled to specific LLM implementations and\nfail to exploit parallelization opportunities. This paper proposes using\ncomposable effect handling to separate workflow logic from effectful\noperations, such as LLM calls, I/O, and concurrency, enabling modularity\nwithout sacrificing the opportunity for performance optimization. By treating\nthese operations as abstract interfaces and discharging them via effect\nhandlers, this paper shows that scripts can achieve significant speedups (e.g.,\n10$\\times$ in a Tree-of-Thoughts case study) without compromising modularity.\nThis paper aims to promote composable effect handling as a programming style\nfor LLM scripting.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4f7f\u7528\u53ef\u7ec4\u5408\u6548\u5e94\u5904\u7406\u6765\u5206\u79bb\u5de5\u4f5c\u6d41\u903b\u8f91\u4e0e\u6548\u5e94\u64cd\u4f5c\uff08\u5982LLM\u8c03\u7528\u3001I/O\u548c\u5e76\u53d1\uff09\uff0c\u4ee5\u63d0\u9ad8\u6a21\u5757\u5316\u548c\u6027\u80fd\u3002", "motivation": "\u89e3\u51b3LLM\u96c6\u6210\u811a\u672c\u4e2d\u6a21\u5757\u5316\u4e0d\u8db3\u548c\u6027\u80fd\u4f18\u5316\u53d7\u9650\u7684\u95ee\u9898\u3002", "method": "\u91c7\u7528\u53ef\u7ec4\u5408\u6548\u5e94\u5904\u7406\u6280\u672f\uff0c\u5c06\u6548\u5e94\u64cd\u4f5c\u62bd\u8c61\u4e3a\u63a5\u53e3\u5e76\u901a\u8fc7\u6548\u5e94\u5904\u7406\u5668\u5b9e\u73b0\u3002", "result": "\u5728Tree-of-Thoughts\u6848\u4f8b\u4e2d\u5b9e\u73b0\u4e8610\u500d\u7684\u52a0\u901f\uff0c\u540c\u65f6\u4fdd\u6301\u6a21\u5757\u5316\u3002", "conclusion": "\u53ef\u7ec4\u5408\u6548\u5e94\u5904\u7406\u662f\u4e00\u79cd\u9002\u7528\u4e8eLLM\u811a\u672c\u7f16\u7a0b\u7684\u6709\u6548\u98ce\u683c\u3002"}}
