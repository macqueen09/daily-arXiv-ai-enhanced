{"id": "2508.00005", "pdf": "https://arxiv.org/pdf/2508.00005", "abs": "https://arxiv.org/abs/2508.00005", "authors": ["Tilman Hinnerichs", "Bart Swinkels", "Jaap de Jong", "Reuben Gardos Reid", "Tudor Magirescu", "Neil Yorke-Smith", "Sebastijan Dumancic"], "title": "Modelling Program Spaces in Program Synthesis with Constraints", "categories": ["cs.PL", "cs.AI"], "comment": null, "summary": "A core challenge in program synthesis is taming the large space of possible\nprograms. Since program synthesis is essentially a combinatorial search, the\ncommunity has sought to leverage powerful combinatorial constraint solvers.\nHere, constraints are used to express the program semantics, but not as a\npotentially potent tool to remove unwanted programs. Recent inductive logic\nprogramming approaches introduce constraints on the program's syntax to be\nsynthesized. These syntactic constraints allow for checking and propagating a\nconstraint without executing the program, and thus for arbitrary operators. In\nthis work, we leverage syntactic constraints to model program spaces, defining\nnot just solutions that are feasible, but also ones that are likely useful. To\ndemonstrate this idea, we introduce BART, a solver that efficiently propagates\nand solves these constraints. We evaluate BART on program space enumeration\ntasks, finding that the constraints eliminate up to 99 percent of the program\nspace, and that modeling program spaces significantly reduces enumeration time.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u5229\u7528\u8bed\u6cd5\u7ea6\u675f\u6765\u9ad8\u6548\u7f29\u5c0f\u7a0b\u5e8f\u7a7a\u95f4\u7684\u65b9\u6cd5\uff0c\u5e76\u901a\u8fc7BART\u6c42\u89e3\u5668\u9a8c\u8bc1\u5176\u6709\u6548\u6027\u3002", "motivation": "\u7a0b\u5e8f\u5408\u6210\u7684\u6838\u5fc3\u6311\u6218\u5728\u4e8e\u5904\u7406\u5e9e\u5927\u7684\u7a0b\u5e8f\u7a7a\u95f4\uff0c\u73b0\u6709\u65b9\u6cd5\u672a\u5145\u5206\u5229\u7528\u7ea6\u675f\u6765\u5254\u9664\u65e0\u7528\u7a0b\u5e8f\u3002", "method": "\u5f15\u5165\u8bed\u6cd5\u7ea6\u675f\u5efa\u6a21\u7a0b\u5e8f\u7a7a\u95f4\uff0c\u5f00\u53d1BART\u6c42\u89e3\u5668\u8fdb\u884c\u9ad8\u6548\u7ea6\u675f\u4f20\u64ad\u4e0e\u6c42\u89e3\u3002", "result": "\u7ea6\u675f\u53ef\u6d88\u9664\u9ad8\u8fbe99%\u7684\u7a0b\u5e8f\u7a7a\u95f4\uff0c\u663e\u8457\u51cf\u5c11\u679a\u4e3e\u65f6\u95f4\u3002", "conclusion": "\u8bed\u6cd5\u7ea6\u675f\u662f\u4f18\u5316\u7a0b\u5e8f\u5408\u6210\u7684\u6709\u6548\u5de5\u5177\uff0cBART\u9a8c\u8bc1\u4e86\u5176\u6f5c\u529b\u3002"}}
{"id": "2508.00013", "pdf": "https://arxiv.org/pdf/2508.00013", "abs": "https://arxiv.org/abs/2508.00013", "authors": ["Zurabi Kobaladze", "Anna Arnania", "Tamar Sanikidze"], "title": "From Provable Correctness to Probabilistic Generation: A Comparative Review of Program Synthesis Paradigms", "categories": ["cs.PL", "I.2.6; F.1.1"], "comment": "78 pages. Undergraduate thesis project submitted in partial\n  fulfillment of the requirements for the Bachelor's degree in Computer Science\n  at Kutaisi International University", "summary": "Program synthesis--the automated generation of executable code from\nhigh-level specifications--has been a central goal of computer science for over\nfifty years. This thesis provides a comparative literature review of the main\nparadigms that have shaped the field, tracing its evolution from formal logic\nbased methods to recent advances using large scale neural models. We examine\nfive key approaches: logic based (deductive) synthesis, inductive (example\nbased) synthesis, sketch/schema based synthesis, large language model based\nsynthesis, and neuro-symbolic hybrids. For each, we analyze foundational\nprinciples, notable systems, and practical applications, highlighting trade\noffs between correctness guarantees, specification requirements, search\ncomplexity, and expressive power. By reviewing developments from formally\nverified synthesis tools such as KIDS and Coq to data driven models generating\nprobabilistic code from natural language like Codex, we present a comprehensive\nnarrative of progress and ongoing challenges. This work emphasizes the\ntransition from symbolic to hybrid neuro-symbolic methods and outlines future\ndirections for reliable and scalable program synthesis.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7efc\u8ff0\u4e86\u7a0b\u5e8f\u5408\u6210\u7684\u4e94\u79cd\u4e3b\u8981\u8303\u5f0f\uff0c\u4ece\u903b\u8f91\u57fa\u7840\u65b9\u6cd5\u5230\u795e\u7ecf\u7b26\u53f7\u6df7\u5408\u65b9\u6cd5\uff0c\u5206\u6790\u4e86\u5176\u539f\u7406\u3001\u7cfb\u7edf\u3001\u5e94\u7528\u53ca\u6743\u8861\u3002", "motivation": "\u63a2\u8ba8\u7a0b\u5e8f\u5408\u6210\u9886\u57df\u7684\u6f14\u53d8\uff0c\u4ece\u4f20\u7edf\u903b\u8f91\u65b9\u6cd5\u5230\u73b0\u4ee3\u795e\u7ecf\u6a21\u578b\uff0c\u4ee5\u5168\u9762\u7406\u89e3\u5176\u8fdb\u5c55\u4e0e\u6311\u6218\u3002", "method": "\u6bd4\u8f83\u4e94\u79cd\u5173\u952e\u65b9\u6cd5\uff1a\u903b\u8f91\u5408\u6210\u3001\u5f52\u7eb3\u5408\u6210\u3001\u8349\u56fe/\u6a21\u5f0f\u5408\u6210\u3001\u5927\u8bed\u8a00\u6a21\u578b\u5408\u6210\u53ca\u795e\u7ecf\u7b26\u53f7\u6df7\u5408\u65b9\u6cd5\u3002", "result": "\u5c55\u793a\u4e86\u4ece\u5f62\u5f0f\u9a8c\u8bc1\u5de5\u5177\u5230\u6570\u636e\u9a71\u52a8\u6a21\u578b\u7684\u8fdb\u5c55\uff0c\u5f3a\u8c03\u4e86\u795e\u7ecf\u7b26\u53f7\u6df7\u5408\u65b9\u6cd5\u7684\u6f5c\u529b\u3002", "conclusion": "\u7a0b\u5e8f\u5408\u6210\u6b63\u4ece\u7b26\u53f7\u65b9\u6cd5\u8f6c\u5411\u795e\u7ecf\u7b26\u53f7\u6df7\u5408\u65b9\u6cd5\uff0c\u672a\u6765\u9700\u5173\u6ce8\u53ef\u9760\u6027\u4e0e\u53ef\u6269\u5c55\u6027\u3002"}}
{"id": "2508.00016", "pdf": "https://arxiv.org/pdf/2508.00016", "abs": "https://arxiv.org/abs/2508.00016", "authors": ["Matt Kaufmann", "Yahya Sohail", "Warren A. Hunt Jr"], "title": "Extended Abstract: Mutable Objects with Several Implementations", "categories": ["cs.PL", "cs.LO"], "comment": "In Proceedings ACL2 2025, arXiv:2507.18567", "summary": "This extended abstract outlines an ACL2 feature, attach-stobj, that first\nappeared in ACL2 Version 8.6 (October, 2024). This feature supports different\nexecutable operations for a given abstract stobj, without requiring\nrecertification of the book that introduces that stobj or theorems about it.\nThe paper provides background as well as a user-level overview and some\nimplementation notes.", "AI": {"tldr": "ACL2\u7684attach-stobj\u529f\u80fd\u652f\u6301\u5bf9\u62bd\u8c61stobj\u7684\u4e0d\u540c\u53ef\u6267\u884c\u64cd\u4f5c\uff0c\u65e0\u9700\u91cd\u65b0\u8ba4\u8bc1\u76f8\u5173\u4e66\u7c4d\u6216\u5b9a\u7406\u3002", "motivation": "\u4e3a\u4e86\u89e3\u51b3\u5728ACL2\u4e2d\u5bf9\u62bd\u8c61stobj\u8fdb\u884c\u64cd\u4f5c\u65f6\u9700\u91cd\u65b0\u8ba4\u8bc1\u4e66\u7c4d\u6216\u5b9a\u7406\u7684\u95ee\u9898\uff0c\u63d0\u9ad8\u7075\u6d3b\u6027\u548c\u6548\u7387\u3002", "method": "\u4ecb\u7ecd\u4e86attach-stobj\u529f\u80fd\uff0c\u5305\u62ec\u5176\u80cc\u666f\u3001\u7528\u6237\u7ea7\u6982\u8ff0\u548c\u5b9e\u73b0\u7ec6\u8282\u3002", "result": "\u5b9e\u73b0\u4e86\u5bf9\u62bd\u8c61stobj\u7684\u4e0d\u540c\u64cd\u4f5c\u652f\u6301\uff0c\u907f\u514d\u4e86\u91cd\u65b0\u8ba4\u8bc1\u7684\u9700\u6c42\u3002", "conclusion": "attach-stobj\u529f\u80fd\u4e3aACL2\u7528\u6237\u63d0\u4f9b\u4e86\u66f4\u7075\u6d3b\u7684\u64cd\u4f5c\u65b9\u5f0f\uff0c\u7b80\u5316\u4e86\u5f00\u53d1\u6d41\u7a0b\u3002"}}
{"id": "2508.00422", "pdf": "https://arxiv.org/pdf/2508.00422", "abs": "https://arxiv.org/abs/2508.00422", "authors": ["Varun Bharti", "Shashwat Jha", "Dhruv Kumar", "Pankaj Jalote"], "title": "Automated Type Annotation in Python Using Large Language Models", "categories": ["cs.PL", "cs.LG"], "comment": "Under Review", "summary": "Type annotations in Python enhance maintainability and error detection.\nHowever, generating these annotations manually is error prone and requires\nextra effort. Traditional automation approaches like static analysis, machine\nlearning, and deep learning struggle with limited type vocabularies, behavioral\nover approximation, and reliance on large labeled datasets. In this work, we\nexplore the use of LLMs for generating type annotations in Python. We develop a\ngenerate check repair pipeline: the LLM proposes annotations guided by a\nConcrete Syntax Tree representation, a static type checker (Mypy) verifies\nthem, and any errors are fed back for iterative refinement. We evaluate four\nLLM variants: GPT 4oMini, GPT 4.1mini (general-purpose), and O3Mini, O4Mini\n(reasoning optimized), on 6000 code snippets from the ManyTypes4Py benchmark.\nWe first measure the proportion of code snippets annotated by LLMs for which\nMyPy reported no errors (i.e., consistent results): GPT 4oMini achieved\nconsistency on 65.9% of cases (34.1% inconsistent), while GPT 4.1mini, O3Mini,\nand O4Mini each reached approximately 88.6% consistency (around 11.4%\nfailures). To measure annotation quality, we then compute exact-match and\nbase-type match accuracies over all 6000 snippets: GPT 4.1mini and O3Mini\nperform the best, achieving up to 70.5% exact match and 79.1% base type\naccuracy, requiring under one repair iteration on average. Our results\ndemonstrate that general-purpose and reasoning optimized LLMs, without any task\nspecific fine tuning or additional training can be effective in generating\nconsistent type annotations.They perform competitively with traditional deep\nlearning techniques which require large labeled dataset for training. While our\nwork focuses on Python, the pipeline can be extended to other optionally typed\nimperative languages like Ruby", "AI": {"tldr": "\u4f7f\u7528LLM\u751f\u6210Python\u7c7b\u578b\u6ce8\u91ca\uff0c\u901a\u8fc7\u751f\u6210-\u68c0\u67e5-\u4fee\u590d\u6d41\u7a0b\u63d0\u9ad8\u6ce8\u91ca\u7684\u4e00\u81f4\u6027\u548c\u51c6\u786e\u6027\uff0c\u65e0\u9700\u989d\u5916\u8bad\u7ec3\u5373\u53ef\u4e0e\u4f20\u7edf\u6df1\u5ea6\u5b66\u4e60\u65b9\u6cd5\u7ade\u4e89\u3002", "motivation": "\u624b\u52a8\u751f\u6210Python\u7c7b\u578b\u6ce8\u91ca\u6613\u51fa\u9519\u4e14\u8017\u65f6\uff0c\u4f20\u7edf\u81ea\u52a8\u5316\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\uff0c\u63a2\u7d22LLM\u5728\u6b64\u4efb\u52a1\u4e2d\u7684\u6f5c\u529b\u3002", "method": "\u91c7\u7528\u751f\u6210-\u68c0\u67e5-\u4fee\u590d\u6d41\u7a0b\uff1aLLM\u57fa\u4e8e\u8bed\u6cd5\u6811\u751f\u6210\u6ce8\u91ca\uff0c\u9759\u6001\u68c0\u67e5\u5668\u9a8c\u8bc1\u5e76\u53cd\u9988\u9519\u8bef\u8fdb\u884c\u8fed\u4ee3\u4f18\u5316\u3002", "result": "GPT 4.1mini\u548cO3Mini\u8868\u73b0\u6700\u4f73\uff0c\u4e00\u81f4\u6027\u8fbe88.6%\uff0c\u51c6\u786e\u7387\u6700\u9ad870.5%\uff08\u7cbe\u786e\u5339\u914d\uff09\u548c79.1%\uff08\u57fa\u672c\u7c7b\u578b\u5339\u914d\uff09\u3002", "conclusion": "LLM\u65e0\u9700\u4efb\u52a1\u7279\u5b9a\u5fae\u8c03\u5373\u53ef\u9ad8\u6548\u751f\u6210\u7c7b\u578b\u6ce8\u91ca\uff0c\u9002\u7528\u4e8ePython\u53ca\u5176\u4ed6\u53ef\u9009\u7c7b\u578b\u8bed\u8a00\u3002"}}
{"id": "2508.00482", "pdf": "https://arxiv.org/pdf/2508.00482", "abs": "https://arxiv.org/abs/2508.00482", "authors": ["Erdem Yildirim", "Albert Schimpf", "Stefan Wehr", "Annette Bieniusa"], "title": "Semantic Subtyping for Maps in Erlang", "categories": ["cs.PL"], "comment": null, "summary": "In this paper we will construct a set-theoretic model of types featuring type\nvariables, base types, set-theoretic types and map types. Syntax of map types\nspans all the map types available in Erlang. The model of types is used to\ndefine a semantic subtyping relation based on set containment. The novelty of\nthis work is the definition of subtyping over parameteric map types.", "AI": {"tldr": "\u6784\u5efa\u4e86\u4e00\u4e2a\u5305\u542b\u7c7b\u578b\u53d8\u91cf\u3001\u57fa\u672c\u7c7b\u578b\u3001\u96c6\u5408\u7c7b\u578b\u548c\u6620\u5c04\u7c7b\u578b\u7684\u96c6\u5408\u8bba\u6a21\u578b\uff0c\u5b9a\u4e49\u4e86\u57fa\u4e8e\u96c6\u5408\u5305\u542b\u7684\u8bed\u4e49\u5b50\u7c7b\u578b\u5173\u7cfb\uff0c\u91cd\u70b9\u7814\u7a76\u4e86\u53c2\u6570\u5316\u6620\u5c04\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\u3002", "motivation": "\u4e3aErlang\u4e2d\u7684\u6620\u5c04\u7c7b\u578b\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u96c6\u5408\u8bba\u6a21\u578b\uff0c\u5e76\u5b9a\u4e49\u5176\u8bed\u4e49\u5b50\u7c7b\u578b\u5173\u7cfb\uff0c\u7279\u522b\u662f\u9488\u5bf9\u53c2\u6570\u5316\u6620\u5c04\u7c7b\u578b\u3002", "method": "\u6784\u5efa\u4e86\u4e00\u4e2a\u7c7b\u578b\u6a21\u578b\uff0c\u5305\u542b\u7c7b\u578b\u53d8\u91cf\u3001\u57fa\u672c\u7c7b\u578b\u3001\u96c6\u5408\u7c7b\u578b\u548c\u6620\u5c04\u7c7b\u578b\uff0c\u5e76\u57fa\u4e8e\u96c6\u5408\u5305\u542b\u5b9a\u4e49\u4e86\u5b50\u7c7b\u578b\u5173\u7cfb\u3002", "result": "\u6210\u529f\u5b9a\u4e49\u4e86\u53c2\u6570\u5316\u6620\u5c04\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\uff0c\u6269\u5c55\u4e86\u8bed\u4e49\u5b50\u7c7b\u578b\u7406\u8bba\u7684\u5e94\u7528\u8303\u56f4\u3002", "conclusion": "\u8be5\u6a21\u578b\u4e3aErlang\u4e2d\u7684\u6620\u5c04\u7c7b\u578b\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\uff0c\u7279\u522b\u662f\u5728\u53c2\u6570\u5316\u6620\u5c04\u7c7b\u578b\u7684\u5b50\u7c7b\u578b\u5173\u7cfb\u65b9\u9762\u5177\u6709\u521b\u65b0\u6027\u3002"}}
{"id": "2508.00534", "pdf": "https://arxiv.org/pdf/2508.00534", "abs": "https://arxiv.org/abs/2508.00534", "authors": ["Mikel Vandeloise"], "title": "Towards a unified framework for programming paradigms: A systematic review of classification formalisms and methodological foundations", "categories": ["cs.PL", "cs.CL", "D.3.2; F.3.2; D.3.1"], "comment": "Preprint submitted to the Journal of Object Technology on July 29,\n  2025. Data available upon request until peer-review is completed", "summary": "The rise of multi-paradigm languages challenges traditional classification\nmethods, leading to practical software engineering issues like interoperability\ndefects. This systematic literature review (SLR) maps the formal foundations of\nprogramming paradigms. Our objective is twofold: (1) to assess the state of the\nart of classification formalisms and their limitations, and (2) to identify the\nconceptual primitives and mathematical frameworks for a more powerful,\nreconstructive approach.\n  Based on a synthesis of 74 primary studies, we find that existing taxonomies\nlack conceptual granularity, a unified formal basis, and struggle with hybrid\nlanguages. In response, our analysis reveals a strong convergence toward a\ncompositional reconstruction of paradigms. This approach identifies a minimal\nset of orthogonal, atomic primitives and leverages mathematical frameworks,\npredominantly Type theory, Category theory and Unifying Theories of Programming\n(UTP), to formally guarantee their compositional properties.\n  We conclude that the literature reflects a significant intellectual shift\naway from classification towards these promising formal, reconstructive\nframeworks. This review provides a map of this evolution and proposes a\nresearch agenda for their unification.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u7cfb\u7edf\u6587\u732e\u7efc\u8ff0\uff0c\u63a2\u8ba8\u4e86\u591a\u8303\u5f0f\u7f16\u7a0b\u8bed\u8a00\u7684\u5206\u7c7b\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u6570\u5b66\u6846\u67b6\u7684\u91cd\u6784\u65b9\u6cd5\uff0c\u4ee5\u89e3\u51b3\u73b0\u6709\u5206\u7c7b\u6cd5\u7684\u5c40\u9650\u6027\u3002", "motivation": "\u591a\u8303\u5f0f\u8bed\u8a00\u7684\u5174\u8d77\u6311\u6218\u4e86\u4f20\u7edf\u5206\u7c7b\u65b9\u6cd5\uff0c\u5bfc\u81f4\u4e92\u64cd\u4f5c\u6027\u7f3a\u9677\u7b49\u5b9e\u9645\u95ee\u9898\uff0c\u9700\u8981\u66f4\u5f3a\u5927\u7684\u7406\u8bba\u57fa\u7840\u3002", "method": "\u57fa\u4e8e74\u9879\u4e3b\u8981\u7814\u7a76\u7684\u7efc\u5408\u5206\u6790\uff0c\u8bc4\u4f30\u73b0\u6709\u5206\u7c7b\u5f62\u5f0f\u53ca\u5176\u5c40\u9650\u6027\uff0c\u5e76\u63a2\u7d22\u57fa\u4e8e\u7c7b\u578b\u7406\u8bba\u3001\u8303\u7574\u8bba\u548c\u7edf\u4e00\u7f16\u7a0b\u7406\u8bba\u7684\u91cd\u6784\u65b9\u6cd5\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u73b0\u6709\u5206\u7c7b\u6cd5\u7f3a\u4e4f\u6982\u5ff5\u7c92\u5ea6\u548c\u7edf\u4e00\u5f62\u5f0f\u57fa\u7840\uff0c\u800c\u91cd\u6784\u65b9\u6cd5\u901a\u8fc7\u6b63\u4ea4\u539f\u5b50\u539f\u8bed\u548c\u6570\u5b66\u6846\u67b6\u63d0\u4f9b\u4e86\u89e3\u51b3\u65b9\u6848\u3002", "conclusion": "\u6587\u732e\u8868\u660e\uff0c\u7814\u7a76\u8d8b\u52bf\u6b63\u4ece\u5206\u7c7b\u8f6c\u5411\u5f62\u5f0f\u5316\u91cd\u6784\u6846\u67b6\uff0c\u672c\u6587\u63d0\u51fa\u4e86\u7edf\u4e00\u8fd9\u4e9b\u6846\u67b6\u7684\u7814\u7a76\u8bae\u7a0b\u3002"}}
{"id": "2508.00244", "pdf": "https://arxiv.org/pdf/2508.00244", "abs": "https://arxiv.org/abs/2508.00244", "authors": ["Briza Mel Dias de Sousa", "Renato Cordeiro Ferreira", "Alfredo Goldman"], "title": "Functional vs. Object-Oriented: Comparing How Programming Paradigms Affect the Architectural Characteristics of Systems", "categories": ["cs.SE", "cs.PL", "D.3.2; D.2.11; D.2.13"], "comment": "11 pages, 16 figures (1 table, 3 diagrams, 5 graphics, 7 listings),\n  submitted to CTICQS capstone project competition at SBQS 2025", "summary": "After decades of dominance by object-oriented programming (OOP), functional\nprogramming (FP) is gaining increasing attention in the software industry. This\nstudy compares the impact of OOP and FP on the architectural characteristics of\nsoftware systems. For that, it examines the design and implementation of a\nDigital Wallet system, developed in Kotlin (representing OOP) and Scala\n(representing FP). The comparison is made through both qualitative and\nquantitative analyses to explore how each paradigm influences the system's\narchitectural characteristics. The self-ethnographic qualitative analysis\nprovides a side-by-side comparison of both implementations, revealing the\nperspective of those writing such code. The survey-based quantitative analysis\ngathers feedback from developers with diverse backgrounds, showing their\nimpressions of those reading this code. Hopefully, these results may be useful\nfor developers or organizations seeking to make more informed decisions about\nwhich paradigm is best suited for their next project.", "AI": {"tldr": "\u6bd4\u8f83\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\uff08OOP\uff09\u548c\u51fd\u6570\u5f0f\u7f16\u7a0b\uff08FP\uff09\u5bf9\u8f6f\u4ef6\u7cfb\u7edf\u67b6\u6784\u7279\u6027\u7684\u5f71\u54cd\uff0c\u901a\u8fc7Kotlin\u548cScala\u5b9e\u73b0\u6570\u5b57\u94b1\u5305\u7cfb\u7edf\uff0c\u7ed3\u5408\u5b9a\u6027\u548c\u5b9a\u91cf\u5206\u6790\u3002", "motivation": "\u63a2\u8ba8OOP\u548cFP\u5bf9\u8f6f\u4ef6\u67b6\u6784\u7684\u5f71\u54cd\uff0c\u4e3a\u5f00\u53d1\u8005\u548c\u7ec4\u7ec7\u9009\u62e9\u7f16\u7a0b\u8303\u5f0f\u63d0\u4f9b\u4f9d\u636e\u3002", "method": "\u4f7f\u7528Kotlin\uff08OOP\uff09\u548cScala\uff08FP\uff09\u5b9e\u73b0\u6570\u5b57\u94b1\u5305\u7cfb\u7edf\uff0c\u8fdb\u884c\u5b9a\u6027\uff08\u81ea\u6211\u6c11\u65cf\u5fd7\uff09\u548c\u5b9a\u91cf\uff08\u5f00\u53d1\u8005\u8c03\u67e5\uff09\u5206\u6790\u3002", "result": "\u5b9a\u6027\u5206\u6790\u63ed\u793a\u7f16\u5199\u4ee3\u7801\u7684\u89c6\u89d2\uff0c\u5b9a\u91cf\u5206\u6790\u5c55\u793a\u5f00\u53d1\u8005\u5bf9\u4ee3\u7801\u7684\u53cd\u9988\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u6709\u52a9\u4e8e\u5f00\u53d1\u8005\u548c\u7ec4\u7ec7\u6839\u636e\u9700\u6c42\u9009\u62e9\u66f4\u9002\u5408\u7684\u7f16\u7a0b\u8303\u5f0f\u3002"}}
{"id": "2508.00419", "pdf": "https://arxiv.org/pdf/2508.00419", "abs": "https://arxiv.org/abs/2508.00419", "authors": ["Varun Bharti", "Shashwat Jha", "Dhruv Kumar", "Pankaj Jalote"], "title": "Loop Invariant Generation: A Hybrid Framework of Reasoning optimised LLMs and SMT Solvers", "categories": ["cs.LO", "cs.LG", "cs.PL"], "comment": "Under Review", "summary": "Loop invariants are essential for proving the correctness of programs with\nloops. Developing loop invariants is challenging, and fully automatic synthesis\ncannot be guaranteed for arbitrary programs. Some approaches have been proposed\nto synthesize loop invariants using symbolic techniques and more recently using\nneural approaches. These approaches are able to correctly synthesize loop\ninvariants only for subsets of standard benchmarks. In this work, we\ninvestigate whether modern, reasoning-optimized large language models can do\nbetter. We integrate OpenAI's O1, O1-mini, and O3-mini into a tightly coupled\ngenerate-and-check pipeline with the Z3 SMT solver, using solver\ncounterexamples to iteratively guide invariant refinement. We use Code2Inv\nbenchmark, which provides C programs along with their formal preconditions and\npostconditions. On this benchmark of 133 tasks, our framework achieves 100%\ncoverage (133 out of 133), outperforming the previous best of 107 out of 133,\nwhile requiring only 1-2 model proposals per instance and 14-55 seconds of\nwall-clock time. These results demonstrate that LLMs possess latent logical\nreasoning capabilities which can help automate loop invariant synthesis. While\nour experiments target C-specific programs, this approach should be\ngeneralizable to other imperative languages.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5229\u7528\u4f18\u5316\u63a8\u7406\u7684\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLMs\uff09\u7ed3\u5408Z3\u6c42\u89e3\u5668\u81ea\u52a8\u5408\u6210\u5faa\u73af\u4e0d\u53d8\u5f0f\uff0c\u5728Code2Inv\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u5b9e\u73b0100%\u8986\u76d6\u7387\uff0c\u4f18\u4e8e\u4e4b\u524d\u7684\u6700\u4f73\u7ed3\u679c\u3002", "motivation": "\u5faa\u73af\u4e0d\u53d8\u5f0f\u5bf9\u7a0b\u5e8f\u9a8c\u8bc1\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u81ea\u52a8\u5408\u6210\u5177\u6709\u6311\u6218\u6027\u3002\u73b0\u6709\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8e\u90e8\u5206\u6807\u51c6\u57fa\u51c6\u6d4b\u8bd5\uff0c\u56e0\u6b64\u7814\u7a76LLMs\u662f\u5426\u80fd\u63d0\u5347\u5408\u6210\u6548\u679c\u3002", "method": "\u7ed3\u5408OpenAI\u7684O1\u3001O1-mini\u548cO3-mini\u6a21\u578b\u4e0eZ3\u6c42\u89e3\u5668\uff0c\u901a\u8fc7\u751f\u6210-\u68c0\u67e5\u8fed\u4ee3\u4f18\u5316\u4e0d\u53d8\u5f0f\u3002", "result": "\u5728133\u4e2a\u4efb\u52a1\u4e2d\u5b9e\u73b0100%\u8986\u76d6\u7387\uff0c\u4ec5\u97001-2\u6b21\u6a21\u578b\u63d0\u8bae\u548c14-55\u79d2\u65f6\u95f4\uff0c\u4f18\u4e8e\u4e4b\u524d107/133\u7684\u7ed3\u679c\u3002", "conclusion": "LLMs\u5177\u6709\u6f5c\u5728\u903b\u8f91\u63a8\u7406\u80fd\u529b\uff0c\u53ef\u63a8\u5e7f\u5230\u5176\u4ed6\u547d\u4ee4\u5f0f\u8bed\u8a00\u3002"}}
{"id": "2508.00508", "pdf": "https://arxiv.org/pdf/2508.00508", "abs": "https://arxiv.org/abs/2508.00508", "authors": ["Panagiotis Diamantakis", "Thanassis Avgerinos", "Yannis Smaragdakis"], "title": "Desyan: A Platform for Seamless Value-Flow and Symbolic Analysis", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "Over the past two decades, two different types of static analyses have\nemerged as dominant paradigms both in academia and industry: value-flow\nanalysis (e.g., data-flow analysis or points-to analysis) and symbolic analysis\n(e.g., symbolic execution). Despite their individual successes in numerous\napplication fields, the two approaches have remained largely separate; an\nartifact of the simple reality that there is no broadly adopted unifying\nplatform for effortless and efficient integration of symbolic techniques with\nhigh-performance data-flow reasoning.\n  To bridge this gap, we introduce Desyan: a platform for writing program\nanalyses with seamless integration of value-flow and symbolic reasoning. Desyan\nexpands a production-ready Datalog fixpoint engine (Souffl\\'e) with\nfull-fledged SMT solving invoking industry-leading SMT engines. Desyan provides\nconstructs for automatically (and efficiently!) handling typical patterns that\ncome up in program analysis. At the same time, the integration is agnostic with\nrespect to the solving technology, and supports Datalog-native symbolic\nreasoning, via a bottom-up algebraic reasoning module.\n  The result is an engine that allows blending different kinds of reasoning, as\nneeded for the underlying analysis. For value-flow analysis, the engine is the\nbest-in-class Datalog evaluator (often by a factor of over 20x in execution\ntime); for applications that require full SMT (e.g., a concolic execution\nengine or other symbolic evaluator that needs to solve arbitrarily complex\nconditions), the engine is leveraging the leading SMT solvers; for lightweight\nsymbolic evaluation (e.g., solving simple conditionals in the context of a\npath-sensitive analysis), the engine can use Datalog-native symbolic reasoning,\nachieving large speedups (often of over 2x) compared to eagerly appealing to an\nSMT solver.", "AI": {"tldr": "Desyan\u5e73\u53f0\u65e0\u7f1d\u6574\u5408\u4e86\u503c\u6d41\u5206\u6790\u548c\u7b26\u53f7\u63a8\u7406\uff0c\u901a\u8fc7\u6269\u5c55Datalog\u5f15\u64ce\u5e76\u96c6\u6210SMT\u6c42\u89e3\u5668\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684\u7a0b\u5e8f\u5206\u6790\u3002", "motivation": "\u89e3\u51b3\u503c\u6d41\u5206\u6790\u548c\u7b26\u53f7\u5206\u6790\u957f\u671f\u5206\u79bb\u7684\u95ee\u9898\uff0c\u63d0\u4f9b\u4e00\u4e2a\u7edf\u4e00\u7684\u5e73\u53f0\u4ee5\u9ad8\u6548\u6574\u5408\u4e24\u79cd\u6280\u672f\u3002", "method": "\u6269\u5c55Souffl\u00e9 Datalog\u5f15\u64ce\uff0c\u96c6\u6210SMT\u6c42\u89e3\u5668\uff0c\u652f\u6301\u81ea\u52a8\u5904\u7406\u7a0b\u5e8f\u5206\u6790\u4e2d\u7684\u5e38\u89c1\u6a21\u5f0f\u3002", "result": "Desyan\u5728\u503c\u6d41\u5206\u6790\u4e2d\u8868\u73b0\u6700\u4f73\uff0c\u6267\u884c\u65f6\u95f4\u5feb20\u500d\uff1b\u5728\u9700\u8981SMT\u7684\u5e94\u7528\u4e2d\u5229\u7528\u9886\u5148\u6c42\u89e3\u5668\uff1b\u8f7b\u91cf\u7ea7\u7b26\u53f7\u63a8\u7406\u901f\u5ea6\u63d0\u53472\u500d\u3002", "conclusion": "Desyan\u6210\u529f\u5b9e\u73b0\u4e86\u4e0d\u540c\u63a8\u7406\u6280\u672f\u7684\u7075\u6d3b\u878d\u5408\uff0c\u4e3a\u7a0b\u5e8f\u5206\u6790\u63d0\u4f9b\u4e86\u9ad8\u6548\u7edf\u4e00\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2508.00772", "pdf": "https://arxiv.org/pdf/2508.00772", "abs": "https://arxiv.org/abs/2508.00772", "authors": ["Md Imranur Rahman Akib", "Fathima Binthe Muhammed", "Umit Saha", "Md Fazlul Karim Patwary", "Mehrin Anannya", "Md Alomgeer Hussein", "Md Biplob Hosen"], "title": "From Code to Career: Assessing Competitive Programmers for Industry Placement", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "In today's fast-paced tech industry, there is a growing need for tools that\nevaluate a programmer's job readiness based on their coding performance. This\nstudy focuses on predicting the potential of Codeforces users to secure various\nlevels of software engineering jobs. The primary objective is to analyze how a\nuser's competitive programming activity correlates with their chances of\nobtaining positions, ranging from entry-level roles to jobs at major tech\ncompanies. We collect user data using the Codeforces API, process key\nperformance metrics, and build a prediction model using a Random Forest\nclassifier. The model categorizes users into four levels of employability,\nranging from those needing further development to those ready for top-tier tech\njobs. The system is implemented using Flask and deployed on Render for\nreal-time predictions. Our evaluation demonstrates that the approach\neffectively distinguishes between different skill levels based on coding\nproficiency and participation. This work lays a foundation for the use of\nmachine learning in career assessment and could be extended to predict job\nreadiness in broader technical fields.", "AI": {"tldr": "\u7814\u7a76\u901a\u8fc7Codeforces\u7528\u6237\u7684\u7f16\u7a0b\u7ade\u8d5b\u8868\u73b0\u9884\u6d4b\u5176\u5c31\u4e1a\u6f5c\u529b\uff0c\u4f7f\u7528\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\u5c06\u7528\u6237\u5206\u4e3a\u56db\u4e2a\u5c31\u4e1a\u80fd\u529b\u7b49\u7ea7\uff0c\u6a21\u578b\u6548\u679c\u663e\u8457\u3002", "motivation": "\u5feb\u901f\u53d1\u5c55\u7684\u79d1\u6280\u884c\u4e1a\u9700\u8981\u8bc4\u4f30\u7a0b\u5e8f\u5458\u5c31\u4e1a\u51c6\u5907\u7684\u5de5\u5177\uff0c\u7814\u7a76\u65e8\u5728\u5206\u6790\u7f16\u7a0b\u7ade\u8d5b\u8868\u73b0\u4e0e\u5c31\u4e1a\u673a\u4f1a\u7684\u5173\u8054\u3002", "method": "\u901a\u8fc7Codeforces API\u6536\u96c6\u7528\u6237\u6570\u636e\uff0c\u5904\u7406\u5173\u952e\u6027\u80fd\u6307\u6807\uff0c\u4f7f\u7528\u968f\u673a\u68ee\u6797\u5206\u7c7b\u5668\u6784\u5efa\u9884\u6d4b\u6a21\u578b\uff0c\u5e76\u901a\u8fc7Flask\u90e8\u7f72\u5b9e\u65f6\u9884\u6d4b\u7cfb\u7edf\u3002", "result": "\u6a21\u578b\u80fd\u6709\u6548\u533a\u5206\u4e0d\u540c\u6280\u80fd\u6c34\u5e73\u7684\u7528\u6237\uff0c\u4ece\u9700\u8981\u63d0\u5347\u5230\u9002\u5408\u9876\u7ea7\u79d1\u6280\u516c\u53f8\u804c\u4f4d\u3002", "conclusion": "\u7814\u7a76\u4e3a\u673a\u5668\u5b66\u4e60\u5728\u804c\u4e1a\u8bc4\u4f30\u4e2d\u7684\u5e94\u7528\u5960\u5b9a\u4e86\u57fa\u7840\uff0c\u53ef\u6269\u5c55\u81f3\u66f4\u5e7f\u6cdb\u7684\u6280\u672f\u9886\u57df\u5c31\u4e1a\u9884\u6d4b\u3002"}}
