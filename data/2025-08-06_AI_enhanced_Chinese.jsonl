{"id": "2508.02857", "pdf": "https://arxiv.org/pdf/2508.02857", "abs": "https://arxiv.org/abs/2508.02857", "authors": ["Mikhail Mints", "Finn Voichick", "Leonidas Lampropoulos", "Robert Rand"], "title": "Compositional Quantum Control Flow with Efficient Compilation in Qunity", "categories": ["cs.PL", "quant-ph"], "comment": "88 pages, 30 figures", "summary": "Most existing quantum programming languages are based on the quantum circuit\nmodel of computation, as higher-level abstractions are particularly challenging\nto implement - especially ones relating to quantum control flow. The Qunity\nlanguage, proposed by Voichick et al., offered such an abstraction in the form\nof a quantum control construct, with great care taken to ensure that the\nresulting language is still realizable. However, Qunity lacked a working\nimplementation, and the originally proposed compilation procedure was very\ninefficient, with even simple quantum algorithms compiling to unreasonably\nlarge circuits.\n  In this work, we focus on the efficient compilation of high-level quantum\ncontrol flow constructs, using Qunity as our starting point. We introduce a\nwider range of abstractions on top of Qunity's core language that offer\ncompelling trade-offs compared to its existing control construct. We create a\ncomplete implementation of a Qunity compiler, which converts high-level Qunity\ncode into the quantum assembly language OpenQASM 3. We develop optimization\ntechniques for multiple stages of the Qunity compilation procedure, including\nboth low-level circuit optimizations as well as methods that consider the\nhigh-level structure of a Qunity program, greatly reducing the number of qubits\nand gates used by the compiler.", "AI": {"tldr": "\u672c\u6587\u6539\u8fdb\u4e86Qunity\u8bed\u8a00\u7684\u7f16\u8bd1\u6548\u7387\uff0c\u901a\u8fc7\u5f15\u5165\u65b0\u7684\u62bd\u8c61\u548c\u4f18\u5316\u6280\u672f\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u91cf\u5b50\u6bd4\u7279\u548c\u95e8\u7684\u6570\u91cf\u3002", "motivation": "\u73b0\u6709\u91cf\u5b50\u7f16\u7a0b\u8bed\u8a00\uff08\u5982Qunity\uff09\u7f3a\u4e4f\u9ad8\u6548\u5b9e\u73b0\uff0c\u7f16\u8bd1\u8fc7\u7a0b\u6548\u7387\u4f4e\u4e0b\uff0c\u5bfc\u81f4\u751f\u6210\u7684\u91cf\u5b50\u7535\u8def\u8fc7\u5927\u3002", "method": "\u5728Qunity\u57fa\u7840\u4e0a\u5f15\u5165\u66f4\u591a\u62bd\u8c61\uff0c\u5f00\u53d1\u5b8c\u6574\u7684\u7f16\u8bd1\u5668\u5b9e\u73b0\uff0c\u5e76\u4f18\u5316\u7f16\u8bd1\u6d41\u7a0b\u7684\u591a\u4e2a\u9636\u6bb5\u3002", "result": "\u5b9e\u73b0\u4e86\u9ad8\u6548\u7684Qunity\u7f16\u8bd1\u5668\uff0c\u663e\u8457\u51cf\u5c11\u4e86\u91cf\u5b50\u6bd4\u7279\u548c\u95e8\u7684\u6570\u91cf\u3002", "conclusion": "\u901a\u8fc7\u4f18\u5316\u7f16\u8bd1\u6d41\u7a0b\uff0cQunity\u8bed\u8a00\u7684\u9ad8\u6548\u5b9e\u73b0\u6210\u4e3a\u53ef\u80fd\uff0c\u4e3a\u91cf\u5b50\u63a7\u5236\u6d41\u63d0\u4f9b\u4e86\u66f4\u5b9e\u7528\u7684\u5de5\u5177\u3002"}}
{"id": "2508.03558", "pdf": "https://arxiv.org/pdf/2508.03558", "abs": "https://arxiv.org/abs/2508.03558", "authors": ["M Zafir Sadik Khan", "Nowfel Mashnoor", "Mohammad Akyash", "Kimia Azar", "Hadi Kamali"], "title": "SAGE-HLS: Syntax-Aware AST-Guided LLM for High-Level Synthesis Code Generation", "categories": ["cs.PL"], "comment": "Accepted to the IEEE International Conference on Computer Design\n  (ICCD 2025)", "summary": "In today's rapidly evolving field of electronic design automation (EDA), the\ncomplexity of hardware designs is increasing, necessitating more sophisticated\nautomation solutions. High-level synthesis (HLS), as a pivotal solution,\nautomates hardware designs from high-level abstractions (e.g., C/C++). However,\nit faces significant challenges, particularly in design space exploration and\noptimization. While large language models (LLMs) have shown notable\ncapabilities in code generation, their application to HLS has been limited due\nto the scarcity of (publicly) available HLS code datasets. Hence, research in\nthis domain has primarily focused on techniques such as prompt engineering and\nretrieval-augmented generation (RAG). To overcome this limitation, this paper\nintroduces SAGE-HLS, the first-of-its-kind fine-tuned LLM specifically for HLS\ncode generation. Our method includes three key advancements: (i) We implement\nVerilog-to-C/C++ porting, converting verified and synthesizable Verilog codes\ninto corresponding C, creating a dataset of 16.7K HLS codes; (ii) We implement\na fine-tuning strategy, which is based on instruction prompting to code\ngeneration guided by abstract syntax tree (AST); (iii) We develop a\nsemi-automated evaluation framework using VerilogEval to assess the\nfunctionality of the generated HLS code. Our experiments show that SAGE-HLS,\nfined-tuned on the QwenCoder (2.5) 7B model, achieves a near 100% success rate\nin code synthesizability and a 75% success rate in functional correctness.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86SAGE-HLS\uff0c\u4e00\u79cd\u4e13\u4e3aHLS\u4ee3\u7801\u751f\u6210\u4f18\u5316\u7684LLM\uff0c\u901a\u8fc7Verilog-to-C/C++\u8f6c\u6362\u548c\u6307\u4ee4\u5fae\u8c03\u7b56\u7565\uff0c\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801\u751f\u6210\u7684\u6210\u529f\u7387\u548c\u529f\u80fd\u6027\u3002", "motivation": "\u7531\u4e8eHLS\u4ee3\u7801\u6570\u636e\u96c6\u7684\u7a00\u7f3a\uff0c\u73b0\u6709LLM\u5728HLS\u9886\u57df\u7684\u5e94\u7528\u53d7\u9650\uff0c\u4e9f\u9700\u4e00\u79cd\u4e13\u95e8\u4f18\u5316\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "1. \u901a\u8fc7Verilog-to-C/C++\u8f6c\u6362\u6784\u5efa16.7K\u7684HLS\u4ee3\u7801\u6570\u636e\u96c6\uff1b2. \u57fa\u4e8eAST\u7684\u6307\u4ee4\u5fae\u8c03\u7b56\u7565\uff1b3. \u4f7f\u7528VerilogEval\u534a\u81ea\u52a8\u5316\u8bc4\u4f30\u6846\u67b6\u3002", "result": "SAGE-HLS\u5728\u4ee3\u7801\u53ef\u5408\u6210\u6027\u4e0a\u63a5\u8fd1100%\u6210\u529f\u7387\uff0c\u529f\u80fd\u6027\u6b63\u786e\u7387\u8fbe75%\u3002", "conclusion": "SAGE-HLS\u4e3aHLS\u4ee3\u7801\u751f\u6210\u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u53ef\u9760\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u586b\u8865\u4e86LLM\u5728\u8be5\u9886\u57df\u7684\u7a7a\u767d\u3002"}}
{"id": "2508.03640", "pdf": "https://arxiv.org/pdf/2508.03640", "abs": "https://arxiv.org/abs/2508.03640", "authors": ["Pedro Vasconcelos"], "title": "Teaching Introductory Functional Programming Using Haskelite", "categories": ["cs.PL", "D.3.2;D.3.4;K.3.1"], "comment": "In Proceedings TFPiE 2025, arXiv:2508.02305", "summary": "Learning functional programming requires learning a substitution-based\ncomputational model. While substitution should be a familiar concept from\nhigh-school algebra, students often have difficulty applying it to new\nsettings, such as recursive definitions, algebraic data types and higher-order\nfunctions. Step-by-step interpreters have been shown to help beginners by\nclarifying misconceptions and improving understanding.\n  This paper reports on the experience of using a step-by-step tracing\ninterpreter for a subset of Haskell while teaching an introductory functional\nprogramming course at the University of Porto. We describe the use of the\ninterpreter, present some feedback obtained from students, reflect on the\nlessons learned and point directions for further work.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5728\u6559\u6388\u51fd\u6570\u5f0f\u7f16\u7a0b\u65f6\u4f7f\u7528\u9010\u6b65\u8ffd\u8e2a\u89e3\u91ca\u5668\u7684\u7ecf\u9a8c\uff0c\u5c55\u793a\u4e86\u5176\u5728\u5e2e\u52a9\u5b66\u751f\u7406\u89e3\u66ff\u6362\u6a21\u578b\u65b9\u9762\u7684\u6548\u679c\u3002", "motivation": "\u5b66\u751f\u5728\u5b66\u4e60\u51fd\u6570\u5f0f\u7f16\u7a0b\u65f6\u5bf9\u66ff\u6362\u6a21\u578b\u7684\u5e94\u7528\u5b58\u5728\u56f0\u96be\uff0c\u5c24\u5176\u662f\u5728\u9012\u5f52\u5b9a\u4e49\u3001\u4ee3\u6570\u6570\u636e\u7c7b\u578b\u548c\u9ad8\u9636\u51fd\u6570\u7b49\u65b0\u573a\u666f\u4e2d\u3002", "method": "\u5728\u6ce2\u5c14\u56fe\u5927\u5b66\u7684\u51fd\u6570\u5f0f\u7f16\u7a0b\u8bfe\u7a0b\u4e2d\uff0c\u4f7f\u7528\u4e86\u4e00\u4e2a\u9488\u5bf9Haskell\u5b50\u96c6\u7684\u9010\u6b65\u8ffd\u8e2a\u89e3\u91ca\u5668\u3002", "result": "\u5b66\u751f\u53cd\u9988\u8868\u660e\uff0c\u89e3\u91ca\u5668\u6709\u52a9\u4e8e\u6f84\u6e05\u8bef\u89e3\u5e76\u63d0\u5347\u7406\u89e3\u3002", "conclusion": "\u9010\u6b65\u8ffd\u8e2a\u89e3\u91ca\u5668\u662f\u6709\u6548\u7684\u6559\u5b66\u5de5\u5177\uff0c\u672a\u6765\u53ef\u8fdb\u4e00\u6b65\u4f18\u5316\u548c\u6269\u5c55\u3002"}}
{"id": "2508.02721", "pdf": "https://arxiv.org/pdf/2508.02721", "abs": "https://arxiv.org/abs/2508.02721", "authors": ["Libin Qiu", "Yuhang Ye", "Zhirong Gao", "Xide Zou", "Junfu Chen", "Ziming Gui", "Weizhi Huang", "Xiaobo Xue", "Wenkai Qiu", "Kun Zhao"], "title": "Blueprint First, Model Second: A Framework for Deterministic LLM Workflow", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": "8 pages, 6 figures, 3 tables", "summary": "While powerful, the inherent non-determinism of large language model (LLM)\nagents limits their application in structured operational environments where\nprocedural fidelity and predictable execution are strict requirements. This\nlimitation stems from current architectures that conflate probabilistic,\nhigh-level planning with low-level action execution within a single generative\nprocess. To address this, we introduce the Source Code Agent framework, a new\nparadigm built on the \"Blueprint First, Model Second\" philosophy. Our framework\ndecouples the workflow logic from the generative model. An expert-defined\noperational procedure is first codified into a source code-based Execution\nBlueprint, which is then executed by a deterministic engine. The LLM is\nstrategically invoked as a specialized tool to handle bounded, complex\nsub-tasks within the workflow, but never to decide the workflow's path. We\nconduct a comprehensive evaluation on the challenging tau-bench benchmark,\ndesigned for complex user-tool-rule scenarios. Our results demonstrate that the\nSource Code Agent establishes a new state-of-the-art, outperforming the\nstrongest baseline by 10.1 percentage points on the average Pass^1 score while\ndramatically improving execution efficiency. Our work enables the verifiable\nand reliable deployment of autonomous agents in applications governed by strict\nprocedural logic.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u540d\u4e3aSource Code Agent\u7684\u65b0\u6846\u67b6\uff0c\u901a\u8fc7\u5c06\u5de5\u4f5c\u6d41\u903b\u8f91\u4e0e\u751f\u6210\u6a21\u578b\u89e3\u8026\uff0c\u89e3\u51b3\u4e86LLM\u5728\u7ed3\u6784\u5316\u64cd\u4f5c\u73af\u5883\u4e2d\u7684\u975e\u786e\u5b9a\u6027\u95ee\u9898\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08LLM\uff09\u7684\u975e\u786e\u5b9a\u6027\u9650\u5236\u4e86\u5176\u5728\u9700\u8981\u4e25\u683c\u7a0b\u5e8f\u4fdd\u771f\u5ea6\u548c\u53ef\u9884\u6d4b\u6267\u884c\u7684\u7ed3\u6784\u5316\u73af\u5883\u4e2d\u7684\u5e94\u7528\u3002", "method": "\u91c7\u7528'Blueprint First, Model Second'\u54f2\u5b66\uff0c\u5c06\u4e13\u5bb6\u5b9a\u4e49\u7684\u64cd\u4f5c\u7a0b\u5e8f\u7f16\u7801\u4e3a\u57fa\u4e8e\u6e90\u4ee3\u7801\u7684\u6267\u884c\u84dd\u56fe\uff0c\u5e76\u7531\u786e\u5b9a\u6027\u5f15\u64ce\u6267\u884c\uff0cLLM\u4ec5\u7528\u4e8e\u5904\u7406\u6709\u9650\u590d\u6742\u5b50\u4efb\u52a1\u3002", "result": "\u5728tau-bench\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cSource Code Agent\u8868\u73b0\u4f18\u5f02\uff0c\u5e73\u5747Pass^1\u5f97\u5206\u6bd4\u6700\u5f3a\u57fa\u7ebf\u9ad8\u51fa10.1\u4e2a\u767e\u5206\u70b9\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6267\u884c\u6548\u7387\u3002", "conclusion": "\u8be5\u6846\u67b6\u4e3a\u4e25\u683c\u7a0b\u5e8f\u903b\u8f91\u5e94\u7528\u4e2d\u7684\u81ea\u4e3b\u4ee3\u7406\u63d0\u4f9b\u4e86\u53ef\u9a8c\u8bc1\u4e14\u53ef\u9760\u7684\u90e8\u7f72\u65b9\u6848\u3002"}}
{"id": "2508.02820", "pdf": "https://arxiv.org/pdf/2508.02820", "abs": "https://arxiv.org/abs/2508.02820", "authors": ["David Svoboda", "Lori Flynn", "William Klieber", "Michael Duggan", "Nicholas Reimer", "Joseph Sible"], "title": "Automated Code Repair for C/C++ Static Analysis Alerts", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "(Note: This work is a preprint.) Static analysis (SA) tools produce many\ndiagnostic alerts indicating that source code in C or C++ may be defective and\npotentially vulnerable to security exploits. Many of these alerts are false\npositives. Identifying the true-positive alerts and repairing the defects in\nthe associated code are huge efforts that automated program repair (APR) tools\ncan help with. Our experience showed us that APR can reduce the number of SA\nalerts significantly and reduce the manual effort of analysts to review code.\nThis engineering experience paper details the application of design,\ndevelopment, and performance testing to an APR tool we built that repairs C/C++\ncode associated with 3 categories of alerts produced by multiple SA tools. Its\nrepairs are simple and local. Furthermore, our findings convinced the\nmaintainers of the CERT Coding Standards to re-assess and update the metrics\nused to assess when violations of guidelines are detectable or repairable. We\ndiscuss engineering design choices made to support goals of trustworthiness and\nacceptability to developers. Our APR tool repaired 8718 out of 9234 alerts\nproduced by one SA tool on one codebase. It can repair 3 flaw categories. For 2\nflaw categories, 2 SA tools, and 2 codebases, our tool repaired or dismissed as\nfalse positives over 80% of alerts, on average. Tests showed repairs did not\nappreciably degrade the performance of the code or cause new alerts to appear\n(with the possible exception of sqlite3.c). This paper describes unique\ncontributions that include a new empirical analysis of SA data, our selection\nmethod for flaw categories to repair, publication of our APR tool, and a\ndataset of SA alerts from open-source SA tools run on open-source codebases. It\ndiscusses positive and negative results and lessons learned.", "AI": {"tldr": "\u8bba\u6587\u63a2\u8ba8\u4e86\u5982\u4f55\u5229\u7528\u81ea\u52a8\u5316\u7a0b\u5e8f\u4fee\u590d\uff08APR\uff09\u5de5\u5177\u51cf\u5c11\u9759\u6001\u5206\u6790\uff08SA\uff09\u5de5\u5177\u4ea7\u751f\u7684\u8bef\u62a5\u8b66\u62a5\uff0c\u5e76\u901a\u8fc7\u5b9e\u9645\u5de5\u7a0b\u7ecf\u9a8c\u5c55\u793a\u4e86\u5176\u6709\u6548\u6027\u3002", "motivation": "\u9759\u6001\u5206\u6790\u5de5\u5177\u5728C/C++\u4ee3\u7801\u4e2d\u4ea7\u751f\u5927\u91cf\u8bca\u65ad\u8b66\u62a5\uff0c\u5176\u4e2d\u8bb8\u591a\u662f\u8bef\u62a5\u3002\u624b\u52a8\u8bc6\u522b\u548c\u4fee\u590d\u8fd9\u4e9b\u8b66\u62a5\u8017\u65f6\u8017\u529b\uff0cAPR\u5de5\u5177\u53ef\u4ee5\u663e\u8457\u51cf\u5c11\u8b66\u62a5\u6570\u91cf\u5e76\u964d\u4f4e\u4eba\u5de5\u5ba1\u67e5\u8d1f\u62c5\u3002", "method": "\u8bbe\u8ba1\u3001\u5f00\u53d1\u548c\u6027\u80fd\u6d4b\u8bd5\u4e86\u4e00\u4e2aAPR\u5de5\u5177\uff0c\u7528\u4e8e\u4fee\u590d\u7531\u591a\u4e2aSA\u5de5\u5177\u4ea7\u751f\u76843\u7c7b\u8b66\u62a5\u3002\u4fee\u590d\u65b9\u6cd5\u7b80\u5355\u4e14\u5c40\u90e8\u5316\u3002", "result": "APR\u5de5\u5177\u5728\u4e00\u4e2a\u4ee3\u7801\u5e93\u4e2d\u4fee\u590d\u4e868718/9234\u4e2a\u8b66\u62a5\uff0c\u5bf92\u7c7b\u7f3a\u9677\u30012\u4e2aSA\u5de5\u5177\u548c2\u4e2a\u4ee3\u7801\u5e93\u7684\u5e73\u5747\u4fee\u590d\u6216\u8bef\u62a5\u6392\u9664\u7387\u8d85\u8fc780%\u3002\u4fee\u590d\u672a\u663e\u8457\u5f71\u54cd\u4ee3\u7801\u6027\u80fd\u6216\u5f15\u53d1\u65b0\u8b66\u62a5\u3002", "conclusion": "APR\u5de5\u5177\u80fd\u6709\u6548\u51cf\u5c11SA\u8b66\u62a5\uff0c\u63d0\u5347\u5f00\u53d1\u6548\u7387\u3002\u7814\u7a76\u8fd8\u4fc3\u4f7fCERT\u7f16\u7801\u6807\u51c6\u7ef4\u62a4\u8005\u91cd\u65b0\u8bc4\u4f30\u548c\u66f4\u65b0\u4e86\u76f8\u5173\u6307\u6807\u3002\u8bba\u6587\u603b\u7ed3\u4e86\u5de5\u7a0b\u7ecf\u9a8c\u6559\u8bad\u548c\u8d21\u732e\u3002"}}
{"id": "2508.03435", "pdf": "https://arxiv.org/pdf/2508.03435", "abs": "https://arxiv.org/abs/2508.03435", "authors": ["Thomas S. Heinze", "Andr\u00e9 Sch\u00e4fer", "Wolfram Amme"], "title": "StoneDetector: Conventional and versatile code clone detection for Java", "categories": ["cs.SE", "cs.PL"], "comment": "supplementary information available at\n  https://stonedetector.fmi.uni-jena.de/", "summary": "Copy & paste is a widespread practice when developing software and, thus,\nduplicated and subsequently modified code occurs frequently in software\nprojects. Since such code clones, i.e., identical or similar fragments of code,\ncan bloat software projects and cause issues like bug or vulnerability\npropagation, their identification is of importance. In this paper, we present\nthe StoneDetector platform and its underlying method for finding code clones in\nJava source and Bytecode. StoneDetector implements a conventional clone\ndetection approach based upon the textual comparison of paths derived from the\ncode's representation by dominator trees. In this way, the tool does not only\nfind exact and syntactically similar near-miss code clones, but also code\nclones that are harder to detect due to their larger variety in the syntax. We\ndemonstrate StoneDetector's versatility as a conventional clone detection\nplatform and analyze its various available configuration parameters, including\nthe usage of different string metrics, hashing algorithms, etc. In our\nexhaustive evaluation with other conventional clone detectors on several\nstate-of-the-art benchmarks, we can show StoneDetector's performance and\nscalability in finding code clones in both, Java source and Bytecode.", "AI": {"tldr": "StoneDetector\u5e73\u53f0\u53ca\u5176\u65b9\u6cd5\u7528\u4e8e\u68c0\u6d4bJava\u6e90\u4ee3\u7801\u548c\u5b57\u8282\u7801\u4e2d\u7684\u4ee3\u7801\u514b\u9686\uff0c\u57fa\u4e8e\u652f\u914d\u6811\u7684\u8def\u5f84\u6587\u672c\u6bd4\u8f83\uff0c\u652f\u6301\u591a\u79cd\u914d\u7f6e\u53c2\u6570\uff0c\u6027\u80fd\u4f18\u8d8a\u3002", "motivation": "\u4ee3\u7801\u514b\u9686\u5728\u8f6f\u4ef6\u5f00\u53d1\u4e2d\u666e\u904d\u5b58\u5728\uff0c\u53ef\u80fd\u5bfc\u81f4\u9879\u76ee\u81c3\u80bf\u548c\u6f0f\u6d1e\u4f20\u64ad\uff0c\u56e0\u6b64\u8bc6\u522b\u514b\u9686\u4ee3\u7801\u81f3\u5173\u91cd\u8981\u3002", "method": "StoneDetector\u91c7\u7528\u57fa\u4e8e\u652f\u914d\u6811\u8def\u5f84\u6587\u672c\u6bd4\u8f83\u7684\u4f20\u7edf\u514b\u9686\u68c0\u6d4b\u65b9\u6cd5\uff0c\u652f\u6301\u591a\u79cd\u5b57\u7b26\u4e32\u5ea6\u91cf\u548c\u54c8\u5e0c\u7b97\u6cd5\u3002", "result": "\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cStoneDetector\u5728\u68c0\u6d4bJava\u6e90\u4ee3\u7801\u548c\u5b57\u8282\u7801\u514b\u9686\u65b9\u9762\u8868\u73b0\u51fa\u9ad8\u6027\u80fd\u548c\u53ef\u6269\u5c55\u6027\u3002", "conclusion": "StoneDetector\u662f\u4e00\u79cd\u9ad8\u6548\u4e14\u53ef\u914d\u7f6e\u7684\u4ee3\u7801\u514b\u9686\u68c0\u6d4b\u5de5\u5177\uff0c\u9002\u7528\u4e8e\u591a\u79cd\u573a\u666f\u3002"}}
{"id": "2508.03603", "pdf": "https://arxiv.org/pdf/2508.03603", "abs": "https://arxiv.org/abs/2508.03603", "authors": ["Iti Shree", "Karine Even-Mendoz", "Tomasz Radzik"], "title": "ReFuzzer: Feedback-Driven Approach to Enhance Validity of LLM-Generated Test Programs", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "Existing LLM-based compiler fuzzers often produce syntactically or\nsemantically invalid test programs, limiting their effectiveness in exercising\ncompiler optimizations and backend components. We introduce ReFuzzer, a\nframework for refining LLM-generated test programs by systematically detecting\nand correcting compilation and runtime violations (e.g. division by zero or\narray out-of-bounds accesses). ReFuzzer employs a feedback loop with a local\nLLM to validate and filter erroneous programs before execution, improving\nfuzzing effectiveness beyond crash detection and enabling the generation of\ndiverse yet valid test programs.\n  We evaluated ReFuzzer's effectiveness across black-, grey- and white-box\nfuzzing approaches targeting LLVM/Clang. ReFuzzer improved test programs'\nvalidity from 47.0-49.4% to 96.6-97.3%, with an average processing time of\n2.9-3.5 s per test program on a dual-GPU machine. Further, refuzzing\nsignificantly increased code coverage in critical optimization and IR\ngeneration components. For example, vectorization coverage had an absolute\nimprovement of 9.2%, 2.3%, and 7.1% in black-, grey-, and white-box fuzzing,\nenhancing testing effectiveness.", "AI": {"tldr": "ReFuzzer\u662f\u4e00\u4e2a\u6846\u67b6\uff0c\u901a\u8fc7\u68c0\u6d4b\u548c\u4fee\u6b63LLM\u751f\u6210\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u4e2d\u7684\u7f16\u8bd1\u548c\u8fd0\u884c\u65f6\u9519\u8bef\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u6709\u6548\u6027\u548c\u4ee3\u7801\u8986\u76d6\u7387\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8eLLM\u7684\u7f16\u8bd1\u5668\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u751f\u6210\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u5e38\u5b58\u5728\u8bed\u6cd5\u6216\u8bed\u4e49\u9519\u8bef\uff0c\u9650\u5236\u4e86\u5176\u5bf9\u7f16\u8bd1\u5668\u4f18\u5316\u548c\u540e\u7aef\u7ec4\u4ef6\u7684\u6d4b\u8bd5\u6548\u679c\u3002", "method": "ReFuzzer\u91c7\u7528\u53cd\u9988\u5faa\u73af\u673a\u5236\uff0c\u5229\u7528\u672c\u5730LLM\u9a8c\u8bc1\u548c\u8fc7\u6ee4\u9519\u8bef\u7a0b\u5e8f\uff0c\u786e\u4fdd\u751f\u6210\u7684\u6d4b\u8bd5\u7a0b\u5e8f\u6709\u6548\u3002", "result": "ReFuzzer\u5c06\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u6709\u6548\u6027\u4ece47.0-49.4%\u63d0\u5347\u81f396.6-97.3%\uff0c\u5e76\u663e\u8457\u63d0\u9ad8\u4e86\u5173\u952e\u7ec4\u4ef6\u7684\u4ee3\u7801\u8986\u76d6\u7387\u3002", "conclusion": "ReFuzzer\u901a\u8fc7\u6539\u8fdb\u6d4b\u8bd5\u7a0b\u5e8f\u7684\u6709\u6548\u6027\u548c\u8986\u76d6\u7387\uff0c\u63d0\u5347\u4e86\u7f16\u8bd1\u5668\u6a21\u7cca\u6d4b\u8bd5\u7684\u6548\u679c\u3002"}}
{"id": "2508.03638", "pdf": "https://arxiv.org/pdf/2508.03638", "abs": "https://arxiv.org/abs/2508.03638", "authors": ["Marco T. Moraz\u00e1n", "Oliwia Kempinski", "Andr\u00e9s M. Garced"], "title": "Design Support for Multitape Turing Machines", "categories": ["cs.FL", "cs.HC", "cs.PL", "cs.SE"], "comment": "In Proceedings TFPiE 2025, arXiv:2508.02305", "summary": "Many Formal Languages and Automata Theory courses introduce students to\nTuring machine extensions. One of the most widely-used extensions endows Turing\nmachines with multiple tapes. Although multitape Turing machines are an\nabstraction to simplify Turing machine design, students find them no less\nchallenging. To aid students in understanding these machines, the FSM\nprogramming language provides support for their definition and execution. This,\nhowever, has proven insufficient for many students to understand the\noperational semantics of such machines and to understand why such machines\naccept or reject a word. To address this problem, three visualization tools\nhave been developed. The first is a dynamic visualization tool that simulates\nmachine execution. The second is a static visualization tool that automatically\nrenders a graphic for a multitape Turing machine's transition diagram. The\nthird is a static visualization tool that automatically renders computation\ngraphs for multitape Turing machines. This article presents these tools and\nillustrates how they are used to help students design and implement multitape\nTuring machines. In addition, empirical data is presented that suggests these\ntools are well-received and found useful by students.", "AI": {"tldr": "\u8bba\u6587\u4ecb\u7ecd\u4e86\u4e09\u79cd\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5e2e\u52a9\u5b66\u751f\u7406\u89e3\u591a\u5e26\u56fe\u7075\u673a\u7684\u64cd\u4f5c\u8bed\u4e49\u548c\u8bbe\u8ba1\u3002", "motivation": "\u5b66\u751f\u5728\u5b66\u4e60\u591a\u5e26\u56fe\u7075\u673a\u65f6\u9762\u4e34\u6311\u6218\uff0c\u73b0\u6709\u7684FSM\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u4e0d\u8db3\u3002", "method": "\u5f00\u53d1\u4e86\u4e09\u79cd\u53ef\u89c6\u5316\u5de5\u5177\uff1a\u52a8\u6001\u6a21\u62df\u6267\u884c\u3001\u9759\u6001\u6e32\u67d3\u8f6c\u79fb\u56fe\u548c\u8ba1\u7b97\u56fe\u3002", "result": "\u5de5\u5177\u53d7\u5230\u5b66\u751f\u6b22\u8fce\uff0c\u5e76\u88ab\u8bc1\u660e\u6709\u52a9\u4e8e\u7406\u89e3\u548c\u8bbe\u8ba1\u591a\u5e26\u56fe\u7075\u673a\u3002", "conclusion": "\u53ef\u89c6\u5316\u5de5\u5177\u80fd\u6709\u6548\u63d0\u5347\u5b66\u751f\u5bf9\u591a\u5e26\u56fe\u7075\u673a\u7684\u7406\u89e3\u4e0e\u8bbe\u8ba1\u80fd\u529b\u3002"}}
{"id": "2508.03639", "pdf": "https://arxiv.org/pdf/2508.03639", "abs": "https://arxiv.org/abs/2508.03639", "authors": ["Marco T. Moraz\u00e1n", "Shamil Dzhatdoyev", "Josephine Des Rosiers", "Tijana Mini\u0107", "Andr\u00e9s M. Garced", "David Anthony K. Fields"], "title": "A Design Recipe and Recipe-Based Errors for Regular Expressions", "categories": ["cs.FL", "cs.HC", "cs.PL", "cs.SE"], "comment": "In Proceedings TFPiE 2025, arXiv:2508.02305", "summary": "This article presents a novel framework to provide Formal Languages and\nAutomata Theory students design support for the development of regular\nexpressions. This framework includes a design recipe for regular expressions\nand a customized error messaging system. The error messaging system produces\nrecipe-based errors that include the step of the design recipe not successfully\ncompleted. Furthermore, the error messages follow the established practices of\nbeing concise, succinct, jargon-free, and nonprescriptive. In addition, a\nshorthand syntax developed for writing unit tests is described. The in-class\nuse of the design recipe is illustrated, two debugging sessions using the\ndescribed system are discussed, and the implementation of the error messaging\nsystem is briefly sketched.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u9896\u6846\u67b6\uff0c\u4e3a\u5f62\u5f0f\u8bed\u8a00\u4e0e\u81ea\u52a8\u673a\u7406\u8bba\u5b66\u751f\u63d0\u4f9b\u6b63\u5219\u8868\u8fbe\u5f0f\u8bbe\u8ba1\u652f\u6301\uff0c\u5305\u62ec\u8bbe\u8ba1\u65b9\u6cd5\u548c\u5b9a\u5236\u9519\u8bef\u6d88\u606f\u7cfb\u7edf\u3002", "motivation": "\u5e2e\u52a9\u5b66\u751f\u66f4\u9ad8\u6548\u5730\u8bbe\u8ba1\u548c\u8c03\u8bd5\u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u51cf\u5c11\u5b66\u4e60\u969c\u788d\u3002", "method": "\u6846\u67b6\u5305\u542b\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u8bbe\u8ba1\u65b9\u6cd5\u548c\u57fa\u4e8e\u6b65\u9aa4\u7684\u9519\u8bef\u6d88\u606f\u7cfb\u7edf\uff0c\u540c\u65f6\u4ecb\u7ecd\u4e86\u7b80\u5199\u7684\u5355\u5143\u6d4b\u8bd5\u8bed\u6cd5\u3002", "result": "\u5c55\u793a\u4e86\u8bbe\u8ba1\u65b9\u6cd5\u5728\u8bfe\u5802\u4e2d\u7684\u5e94\u7528\u3001\u8c03\u8bd5\u4f1a\u8bdd\u793a\u4f8b\uff0c\u5e76\u7b80\u8981\u63cf\u8ff0\u4e86\u9519\u8bef\u6d88\u606f\u7cfb\u7edf\u7684\u5b9e\u73b0\u3002", "conclusion": "\u8be5\u6846\u67b6\u901a\u8fc7\u7ed3\u6784\u5316\u8bbe\u8ba1\u548c\u6e05\u6670\u9519\u8bef\u53cd\u9988\uff0c\u63d0\u5347\u4e86\u5b66\u751f\u5b66\u4e60\u6b63\u5219\u8868\u8fbe\u5f0f\u7684\u6548\u7387\u3002"}}
{"id": "2508.03641", "pdf": "https://arxiv.org/pdf/2508.03641", "abs": "https://arxiv.org/abs/2508.03641", "authors": ["Marco T. Moraz\u00e1n", "David Anthony K. Fields", "Andr\u00e9s M. Garced", "Tijana Mini\u0107"], "title": "Visual Execution and Validation of Finite-State Machines and Pushdown Automata", "categories": ["cs.FL", "cs.HC", "cs.PL", "cs.SE"], "comment": "In Proceedings TFPiE 2025, arXiv:2508.02305", "summary": "In Formal Languages and Automata Theory courses, students find understanding\nnondeterministic finite-state and pushdown automata difficult. In many cases,\nthis means that it is challenging for them to comprehend the operational\nsemantics of such machines and, as a consequence, determine why a word is\naccepted or rejected. This is not entirely surprising, because students are\nmostly trained to design and implement deterministic programs. Comprehension of\npushdown automata is further complicated, because reasoning about the stack is\nnecessary. A common difficulty students face, for example, is understanding\nthat two different computations on the same word may reach the same state with\ndifferent stack values. To aid student understanding, we present two novel\ndynamic visualization tools for FSM -- a domain-specific programming language\nfor the Automata Theory classroom -- to support the design of such machines.\nThese tools visualize all computations that may be performed, respectively, by\na nondeterministic finite-state machine or by a pushdown automata in a stepwise\nmanner. In addition, these tools aid the machine verification process by\nallowing users to visually validate whether the properties a state represents\nhold when a machine transitions into it.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e24\u79cd\u52a8\u6001\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5e2e\u52a9\u5b66\u751f\u7406\u89e3\u975e\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u673a\u548c\u4e0b\u63a8\u81ea\u52a8\u673a\u7684\u64cd\u4f5c\u8bed\u4e49\u3002", "motivation": "\u5b66\u751f\u5728\u5f62\u5f0f\u8bed\u8a00\u4e0e\u81ea\u52a8\u673a\u7406\u8bba\u8bfe\u7a0b\u4e2d\u96be\u4ee5\u7406\u89e3\u975e\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u673a\u548c\u4e0b\u63a8\u81ea\u52a8\u673a\uff0c\u5c24\u5176\u662f\u5176\u64cd\u4f5c\u8bed\u4e49\u548c\u6808\u7684\u63a8\u7406\u3002", "method": "\u5f00\u53d1\u4e86\u4e24\u79cd\u52a8\u6001\u53ef\u89c6\u5316\u5de5\u5177\uff0c\u5206\u522b\u7528\u4e8e\u975e\u786e\u5b9a\u6027\u6709\u9650\u72b6\u6001\u673a\u548c\u4e0b\u63a8\u81ea\u52a8\u673a\uff0c\u9010\u6b65\u5c55\u793a\u6240\u6709\u53ef\u80fd\u7684\u8ba1\u7b97\u8fc7\u7a0b\u3002", "result": "\u5de5\u5177\u652f\u6301\u5b66\u751f\u901a\u8fc7\u89c6\u89c9\u9a8c\u8bc1\u72b6\u6001\u8f6c\u6362\u65f6\u5c5e\u6027\u7684\u6b63\u786e\u6027\uff0c\u63d0\u5347\u7406\u89e3\u3002", "conclusion": "\u52a8\u6001\u53ef\u89c6\u5316\u5de5\u5177\u80fd\u6709\u6548\u5e2e\u52a9\u5b66\u751f\u7406\u89e3\u548c\u9a8c\u8bc1\u81ea\u52a8\u673a\u7684\u884c\u4e3a\u3002"}}
{"id": "2508.03678", "pdf": "https://arxiv.org/pdf/2508.03678", "abs": "https://arxiv.org/abs/2508.03678", "authors": ["Yangtian Zi", "Harshitha Menon", "Arjun Guha"], "title": "More Than a Score: Probing the Impact of Prompt Specificity on LLM Code Generation", "categories": ["cs.CL", "cs.LG", "cs.PL"], "comment": null, "summary": "State-of-the-art Large Language Models (LLMs) achieve high pass@1 on general\nbenchmarks like HumanEval but underperform on specialized suites such as\nParEval. Is this due to LLMs missing domain knowledge or insufficient prompt\ndetail is given? To answer this, we introduce PartialOrderEval, which augments\nany code generation benchmark with a partial order of prompts from minimal to\nmaximally detailed. Applying it to HumanEval and both serial and OpenMP subsets\nof ParEval, we measure how pass@1 scales with prompt specificity. Our\nexperiments with Llama-3.x and Qwen2.5-Coder demonstrate varying degrees of\nprompt sensitivity across different tasks, and a qualitative analysis\nhighlights explicit I/O specifications, edge-case handling, and stepwise\nbreakdowns as the key drivers of prompt detail improvement.", "AI": {"tldr": "\u8bba\u6587\u7814\u7a76\u4e86LLMs\u5728\u901a\u7528\u4e0e\u4e13\u7528\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u4e0a\u7684\u8868\u73b0\u5dee\u5f02\uff0c\u901a\u8fc7PartialOrderEval\u5206\u6790\u63d0\u793a\u7ec6\u8282\u5bf9\u6027\u80fd\u7684\u5f71\u54cd\u3002", "motivation": "\u63a2\u7a76LLMs\u5728\u4e13\u7528\u57fa\u51c6\u4e0a\u8868\u73b0\u4e0d\u4f73\u7684\u539f\u56e0\u662f\u7f3a\u4e4f\u9886\u57df\u77e5\u8bc6\u8fd8\u662f\u63d0\u793a\u7ec6\u8282\u4e0d\u8db3\u3002", "method": "\u5f15\u5165PartialOrderEval\uff0c\u4e3a\u4ee3\u7801\u751f\u6210\u57fa\u51c6\u63d0\u4f9b\u4ece\u6700\u5c0f\u5230\u6700\u5927\u7ec6\u8282\u7684\u63d0\u793a\u5e8f\u5217\uff0c\u5e76\u5e94\u7528\u4e8eHumanEval\u548cParEval\u3002", "result": "\u5b9e\u9a8c\u663e\u793a\u4e0d\u540c\u4efb\u52a1\u5bf9\u63d0\u793a\u7ec6\u8282\u7684\u654f\u611f\u5ea6\u4e0d\u540c\uff0c\u660e\u786eI/O\u89c4\u8303\u3001\u8fb9\u7f18\u6848\u4f8b\u5904\u7406\u548c\u5206\u6b65\u62c6\u89e3\u662f\u5173\u952e\u6539\u8fdb\u56e0\u7d20\u3002", "conclusion": "\u63d0\u793a\u7ec6\u8282\u7684\u4f18\u5316\u80fd\u663e\u8457\u63d0\u5347LLMs\u5728\u4e13\u7528\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002"}}
