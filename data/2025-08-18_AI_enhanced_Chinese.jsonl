{"id": "2508.11297", "pdf": "https://arxiv.org/pdf/2508.11297", "abs": "https://arxiv.org/abs/2508.11297", "authors": ["Casper Bach"], "title": "Generic Reduction-Based Interpreters (Extended Version)", "categories": ["cs.PL"], "comment": null, "summary": "Reduction-based interpreters are traditionally defined in terms of a one-step\nreduction function which systematically decomposes a term into a potential\nredex and context, contracts the redex, and recomposes it to construct the new\nterm to be further reduced. While implementing such interpreters follows a\nsystematic recipe, they often require interpreter engineers to write a\nsubstantial amount of code -- much of it boilerplate. In this paper, we apply\nwell-known techniques from generic programming to reduce boilerplate code in\nreduction-based interpreters.", "AI": {"tldr": "\u5e94\u7528\u6cdb\u578b\u7f16\u7a0b\u6280\u672f\u51cf\u5c11\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u4e2d\u7684\u6837\u677f\u4ee3\u7801\u3002", "motivation": "\u4f20\u7edf\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u9700\u8981\u7f16\u5199\u5927\u91cf\u6837\u677f\u4ee3\u7801\uff0c\u589e\u52a0\u4e86\u5f00\u53d1\u8d1f\u62c5\u3002", "method": "\u91c7\u7528\u6cdb\u578b\u7f16\u7a0b\u6280\u672f\uff0c\u4f18\u5316\u89e3\u91ca\u5668\u7684\u5b9e\u73b0\u3002", "result": "\u51cf\u5c11\u4e86\u6837\u677f\u4ee3\u7801\u91cf\uff0c\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\u3002", "conclusion": "\u6cdb\u578b\u7f16\u7a0b\u80fd\u6709\u6548\u7b80\u5316\u57fa\u4e8e\u5f52\u7ea6\u7684\u89e3\u91ca\u5668\u7684\u5b9e\u73b0\u3002"}}
{"id": "2508.11443", "pdf": "https://arxiv.org/pdf/2508.11443", "abs": "https://arxiv.org/abs/2508.11443", "authors": ["William Henrich Due", "Martin Elsman", "Troels Henriksen"], "title": "Towards Efficient Hash Maps in Functional Array Languages", "categories": ["cs.PL", "cs.DS"], "comment": null, "summary": "We present a systematic derivation of a data-parallel implementation of\ntwo-level, static and collision-free hash maps, by giving a functional\nformulation of the Fredman et al. construction, and then flattening it. We\ndiscuss the challenges of providing a flexible, polymorphic, and abstract\ninterface to hash maps in a functional array language, with particular\nattention paid to the problem of dynamically sized keys, which we address by\nassociating each hash map with an arbitrary context. The algorithm is\nimplemented in Futhark, and the achieved GPU execution performance is compared\non simple benchmark problems. We find that our hash maps outperform\nconventional tree/search-based approaches. Furthermore, our implementation is\ncompared against the state-of-the-art cuCollections library, which is\nsignificantly faster for hash map construction, and to a lesser degree for\nlookups. We explain to which extent the performance difference is due to\nlow-level code generation limitation in the Futhark compiler, and to which\nextent it can be attributed to the data-parallel programming vocabulary not\nproviding the constructs necessary to express the equivalent of the algorithms\nused by cuCollections. We end by reflecting to which extent the functional\narray language programming model could, or should, be extended to address these\nweaknesses.", "AI": {"tldr": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u6570\u636e\u5e76\u884c\u7684\u4e24\u7ea7\u9759\u6001\u65e0\u51b2\u7a81\u54c8\u5e0c\u6620\u5c04\u5b9e\u73b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u529f\u80fd\u5316Fredman\u7b49\u4eba\u7684\u6784\u9020\u5e76\u6241\u5e73\u5316\u5b9e\u73b0\u3002\u8ba8\u8bba\u4e86\u5728\u529f\u80fd\u6570\u7ec4\u8bed\u8a00\u4e2d\u63d0\u4f9b\u7075\u6d3b\u3001\u591a\u6001\u548c\u62bd\u8c61\u63a5\u53e3\u7684\u6311\u6218\uff0c\u7279\u522b\u662f\u52a8\u6001\u5927\u5c0f\u952e\u7684\u95ee\u9898\u3002\u7b97\u6cd5\u5728Futhark\u4e2d\u5b9e\u73b0\uff0cGPU\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u6811/\u641c\u7d22\u65b9\u6cd5\uff0c\u4f46\u4e0ecuCollections\u5e93\u76f8\u6bd4\uff0c\u6784\u5efa\u901f\u5ea6\u66f4\u5feb\uff0c\u67e5\u627e\u7a0d\u6162\u3002\u5206\u6790\u4e86\u6027\u80fd\u5dee\u5f02\u7684\u539f\u56e0\uff0c\u5e76\u63a2\u8ba8\u4e86\u529f\u80fd\u6570\u7ec4\u8bed\u8a00\u6a21\u578b\u7684\u6269\u5c55\u53ef\u80fd\u6027\u3002", "motivation": "\u7814\u7a76\u52a8\u673a\u5728\u4e8e\u89e3\u51b3\u529f\u80fd\u6570\u7ec4\u8bed\u8a00\u4e2d\u54c8\u5e0c\u6620\u5c04\u7684\u7075\u6d3b\u6027\u548c\u6027\u80fd\u95ee\u9898\uff0c\u7279\u522b\u662f\u5728\u52a8\u6001\u5927\u5c0f\u952e\u548c\u591a\u6001\u63a5\u53e3\u65b9\u9762\u7684\u6311\u6218\u3002", "method": "\u65b9\u6cd5\u5305\u62ec\u529f\u80fd\u5316Fredman\u7b49\u4eba\u7684\u54c8\u5e0c\u6620\u5c04\u6784\u9020\uff0c\u5e76\u901a\u8fc7\u6241\u5e73\u5316\u5b9e\u73b0\u6570\u636e\u5e76\u884c\u3002\u5728Futhark\u4e2d\u5b9e\u73b0\uff0c\u5e76\u4e0e\u4f20\u7edf\u65b9\u6cd5\u548ccuCollections\u5e93\u8fdb\u884c\u6027\u80fd\u5bf9\u6bd4\u3002", "result": "\u7ed3\u679c\u663e\u793a\uff0c\u8be5\u54c8\u5e0c\u6620\u5c04\u5728GPU\u4e0a\u6027\u80fd\u4f18\u4e8e\u4f20\u7edf\u65b9\u6cd5\uff0c\u4f46\u5728\u6784\u5efa\u901f\u5ea6\u4e0a\u663e\u8457\u5feb\u4e8ecuCollections\u5e93\uff0c\u67e5\u627e\u6027\u80fd\u7a0d\u900a\u3002\u6027\u80fd\u5dee\u5f02\u90e8\u5206\u6e90\u4e8eFuthark\u7f16\u8bd1\u5668\u7684\u9650\u5236\u548c\u529f\u80fd\u6570\u7ec4\u8bed\u8a00\u7684\u8868\u8fbe\u4e0d\u8db3\u3002", "conclusion": "\u7ed3\u8bba\u6307\u51fa\u529f\u80fd\u6570\u7ec4\u8bed\u8a00\u6a21\u578b\u53ef\u80fd\u9700\u8981\u6269\u5c55\u4ee5\u5f25\u8865\u6027\u80fd\u5dee\u8ddd\uff0c\u5e76\u63a2\u8ba8\u4e86\u672a\u6765\u6539\u8fdb\u7684\u65b9\u5411\u3002"}}
