{"id": "2508.15109", "pdf": "https://arxiv.org/pdf/2508.15109", "abs": "https://arxiv.org/abs/2508.15109", "authors": ["Ziteng Wang", "Ruijie Fang", "Linus Zheng", "Dixin Tang", "Isil Dillig"], "title": "Homomorphism Calculus for User-Defined Aggregations", "categories": ["cs.PL", "D.3.0; F.3.1"], "comment": null, "summary": "Data processing frameworks like Apache Spark and Flink provide built-in\nsupport for user-defined aggregation functions (UDAFs), enabling the\nintegration of domain-specific logic. However, for these frameworks to support\n\\emph{efficient} UDAF execution, the function needs to satisfy a\n\\emph{homomorphism property}, which ensures that partial results from\nindependent computations can be merged correctly. Motivated by this problem,\nthis paper introduces a novel \\emph{homomorphism calculus} that can both verify\nand refute whether a UDAF is a dataframe homomorphism. If so, our calculus also\nenables the construction of a corresponding merge operator which can be used\nfor incremental computation and parallel execution. We have implemented an\nalgorithm based on our proposed calculus and evaluate it on real-world UDAFs,\ndemonstrating that our approach significantly outperforms two leading\nsynthesizers.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u540c\u6001\u5f62\u5f0f\u8ba1\u7b97\u6cd5\uff0c\u7528\u4e8e\u9a8c\u8bc1\u548c\u5426\u5b9a\u7528\u6237\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u662f\u5426\u6ee1\u8db3\u540c\u6001\u5f62\u5f0f\u6027\u8d28\uff0c\u4ee5\u652f\u6301\u9ad8\u6548\u7684\u5e76\u884c\u6267\u884c\u548c\u589e\u91cf\u8ba1\u7b97\u3002", "motivation": "\u7531\u4e8eApache Spark\u548cFlink\u7b49\u6570\u636e\u5904\u7406\u6846\u67b6\u9700\u8981\u7528\u6237\u5b9a\u4e49\u805a\u5408\u51fd\u6570\u6ee1\u8db3\u540c\u6001\u5f62\u5f0f\u6027\u8d28\u624d\u80fd\u5b9e\u73b0\u9ad8\u6548\u6267\u884c\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u81ea\u52a8\u5316\u65b9\u6cd5\u6765\u9a8c\u8bc1\u548c\u6784\u5efa\u5408\u5e76\u8fd0\u7b97\u7b26\u3002", "method": "\u8bbe\u8ba1\u4e86\u4e00\u79cd\u65b0\u7684\u540c\u6001\u5f62\u5f0f\u8ba1\u7b97\u6cd5\uff0c\u8be5\u7b97\u6cd5\u53ef\u4ee5\u9a8c\u8bc1\u6216\u5426\u5b9aUDAF\u662f\u5426\u4e3a\u6570\u636e\u6846\u540c\u6001\u5f62\u5f0f\uff0c\u5982\u679c\u6ee1\u8db3\u6761\u4ef6\u5219\u80fd\u6784\u5efa\u76f8\u5e94\u7684\u5408\u5e76\u8fd0\u7b97\u7b26\u3002\u5b9e\u73b0\u4e86\u57fa\u4e8e\u8be5\u8ba1\u7b97\u6cd5\u7684\u7b97\u6cd5\u3002", "result": "\u5728\u771f\u5b9e\u4e16\u754c\u7684UDAF\u4e0a\u8fdb\u884c\u4e86\u8bc4\u4f30\uff0c\u8bc1\u660e\u8be5\u65b9\u6cd5\u663e\u8457\u5730\u8d85\u8fc7\u4e86\u4e24\u4e2a\u9886\u5148\u7684\u5408\u6210\u5668\u3002", "conclusion": "\u8be5\u540c\u6001\u5f62\u5f0f\u8ba1\u7b97\u6cd5\u4e3a\u9a8c\u8bc1\u548c\u6784\u5efa\u9ad8\u6548\u805a\u5408\u51fd\u6570\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u652f\u6301\u5e76\u884c\u6267\u884c\u548c\u589e\u91cf\u8ba1\u7b97\u3002"}}
{"id": "2508.15137", "pdf": "https://arxiv.org/pdf/2508.15137", "abs": "https://arxiv.org/abs/2508.15137", "authors": ["Ruijie Fang", "Zachary Kincaid", "Thomas Reps"], "title": "Software Model Checking via Summary-Guided Search (Extended Version)", "categories": ["cs.PL", "cs.SE"], "comment": "Preliminary manuscript of extended version of paper that will appear\n  in OOPSLA 2025. 36 pages", "summary": "In this work, we describe a new software model-checking algorithm called GPS.\nGPS treats the task of model checking a program as a directed search of the\nprogram states, guided by a compositional, summary-based static analysis. The\nsummaries produced by static analysis are used both to prune away infeasible\npaths and to drive test generation to reach new, unexplored program states. GPS\ncan find both proofs of safety and counter-examples to safety (i.e., inputs\nthat trigger bugs), and features a novel two-layered search strategy that\nrenders it particularly efficient at finding bugs in programs featuring long,\ninput-dependent error paths. To make GPS refutationally complete (in the sense\nthat it will find an error if one exists, if it is allotted enough time), we\nintroduce an instrumentation technique and show that it helps GPS achieve\nrefutation-completeness without sacrificing overall performance. We benchmarked\nGPS on a suite of benchmarks including both programs from the Software\nVerification Competition (SV-COMP) and from prior literature, and found that\nour implementation of GPS outperforms state-of-the-art software model checkers\n(including the top performers in SV-COMP ReachSafety-Loops category), both in\nterms of the number of benchmarks solved and in terms of running time.", "AI": {"tldr": "GPS\u662f\u4e00\u79cd\u65b0\u7684\u8f6f\u4ef6\u6a21\u578b\u68c0\u6d4b\u7b97\u6cd5\uff0c\u7ed3\u5408\u4e86\u5b9a\u5411\u641c\u7d22\u548c\u9759\u6001\u5206\u6790\uff0c\u80fd\u591f\u9ad8\u6548\u53d1\u73b0\u7a0b\u5e8f\u5b89\u5168\u8bc1\u660e\u548c\u53cd\u4f8b\uff0c\u5728\u6027\u80fd\u4e0a\u4f18\u4e8e\u73b0\u6709\u6700\u5148\u8fdb\u7684\u6a21\u578b\u68c0\u6d4b\u5668\u3002", "motivation": "\u73b0\u6709\u7684\u8f6f\u4ef6\u6a21\u578b\u68c0\u6d4b\u65b9\u6cd5\u5728\u5904\u7406\u5305\u542b\u957f\u8f93\u5165\u4f9d\u8d56\u9519\u8bef\u8def\u5f84\u7684\u7a0b\u5e8f\u65f6\u6548\u7387\u4e0d\u9ad8\uff0c\u9700\u8981\u4e00\u79cd\u65e2\u80fd\u8bc1\u660e\u5b89\u5168\u6027\u53c8\u80fd\u53d1\u73b0\u9519\u8bef\u7684\u9ad8\u6548\u7b97\u6cd5\u3002", "method": "GPS\u91c7\u7528\u57fa\u4e8e\u7ec4\u5408\u9759\u6001\u5206\u6790\u7684\u5b9a\u5411\u641c\u7d22\u7b56\u7565\uff0c\u4f7f\u7528\u9759\u6001\u5206\u6790\u6458\u8981\u6765\u526a\u679d\u4e0d\u53ef\u884c\u8def\u5f84\u5e76\u9a71\u52a8\u6d4b\u8bd5\u751f\u6210\uff0c\u91c7\u7528\u4e24\u5c42\u641c\u7d22\u7b56\u7565\u548c\u63d2\u88c5\u6280\u672f\u5b9e\u73b0\u53cd\u9a73\u5b8c\u5907\u6027\u3002", "result": "GPS\u5728SV-COMP\u548c\u5148\u524d\u6587\u732e\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8868\u73b0\u4f18\u5f02\uff0c\u5728\u89e3\u51b3\u7684\u57fa\u51c6\u6570\u91cf\u548c\u8fd0\u884c\u65f6\u95f4\u4e0a\u90fd\u8d85\u8fc7\u4e86\u6700\u5148\u8fdb\u7684\u8f6f\u4ef6\u6a21\u578b\u68c0\u6d4b\u5668\u3002", "conclusion": "GPS\u7b97\u6cd5\u901a\u8fc7\u7ed3\u5408\u9759\u6001\u5206\u6790\u548c\u5b9a\u5411\u641c\u7d22\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u957f\u9519\u8bef\u8def\u5f84\u7a0b\u5e8f\u7684\u6a21\u578b\u68c0\u6d4b\u95ee\u9898\uff0c\u5b9e\u73b0\u4e86\u9ad8\u6027\u80fd\u548c\u53cd\u9a73\u5b8c\u5907\u6027\u3002"}}
{"id": "2508.15157", "pdf": "https://arxiv.org/pdf/2508.15157", "abs": "https://arxiv.org/abs/2508.15157", "authors": ["David M Kahn", "Jan Hoffmann", "Runming Li"], "title": "Big-Stop Semantics: A Simple Way to Get the Benefits of Small-Step Semantics in a Big-Step Judgment", "categories": ["cs.PL"], "comment": "26 pages, 27 figures", "summary": "As evident in the programming language literature, many practitioners favor\nspecifying dynamic program behavior using big-step over small-step semantics.\nUnlike small-step semantics, which must dwell on every intermediate program\nstate, big-step semantics conveniently jump directly to the ever-important\nresult of the computation. Big-step semantics also typically involve fewer\ninference rules than their small-step counterparts. However, in exchange for\nergonomics, big-step semantics give up power: Small-step semantics describes\nprogram behaviors that are outside the grasp of big-step semantics, notably\ndivergence. This work presents a little-known extension of big-step semantics\nwith inductive definitions that captures diverging computations without\nintroducing error states. This big-stop semantics is illustrated for typed,\nuntyped, and effectful variants of PCF, as well as a while-loop-based\nimperative language. Big-stop semantics extends the standard big-step inference\nrules with a few additional rules to define an evaluation judgment that is\nequivalent to the reflexive-transitive closure of small-step transitions. This\nsimple extension contrasts with other solutions in the literature which\nsacrifice ergonomics by introducing many additional inference rules, global\nstate, and/or less-commonly-understood reasoning principles like coinduction.", "AI": {"tldr": "\u5927\u6b65\u6b65\u51cf\u6b65\u8bed\u4e49\u7684\u6269\u5c55\uff0c\u901a\u8fc7\u5f52\u7eb3\u5b9a\u4e49\u6355\u83b7\u5206\u6563\u8ba1\u7b97\uff0c\u800c\u4e0d\u9700\u8981\u9519\u8bef\u72b6\u6001\u6216\u590d\u6742\u7684\u63a8\u7406\u89c4\u5219", "motivation": "\u5927\u6b65\u6b65\u8bed\u4e49\u5728\u8bed\u8a00\u8bbe\u8ba1\u4e2d\u66f4\u53d7\u6b22\u8fce\uff0c\u56e0\u4e3a\u5b83\u66f4\u76f4\u63a5\u5730\u8df3\u8f6c\u5230\u8ba1\u7b97\u7ed3\u679c\uff0c\u4f46\u7f3a\u70b9\u662f\u65e0\u6cd5\u5904\u7406\u5206\u6563\u8ba1\u7b97", "method": "\u63d0\u51fa\u5927\u505c\u6b62\u8bed\u4e49\uff0c\u5728\u6807\u51c6\u5927\u6b65\u6b65\u63a8\u7406\u89c4\u5219\u57fa\u7840\u4e0a\u6dfb\u52a0\u5c11\u91cf\u89c4\u5219\uff0c\u901a\u8fc7\u5f52\u7eb3\u5b9a\u4e49\u6765\u5b9a\u4e49\u4e0e\u5c0f\u6b65\u6b65\u8fc7\u6e21\u7684\u81ea\u53cd\u4f20\u9012\u95ed\u5305\u7b49\u4ef7\u7684\u8bc4\u4f30\u5224\u65ad", "result": "\u5728\u7c7b\u578b\u5316\u3001\u975e\u7c7b\u578b\u5316\u548c\u5e26\u6548\u679c\u7684PCF\u8bed\u8a00\u4ee5\u53cawhile\u5faa\u73af\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\u5b9e\u73b0\u4e86\u8fd9\u79cd\u65b9\u6cd5\uff0c\u80fd\u591f\u6355\u83b7\u5206\u6563\u8ba1\u7b97", "conclusion": "\u5927\u505c\u6b62\u8bed\u4e49\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u6d01\u7684\u65b9\u6cd5\u6765\u6269\u5c55\u5927\u6b65\u6b65\u8bed\u4e49\u7684\u80fd\u529b\uff0c\u907f\u514d\u4e86\u5176\u4ed6\u65b9\u6848\u4e2d\u7684\u590d\u6742\u6027\u548c\u4f7f\u7528\u5c11\u89c1\u7684\u63a8\u7406\u539f\u5219"}}
{"id": "2508.15166", "pdf": "https://arxiv.org/pdf/2508.15166", "abs": "https://arxiv.org/abs/2508.15166", "authors": ["Jingbo Wang", "Shashin Halalingaiah", "Weiyi Chen", "Chao Wang", "Isil Dillig"], "title": "Probabilistic Inference for Datalog with Correlated Inputs", "categories": ["cs.PL"], "comment": "Accepted for publication at OOPSLA 2025 (R2)", "summary": "Probabilistic extensions of logic programming languages, such as ProbLog,\nintegrate logical reasoning with probabilistic inference to evaluate\nprobabilities of output relations; however, prior work does not account for\npotential statistical correlations among input facts. This paper introduces\nPraline, a new extension to Datalog designed for precise probabilistic\ninference in the presence of (partially known) input correlations. We formulate\nthe inference task as a constrained optimization problem, where the solution\nyields sound and precise probability bounds for output facts. However, due to\nthe complexity of the resulting optimization problem, this approach alone often\ndoes not scale to large programs. To address scalability, we propose a more\nefficient $\\delta$-exact inference algorithm that leverages constraint solving,\nstatic analysis, and iterative refinement. Our empirical evaluation on\nchallenging real-world benchmarks, including side-channel analysis,\ndemonstrates that our method not only scales effectively but also delivers\ntight probability bounds.", "AI": {"tldr": "Praline\u662fDatalog\u7684\u65b0\u6269\u5c55\uff0c\u7528\u4e8e\u5904\u7406\u8f93\u5165\u4e8b\u5b9e\u95f4\u7edf\u8ba1\u76f8\u5173\u6027\u4e0b\u7684\u7cbe\u786e\u6982\u7387\u63a8\u7406\uff0c\u901a\u8fc7\u7ea6\u675f\u4f18\u5316\u548c\u03b4-\u7cbe\u786e\u7b97\u6cd5\u5b9e\u73b0\u53ef\u6269\u5c55\u7684\u7d27\u6982\u7387\u8fb9\u754c\u8ba1\u7b97\u3002", "motivation": "\u73b0\u6709\u6982\u7387\u903b\u8f91\u7f16\u7a0b\u8bed\u8a00\uff08\u5982ProbLog\uff09\u672a\u8003\u8651\u8f93\u5165\u4e8b\u5b9e\u95f4\u7684\u7edf\u8ba1\u76f8\u5173\u6027\uff0c\u8fd9\u9650\u5236\u4e86\u6982\u7387\u63a8\u7406\u7684\u7cbe\u786e\u6027\u3002", "method": "\u5c06\u63a8\u7406\u4efb\u52a1\u5efa\u6a21\u4e3a\u7ea6\u675f\u4f18\u5316\u95ee\u9898\uff0c\u63d0\u51fa\u03b4-\u7cbe\u786e\u63a8\u7406\u7b97\u6cd5\uff0c\u7ed3\u5408\u7ea6\u675f\u6c42\u89e3\u3001\u9759\u6001\u5206\u6790\u548c\u8fed\u4ee3\u4f18\u5316\u6765\u63d0\u9ad8\u53ef\u6269\u5c55\u6027\u3002", "result": "\u5728\u5305\u62ec\u4fa7\u4fe1\u9053\u5206\u6790\u5728\u5185\u7684\u73b0\u5b9e\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0c\u8be5\u65b9\u6cd5\u4e0d\u4ec5\u6709\u6548\u6269\u5c55\uff0c\u8fd8\u80fd\u63d0\u4f9b\u7d27\u81f4\u7684\u6982\u7387\u8fb9\u754c\u3002", "conclusion": "Praline\u901a\u8fc7\u5904\u7406\u8f93\u5165\u76f8\u5173\u6027\uff0c\u5b9e\u73b0\u4e86\u7cbe\u786e\u4e14\u53ef\u6269\u5c55\u7684\u6982\u7387\u63a8\u7406\uff0c\u4e3a\u590d\u6742\u5e94\u7528\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u6982\u7387\u8fb9\u754c\u8ba1\u7b97\u3002"}}
{"id": "2508.15264", "pdf": "https://arxiv.org/pdf/2508.15264", "abs": "https://arxiv.org/abs/2508.15264", "authors": ["Patrick Redmond", "Jonathan Castello", "Jos\u00e9 Manuel Calder\u00f3n Trilla", "Lindsey Kuper"], "title": "Exploring the Theory and Practice of Concurrency in the Entity-Component-System Pattern", "categories": ["cs.PL"], "comment": "This is an extended version (with appendices) of the OOPSLA 2025\n  paper", "summary": "The Entity-Component-System (ECS) software design pattern, long used in game\ndevelopment, encourages a clean separation of identity (entities), data\nproperties (components), and computational behaviors (systems). Programs\nwritten using the ECS pattern are naturally concurrent, and the pattern offers\nmodularity, flexibility, and performance benefits that have led to a\nproliferation of ECS frameworks. Nevertheless, the ECS pattern is little-known\nand not well understood outside of a few domains. Existing explanations of the\nECS pattern tend to be mired in the concrete details of particular ECS\nframeworks, or they explain the pattern in terms of imperfect metaphors or in\nterms of what it is not. We seek a rigorous understanding of the ECS pattern\nvia the design of a formal model, Core ECS, that abstracts away the details of\nspecific implementations to reveal the essence of software using the ECS\npattern. We identify a class of Core ECS programs that behave deterministically\nregardless of scheduling, enabling use of the ECS pattern as a\ndeterministic-by-construction concurrent programming model. With Core ECS as a\npoint of comparison, we then survey several real-world ECS frameworks and find\nthat they all leave opportunities for deterministic concurrency unexploited.\nOur findings point out a space for new ECS implementation techniques that\nbetter leverage such opportunities.", "AI": {"tldr": "\u672c\u6587\u901a\u8fc7\u5f62\u5f0f\u5316\u6a21\u578bCore ECS\u6765\u63a2\u7d22\u5b9e\u4f53-\u7ec4\u4ef6-\u7cfb\u7edf(ECS)\u8bbe\u8ba1\u6a21\u5f0f\u7684\u672c\u8d28\uff0c\u8bc6\u522b\u4e86\u53ef\u4ee5\u5b9e\u73b0\u8c03\u5ea6\u65e0\u5173\u51b3\u5b9a\u6027\u7684\u7c7b\u522b\uff0f\u5e76\u6307\u51fa\u73b0\u6709ECS\u6846\u67b6\u6ca1\u6709\u5145\u5206\u5229\u7528\u8fd9\u4e9b\u673a\u4f1a", "motivation": "ECS\u6a21\u5f0f\u867d\u7136\u5728\u6e38\u620f\u5f00\u53d1\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4f46\u5728\u5176\u4ed6\u9886\u57df\u77e5\u540d\u5ea6\u4e0d\u9ad8\uff0c\u73b0\u6709\u89e3\u91ca\u591a\u5047\u5019\u5177\u4f53\u6846\u67b6\u7ec6\u8282\u6216\u4f7f\u7528\u4e0d\u5b8c\u6574\u7684\u6bd4\u55bb\uff0c\u9700\u8981\u4e00\u4e2a\u66f4\u4e25\u8c28\u7684\u7406\u8bba\u57fa\u7840", "method": "\u8bbe\u8ba1\u4e86\u4e00\u4e2a\u5f62\u5f0f\u6a21\u578bCore ECS\uff0c\u62bd\u8c61\u5316\u5177\u4f53\u5b9e\u73b0\u7ec6\u8282\u6765\u63ed\u793aECS\u6a21\u5f0f\u7684\u672c\u8d28\u7279\u6027\uff0c\u5e76\u8bc6\u522b\u5177\u6709\u8c03\u5ea6\u65e0\u5173\u51b3\u5b9a\u6027\u7684\u7c7b\u522b", "result": "\u53d1\u73b0\u4e86\u4e00\u7c7bCore ECS\u7a0b\u5e8f\u53ef\u4ee5\u5728\u4efb\u4f55\u8c03\u5ea6\u60c5\u51b5\u4e0b\u90fd\u8868\u73b0\u51fa\u51b3\u5b9a\u6027\uff0c\u4f46\u5bf9\u591a\u4e2a\u5b9e\u9645ECS\u6846\u67b6\u7684\u8c03\u7814\u663e\u793a\u5b83\u4eec\u90fd\u6ca1\u6709\u5145\u5206\u5229\u7528\u8fd9\u79cd\u53ef\u80fd\u6027", "conclusion": "\u7814\u7a76\u6307\u51fa\u4e86\u65b0\u7684ECS\u5b9e\u73b0\u6280\u672f\u7684\u53d1\u5c55\u7a7a\u95f4\uff0c\u53ef\u4ee5\u66f4\u597d\u5730\u5229\u7528\u51b3\u5b9a\u6027\u5e76\u53d1\u7f16\u7a0b\u6a21\u578b\u7684\u4f18\u52bf"}}
{"id": "2508.15333", "pdf": "https://arxiv.org/pdf/2508.15333", "abs": "https://arxiv.org/abs/2508.15333", "authors": ["Francesco Dagnino", "Paola Giannini", "Violet Ka I Pun", "Ulises Torrella"], "title": "Fair Termination for Resource-Aware Active Objects", "categories": ["cs.PL", "F.3.3"], "comment": "18 pages, 12 pages of appendix, 12 figures, APLAS 2025", "summary": "Active object systems are a model of distributed computation that has been\nadopted for modelling distributed systems and business process workflows. This\nfield of modelling is, in essence, concurrent and resource-aware, motivating\nthe development of resource-aware formalisations on the active object model.\nThe contributions of this work are the development of a core calculus for\nresource-aware active objects together with a type system ensuring that\nwell-typed programs are fairly terminating, i.e., they can always eventually\nterminate. To achieve this, we combine techniques from graded semantics and\ntype systems, which are quite well understood for sequential programs, with\nthose for fair termination, which have been developed for synchronous~sessions.", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u8d44\u6e90\u611f\u77e5\u7684\u4e3b\u52a8\u5bf9\u8c61\u6838\u5fc3\u6f14\u7b97\u548c\u7c7b\u578b\u7cfb\u7edf\uff0c\u786e\u4fdd\u826f\u597d\u7c7b\u578b\u5316\u7684\u7a0b\u5e8f\u80fd\u591f\u516c\u5e73\u7ec8\u6b62", "motivation": "\u4e3b\u52a8\u5bf9\u8c61\u7cfb\u7edf\u662f\u5206\u5e03\u5f0f\u8ba1\u7b97\u6a21\u578b\uff0c\u7528\u4e8e\u5efa\u6a21\u5206\u5e03\u5f0f\u7cfb\u7edf\u548c\u4e1a\u52a1\u6d41\u7a0b\u5de5\u4f5c\u6d41\u3002\u8be5\u9886\u57df\u672c\u8d28\u4e0a\u662f\u5e76\u53d1\u548c\u8d44\u6e90\u611f\u77e5\u7684\uff0c\u9700\u8981\u5f00\u53d1\u8d44\u6e90\u611f\u77e5\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5", "method": "\u7ed3\u5408\u4e86\u987a\u5e8f\u7a0b\u5e8f\u4e2d\u6210\u719f\u7684\u68af\u5ea6\u8bed\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\u6280\u672f\uff0c\u4ee5\u53ca\u4e3a\u540c\u6b65\u4f1a\u8bdd\u5f00\u53d1\u7684\u516c\u5e73\u7ec8\u6b62\u6280\u672f", "result": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u6838\u5fc3\u6f14\u7b97\u548c\u7c7b\u578b\u7cfb\u7edf\uff0c\u786e\u4fdd\u826f\u597d\u7c7b\u578b\u5316\u7684\u7a0b\u5e8f\u80fd\u591f\u516c\u5e73\u7ec8\u6b62\uff08\u5373\u603b\u80fd\u6700\u7ec8\u7ec8\u6b62\uff09", "conclusion": "\u6210\u529f\u5c06\u987a\u5e8f\u7a0b\u5e8f\u7684\u68af\u5ea6\u8bed\u4e49\u6280\u672f\u4e0e\u540c\u6b65\u4f1a\u8bdd\u7684\u516c\u5e73\u7ec8\u6b62\u6280\u672f\u76f8\u7ed3\u5408\uff0c\u4e3a\u8d44\u6e90\u611f\u77e5\u7684\u4e3b\u52a8\u5bf9\u8c61\u7cfb\u7edf\u63d0\u4f9b\u4e86\u5f62\u5f0f\u5316\u4fdd\u8bc1"}}
{"id": "2508.15576", "pdf": "https://arxiv.org/pdf/2508.15576", "abs": "https://arxiv.org/abs/2508.15576", "authors": ["Andreas L\u00f6\u00f6w", "Seung Hoon Park", "Daniele Nantes-Sobrinho", "Sacha-\u00c9lie Ayoun", "Opale Sj\u00f6stedt", "Philippa Gardner"], "title": "Compositional Symbolic Execution for the Next 700 Memory Models (Extended Version)", "categories": ["cs.PL"], "comment": null, "summary": "Multiple successful compositional symbolic execution (CSE) tools and\nplatforms exploit separation logic (SL) for compositional verification and/or\nincorrectness separation logic (ISL) for compositional bug-finding, including\nVeriFast, Viper, Gillian, CN, and Infer-Pulse. Previous work on the Gillian\nplatform, the only CSE platform that is parametric on the memory model, meaning\nthat it can be instantiated to different memory models, suggests that the\nability to use custom memory models allows for more flexibility in supporting\nanalysis of a wide range of programming languages, for implementing custom\nautomation, and for improving performance. However, the literature lacks a\nsatisfactory formal foundation for memory-model-parametric CSE platforms.\n  In this paper, inspired by Gillian, we provide a new formal foundation for\nmemory-model-parametric CSE platforms. Our foundation advances the state of the\nart in four ways. First, we mechanise our foundation (in the interactive\ntheorem prover Rocq). Second, we validate our foundation by instantiating it to\na broad range of memory models, including models for C and CHERI. Third,\nwhereas previous memory-model-parametric work has only covered SL analyses, we\ncover both SL and ISL analyses. Fourth, our foundation is based on standard\ndefinitions of SL and ISL (including definitions of function specification\nvalidity, to ensure sound interoperation with other tools and platforms also\nbased on standard definitions).", "AI": {"tldr": "\u672c\u6587\u4e3a\u5185\u5b58\u6a21\u578b\u53c2\u6570\u5316\u7684\u7ec4\u5408\u7b26\u53f7\u6267\u884c\u5e73\u53f0\u63d0\u4f9b\u4e86\u65b0\u7684\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u652f\u6301\u5206\u79bb\u903b\u8f91\u548c\u9519\u8bef\u5206\u79bb\u903b\u8f91\u5206\u6790\uff0c\u5e76\u5728Rocq\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u5b9e\u73b0\u548c\u9a8c\u8bc1\u3002", "motivation": "\u73b0\u6709\u7684\u7ec4\u5408\u7b26\u53f7\u6267\u884c\u5de5\u5177\u867d\u7136\u5229\u7528\u4e86\u5206\u79bb\u903b\u8f91\u8fdb\u884c\u7ec4\u5408\u9a8c\u8bc1\u548c\u9519\u8bef\u5206\u79bb\u903b\u8f91\u8fdb\u884c\u7ec4\u5408\u9519\u8bef\u67e5\u627e\uff0c\u4f46\u7f3a\u4e4f\u5bf9\u5185\u5b58\u6a21\u578b\u53c2\u6570\u5316\u5e73\u53f0\u7684\u6ee1\u610f\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u9650\u5236\u4e86\u5e73\u53f0\u7684\u7075\u6d3b\u6027\u3001\u8bed\u8a00\u652f\u6301\u8303\u56f4\u548c\u6027\u80fd\u4f18\u5316\u3002", "method": "\u57fa\u4e8eGillian\u5e73\u53f0\u7684\u542f\u53d1\uff0c\u5728Rocq\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u5668\u4e2d\u673a\u68b0\u5316\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u5e76\u901a\u8fc7\u5b9e\u4f8b\u5316\u5230C\u548cCHERI\u7b49\u591a\u79cd\u5185\u5b58\u6a21\u578b\u8fdb\u884c\u9a8c\u8bc1\uff0c\u540c\u65f6\u652f\u6301\u5206\u79bb\u903b\u8f91\u548c\u9519\u8bef\u5206\u79bb\u903b\u8f91\u5206\u6790\u3002", "result": "\u6210\u529f\u5efa\u7acb\u4e86\u5185\u5b58\u6a21\u578b\u53c2\u6570\u5316\u7ec4\u5408\u7b26\u53f7\u6267\u884c\u5e73\u53f0\u7684\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u652f\u6301\u591a\u79cd\u5185\u5b58\u6a21\u578b\u5b9e\u4f8b\u5316\uff0c\u6269\u5c55\u4e86\u5206\u6790\u8303\u56f4\uff08\u540c\u65f6\u652f\u6301SL\u548cISL\uff09\uff0c\u5e76\u57fa\u4e8e\u6807\u51c6\u5b9a\u4e49\u786e\u4fdd\u4e0e\u5176\u4ed6\u5de5\u5177\u7684\u4e92\u64cd\u4f5c\u6027\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u5185\u5b58\u6a21\u578b\u53c2\u6570\u5316\u7684\u7ec4\u5408\u7b26\u53f7\u6267\u884c\u5e73\u53f0\u63d0\u4f9b\u4e86\u575a\u5b9e\u7684\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u589e\u5f3a\u4e86\u5e73\u53f0\u7684\u7075\u6d3b\u6027\u3001\u53ef\u6269\u5c55\u6027\u548c\u4e0e\u5176\u4ed6\u5de5\u5177\u7684\u517c\u5bb9\u6027\uff0c\u63a8\u52a8\u4e86\u8be5\u9886\u57df\u7684\u53d1\u5c55\u3002"}}
{"id": "2508.15750", "pdf": "https://arxiv.org/pdf/2508.15750", "abs": "https://arxiv.org/abs/2508.15750", "authors": ["Celeste Barnaby", "Qiaochu Chen", "Ramya Ramalingam", "Osbert Bastani", "Isil Dillig"], "title": "Active Learning for Neurosymbolic Program Synthesis", "categories": ["cs.PL"], "comment": null, "summary": "The goal of active learning for program synthesis is to synthesize the\ndesired program by asking targeted questions that minimize user interaction.\nWhile prior work has explored active learning in the purely symbolic setting,\nsuch techniques are inadequate for the increasingly popular paradigm of\nneurosymbolic program synthesis, where the synthesized program incorporates\nneural components. When applied to the neurosymbolic setting, such techniques\ncan -- and, in practice, do -- return an unintended program due to\nmispredictions of neural components. This paper proposes a new active learning\ntechnique that can handle the unique challenges posed by neural network\nmispredictions. Our approach is based upon a new evaluation strategy called\nconstrained conformal evaluation (CCE), which accounts for neural\nmispredictions while taking into account user-provided feedback. Our proposed\nmethod iteratively makes CCE more precise until all remaining programs are\nguaranteed to be observationally equivalent. We have implemented this method in\na tool called SmartLabel and experimentally evaluated it on three neurosymbolic\ndomains. Our results demonstrate that SmartLabel identifies the ground truth\nprogram for 98% of the benchmarks, requiring under 5 rounds of user interaction\non average. In contrast, prior techniques for active learning are only able to\nconverge to the ground truth program for at most 65% of the benchmarks.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u4e3b\u52a8\u5b66\u4e60\u6280\u672fSmartLabel\uff0c\u7528\u4e8e\u5904\u7406\u795e\u7ecf\u7b26\u53f7\u7a0b\u5e8f\u7efc\u5408\u4e2d\u7684\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u9519\u8bef\u95ee\u9898\uff0c\u901a\u8fc7\u7ea6\u675f\u9075\u5faa\u8bc4\u4f30\u6280\u672f\u786e\u4fdd\u627e\u5230\u771f\u6b63\u7684\u76ee\u6807\u7a0b\u5e8f\u3002", "motivation": "\u4f20\u7edf\u7684\u7b26\u53f7\u4e3b\u52a8\u5b66\u4e60\u6280\u672f\u5728\u795e\u7ecf\u7b26\u53f7\u7a0b\u5e8f\u7efc\u5408\u4e2d\u6548\u679c\u4e0d\u4f73\uff0c\u56e0\u795e\u7ecf\u7ec4\u4ef6\u7684\u9884\u6d4b\u9519\u8bef\u5bfc\u81f4\u8fd4\u56de\u975e\u9884\u671f\u7a0b\u5e8f\uff0c\u9700\u8981\u65b0\u65b9\u6cd5\u6765\u5904\u7406\u8fd9\u4e9b\u6311\u6218\u3002", "method": "\u63d0\u51fa\u4e86\u7ea6\u675f\u9075\u5faa\u8bc4\u4f30\uff08CCE\uff09\u65b0\u8bc4\u4f30\u7b56\u7565\uff0c\u5728\u8003\u8651\u7528\u6237\u53cd\u9988\u7684\u540c\u65f6\u5904\u7406\u795e\u7ecf\u7f51\u7edc\u9884\u6d4b\u9519\u8bef\u3002\u901a\u8fc7\u8fed\u4ee3\u63d0\u9ad8CCE\u7684\u7cbe\u786e\u6027\uff0c\u76f4\u5230\u6240\u6709\u5269\u4f59\u7a0b\u5e8f\u90fd\u4fdd\u8bc1\u89c2\u5bdf\u7b49\u4ef7\u3002", "result": "\u5728\u4e09\u4e2a\u795e\u7ecf\u7b26\u53f7\u9886\u57df\u7684\u5b9e\u9a8c\u4e2d\uff0cSmartLabel\u80fd\u591f\u4e3a98%\u7684\u6d4b\u8bd5\u627e\u5230\u771f\u5b9e\u76ee\u6807\u7a0b\u5e8f\uff0c\u5e73\u5747\u53ea\u9700\u5c11\u4e8e5\u8f6e\u7528\u6237\u4ea4\u4e92\u3002\u8001\u65b9\u6cd5\u6700\u591a\u53ea\u80fd\u572865%\u7684\u6d4b\u8bd5\u4e0a\u6536\u655b\u5230\u771f\u5b9e\u7a0b\u5e8f\u3002", "conclusion": "SmartLabel\u901a\u8fc7CCE\u6280\u672f\u6709\u6548\u89e3\u51b3\u4e86\u795e\u7ecf\u7b26\u53f7\u7a0b\u5e8f\u7efc\u5408\u4e2d\u7684\u4e3b\u52a8\u5b66\u4e60\u6311\u6218\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u627e\u5230\u6b63\u786e\u7a0b\u5e8f\u7684\u6210\u529f\u7387\u548c\u6548\u7387\u3002"}}
{"id": "2508.15454", "pdf": "https://arxiv.org/pdf/2508.15454", "abs": "https://arxiv.org/abs/2508.15454", "authors": ["Saar Tzour-Shaday", "Dana Drachsler Cohen"], "title": "Mini-Batch Robustness Verification of Deep Neural Networks", "categories": ["cs.LG", "cs.LO", "cs.PL"], "comment": "30 pages, 12 figures, conference OOPSLA 2025", "summary": "Neural network image classifiers are ubiquitous in many safety-critical\napplications. However, they are susceptible to adversarial attacks. To\nunderstand their robustness to attacks, many local robustness verifiers have\nbeen proposed to analyze $\\epsilon$-balls of inputs. Yet, existing verifiers\nintroduce a long analysis time or lose too much precision, making them less\neffective for a large set of inputs. In this work, we propose a new approach to\nlocal robustness: group local robustness verification. The key idea is to\nleverage the similarity of the network computations of certain $\\epsilon$-balls\nto reduce the overall analysis time. We propose BaVerLy, a sound and complete\nverifier that boosts the local robustness verification of a set of\n$\\epsilon$-balls by dynamically constructing and verifying mini-batches.\nBaVerLy adaptively identifies successful mini-batch sizes, accordingly\nconstructs mini-batches of $\\epsilon$-balls that have similar network\ncomputations, and verifies them jointly. If a mini-batch is verified, all\n$\\epsilon$-balls are proven robust. Otherwise, one $\\epsilon$-ball is suspected\nas not being robust, guiding the refinement. In the latter case, BaVerLy\nleverages the analysis results to expedite the analysis of that $\\epsilon$-ball\nas well as the other $\\epsilon$-balls in the batch. We evaluate BaVerLy on\nfully connected and convolutional networks for MNIST and CIFAR-10. Results show\nthat BaVerLy scales the common one by one verification by 2.3x on average and\nup to 4.1x, in which case it reduces the total analysis time from 24 hours to 6\nhours.", "AI": {"tldr": "\u63d0\u51faBaVerLy\u65b9\u6cd5\uff0c\u901a\u8fc7\u5206\u7ec4\u9a8c\u8bc1\u03b5-ball\u7684\u5c40\u90e8\u9c81\u68d2\u6027\uff0c\u5229\u7528\u7f51\u7edc\u8ba1\u7b97\u7684\u76f8\u4f3c\u6027\u51cf\u5c11\u5206\u6790\u65f6\u95f4\uff0c\u5e73\u5747\u63d0\u5347\u9a8c\u8bc1\u901f\u5ea62.3\u500d", "motivation": "\u73b0\u6709\u795e\u7ecf\u7f51\u7edc\u5c40\u90e8\u9c81\u68d2\u6027\u9a8c\u8bc1\u5668\u5206\u6790\u65f6\u95f4\u957f\u6216\u7cbe\u5ea6\u635f\u5931\u5927\uff0c\u65e0\u6cd5\u6709\u6548\u5904\u7406\u5927\u89c4\u6a21\u8f93\u5165\u96c6", "method": "\u52a8\u6001\u6784\u5efa\u548c\u9a8c\u8bc1mini-batches\uff0c\u81ea\u9002\u5e94\u8bc6\u522b\u6210\u529f\u7684batch\u5927\u5c0f\uff0c\u5bf9\u5177\u6709\u76f8\u4f3c\u7f51\u7edc\u8ba1\u7b97\u7684\u03b5-ball\u8fdb\u884c\u8054\u5408\u9a8c\u8bc1", "result": "\u5728MNIST\u548cCIFAR-10\u7684\u5168\u8fde\u63a5\u548c\u5377\u79ef\u7f51\u7edc\u4e0a\uff0c\u5e73\u5747\u52a0\u901f2.3\u500d\uff0c\u6700\u9ad8\u8fbe4.1\u500d\uff0c\u5c0624\u5c0f\u65f6\u5206\u6790\u65f6\u95f4\u7f29\u77ed\u81f36\u5c0f\u65f6", "conclusion": "BaVerLy\u901a\u8fc7\u5206\u7ec4\u9a8c\u8bc1\u7b56\u7565\u6709\u6548\u63d0\u5347\u4e86\u5c40\u90e8\u9c81\u68d2\u6027\u9a8c\u8bc1\u7684\u6548\u7387\uff0c\u4e3a\u5927\u89c4\u6a21\u5b89\u5168\u5173\u952e\u5e94\u7528\u63d0\u4f9b\u4e86\u53ef\u884c\u7684\u9a8c\u8bc1\u65b9\u6848"}}
