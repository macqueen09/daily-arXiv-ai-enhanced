{"id": "2509.00360", "pdf": "https://arxiv.org/pdf/2509.00360", "abs": "https://arxiv.org/abs/2509.00360", "authors": ["Shaan Nagy", "Timothy Zhou", "Nadia Polikarpova", "Loris D'Antoni"], "title": "ChopChop: a Programmable Framework for Semantically Constraining the Output of Language Models", "categories": ["cs.PL", "D.3.0"], "comment": null, "summary": "Language models (LMs) can generate code, but cannot guarantee its\ncorrectness--producing outputs that often violate type safety, program\ninvariants, or semantic equivalence. Constrained decoding offers a solution by\nrestricting generation to programs that satisfy desired properties. Yet,\nexisting methods are limited to shallow syntactic constraints or rely on\nbrittle, ad hoc encodings of semantics over token sequences.\n  We present ChopChop, the first programmable framework for semantic\nconstrained decoding, enabling LMs to generate code that provably satisfies\nrich semantic properties. ChopChop connects token-level generation with\nreasoning over abstract program structures using a coinduction-based formalism\nand reduces constraint enforcement to a realizability problem over regular\ncodata. We demonstrate ChopChop's generality through generation constrained by\ntype safety and program equivalence, showing how formal methods can be\nseamlessly integrated into LM-driven code generation. ChopChop transforms\nsemantic constrained decoding from a niche technique into a systematic,\nprincipled extension of LMs--improving success rates across models and tasks\nwhile maintaining practical decoding latency.", "AI": {"tldr": "ChopChop\u662f\u4e00\u4e2a\u53ef\u7f16\u7a0b\u7684\u8bed\u4e49\u7ea6\u675f\u89e3\u7801\u6846\u67b6\uff0c\u901a\u8fc7\u8fde\u63a5\u8bcd\u5143\u7ea7\u751f\u6210\u548c\u62bd\u8c61\u7a0b\u5e8f\u7ed3\u6784\u63a8\u7406\uff0c\u786e\u4fdd\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7684\u4ee3\u7801\u6ee1\u8db3\u4e30\u5bcc\u7684\u8bed\u4e49\u5c5e\u6027\u3002", "motivation": "\u73b0\u6709\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7684\u4ee3\u7801\u65e0\u6cd5\u4fdd\u8bc1\u6b63\u786e\u6027\uff0c\u7ecf\u5e38\u8fdd\u53cd\u7c7b\u578b\u5b89\u5168\u3001\u7a0b\u5e8f\u4e0d\u53d8\u91cf\u6216\u8bed\u4e49\u7b49\u4ef7\u6027\u3002\u73b0\u6709\u7ea6\u675f\u89e3\u7801\u65b9\u6cd5\u4ec5\u9650\u4e8e\u6d45\u5c42\u8bed\u6cd5\u7ea6\u675f\u6216\u4f9d\u8d56\u8106\u5f31\u7684\u8bed\u4e49\u7f16\u7801\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u5171\u5f52\u7eb3\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u5c06\u7ea6\u675f\u6267\u884c\u7b80\u5316\u4e3a\u6b63\u5219\u5171\u6570\u636e\u4e0a\u7684\u53ef\u5b9e\u73b0\u6027\u95ee\u9898\uff0c\u8fde\u63a5\u8bcd\u5143\u7ea7\u751f\u6210\u4e0e\u62bd\u8c61\u7a0b\u5e8f\u7ed3\u6784\u63a8\u7406\u3002", "result": "\u6846\u67b6\u652f\u6301\u7c7b\u578b\u5b89\u5168\u548c\u7a0b\u5e8f\u7b49\u4ef7\u6027\u7ea6\u675f\uff0c\u5c06\u8bed\u4e49\u7ea6\u675f\u89e3\u7801\u4ece\u5c0f\u4f17\u6280\u672f\u8f6c\u53d8\u4e3a\u7cfb\u7edf\u5316\u3001\u539f\u5219\u6027\u7684\u8bed\u8a00\u6a21\u578b\u6269\u5c55\uff0c\u63d0\u9ad8\u4e86\u6210\u529f\u7387\u548c\u89e3\u7801\u6548\u7387\u3002", "conclusion": "ChopChop\u5c55\u793a\u4e86\u5f62\u5f0f\u5316\u65b9\u6cd5\u53ef\u4ee5\u65e0\u7f1d\u96c6\u6210\u5230LM\u9a71\u52a8\u7684\u4ee3\u7801\u751f\u6210\u4e2d\uff0c\u4e3a\u8bed\u4e49\u7ea6\u675f\u89e3\u7801\u63d0\u4f9b\u4e86\u7cfb\u7edf\u5316\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.00587", "pdf": "https://arxiv.org/pdf/2509.00587", "abs": "https://arxiv.org/abs/2509.00587", "authors": ["Vaibhav Mehta", "Justin Hsu"], "title": "A Hoare Logic for Symmetry Properties", "categories": ["cs.PL"], "comment": "Accepted to OOPSLA '25", "summary": "Many natural program correctness properties can be stated in terms of\n  symmetries, but existing formal methods have little support for reasoning\n  about such properties. We consider how to formally verify a broad class of\n  symmetry properties expressed in terms of group actions. To specify these\n  properties, we design a syntax for group actions, supporting standard\n  constructions and a natural notion of entailment. Then, we develop a\n  Hoare-style logic for verifying symmetry properties of imperative programs,\n  where group actions take the place of the typical pre- and post-condition\n  assertions. Finally, we develop a prototype tool $\\mathsf{SymVerif}$, and use\n  it to verify symmetry properties on a series of handcrafted benchmarks. Our\n  tool uncovered an error in a model of a dynamical system described by\n\\citet{McLachlan_Quispel_2002}.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u7528\u4e8e\u9a8c\u8bc1\u7a0b\u5e8f\u5bf9\u79f0\u6027\u5c5e\u6027\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\uff0c\u5305\u62ec\u7fa4\u52a8\u4f5c\u8bed\u6cd5\u8bbe\u8ba1\u548cHoare\u98ce\u683c\u903b\u8f91\uff0c\u5e76\u5f00\u53d1\u4e86\u539f\u578b\u5de5\u5177SymVerif\u8fdb\u884c\u9a8c\u8bc1", "motivation": "\u73b0\u6709\u5f62\u5f0f\u5316\u65b9\u6cd5\u7f3a\u4e4f\u5bf9\u7a0b\u5e8f\u5bf9\u79f0\u6027\u5c5e\u6027\u7684\u652f\u6301\uff0c\u800c\u8bb8\u591a\u81ea\u7136\u7a0b\u5e8f\u6b63\u786e\u6027\u5c5e\u6027\u53ef\u4ee5\u901a\u8fc7\u5bf9\u79f0\u6027\u6765\u8868\u8fbe", "method": "\u8bbe\u8ba1\u7fa4\u52a8\u4f5c\u8bed\u6cd5\u652f\u6301\u6807\u51c6\u6784\u9020\u548c\u8574\u542b\u5173\u7cfb\uff0c\u5f00\u53d1Hoare\u98ce\u683c\u7684\u903b\u8f91\u6765\u9a8c\u8bc1\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u7684\u5bf9\u79f0\u6027\u5c5e\u6027\uff0c\u7fa4\u52a8\u4f5c\u66ff\u4ee3\u4f20\u7edf\u7684\u65ad\u8a00\u6761\u4ef6", "result": "\u5f00\u53d1\u4e86\u539f\u578b\u5de5\u5177SymVerif\uff0c\u5728\u4e00\u7cfb\u5217\u624b\u5de5\u5236\u4f5c\u7684\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u9a8c\u8bc1\u4e86\u5bf9\u79f0\u6027\u5c5e\u6027\uff0c\u5e76\u53d1\u73b0\u4e86McLachlan\u548cQuispel(2002)\u63cf\u8ff0\u7684\u52a8\u529b\u5b66\u7cfb\u7edf\u6a21\u578b\u4e2d\u7684\u9519\u8bef", "conclusion": "\u8be5\u65b9\u6cd5\u80fd\u591f\u6709\u6548\u9a8c\u8bc1\u5e7f\u6cdb\u7684\u5bf9\u79f0\u6027\u5c5e\u6027\uff0c\u5de5\u5177\u5728\u5b9e\u9645\u6848\u4f8b\u4e2d\u53d1\u73b0\u4e86\u73b0\u6709\u6a21\u578b\u4e2d\u7684\u9519\u8bef\uff0c\u8bc1\u660e\u4e86\u65b9\u6cd5\u7684\u5b9e\u7528\u4ef7\u503c"}}
{"id": "2509.00699", "pdf": "https://arxiv.org/pdf/2509.00699", "abs": "https://arxiv.org/abs/2509.00699", "authors": ["Yumeng He", "Chandrakana Nandi", "Sreepathi Pai"], "title": "Formalizing Linear Motion G-code for Invariant Checking and Differential Testing of Fabrication Tools", "categories": ["cs.PL"], "comment": null, "summary": "The computational fabrication pipeline for 3D printing is much like a\ncompiler - users design models in Computer Aided Design (CAD) tools that are\nlowered to polygon meshes to be ultimately compiled to machine code by 3D\nslicers. For traditional compilers and programming languages, techniques for\nchecking program invariants are well-established. Similarly, methods like\ndifferential testing are often used to uncover bugs in compilers themselves,\nwhich makes them more reliable. The fabrication pipeline would benefit from\nsimilar techniques but traditional approaches do not directly apply to the\nrepresentations used in this domain. Unlike traditional programs, 3D models\nexist both as geometric objects as well as machine code that ultimately runs on\nthe hardware. The machine code, like in traditional compiling, is affected by\nmany factors like the model, the slicer being used, and numerous\nuser-configurable parameters that control the slicing process. In this work, we\npropose a new algorithm for lifting G-code (a common language used in\nfabrication pipelines) by denoting a G-code program to a set of cuboids, and\nthen defining an approximate point cloud representation for efficiently\noperating on these cuboids. Our algorithm opens up new opportunities: we show\nthree use cases that demonstrate how it enables error localization in CAD\nmodels through invariant checking, quantitative comparisons between slicers,\nand evaluating the efficacy of mesh repair tools. We present a prototype\nimplementation of our algorithm in a tool, GlitchFinder, and evaluate it on 58\nreal-world CAD models. Our results show that GlitchFinder is particularly\neffective in identifying slicing issues due to small features, can highlight\ndifferences in how popular slicers (Cura and PrusaSlicer) slice the same model,\nand can identify cases where mesh repair tools (MeshLab and Meshmixer)\nintroduce new errors during repair.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u5c06G\u4ee3\u7801\u8f6c\u6362\u4e3a\u7acb\u65b9\u4f53\u96c6\u5408\u7684\u7b97\u6cd5\uff0c\u5e76\u901a\u8fc7\u70b9\u4e91\u8868\u793a\u8fdb\u884c\u9ad8\u6548\u64cd\u4f5c\uff0c\u4ee5\u652f\u6301CAD\u6a21\u578b\u9519\u8bef\u5b9a\u4f4d\u3001\u5207\u7247\u5668\u6bd4\u8f83\u548c\u7f51\u683c\u4fee\u590d\u5de5\u5177\u6548\u679c\u8bc4\u4f30", "motivation": "\u4f20\u7edf\u7f16\u8bd1\u5668\u6709\u6210\u719f\u7684\u7a0b\u5e8f\u4e0d\u53d8\u91cf\u68c0\u67e5\u548c\u5dee\u5206\u6d4b\u8bd5\u6280\u672f\uff0c\u4f463D\u6253\u5370\u5236\u9020\u6d41\u7a0b\u7f3a\u4e4f\u7c7b\u4f3c\u65b9\u6cd5\u3002\u9700\u8981\u4e00\u79cd\u80fd\u591f\u5904\u7406\u51e0\u4f55\u5bf9\u8c61\u548c\u673a\u5668\u4ee3\u7801\u7684\u65b9\u6cd5\u6765\u652f\u6301\u8be5\u9886\u57df\u7684\u53ef\u9760\u6027\u9a8c\u8bc1", "method": "\u5f00\u53d1\u4e86\u4e00\u79cd\u5c06G\u4ee3\u7801\u7a0b\u5e8f\u5347\u7ea7\u4e3a\u7acb\u65b9\u4f53\u96c6\u5408\u7684\u7b97\u6cd5\uff0c\u5e76\u5b9a\u4e49\u4e86\u8fd1\u4f3c\u70b9\u4e91\u8868\u793a\u6765\u9ad8\u6548\u64cd\u4f5c\u8fd9\u4e9b\u7acb\u65b9\u4f53\u3002\u5b9e\u73b0\u4e86\u539f\u578b\u5de5\u5177GlitchFinder", "result": "\u572858\u4e2a\u5b9e\u9645CAD\u6a21\u578b\u4e0a\u8bc4\u4f30\uff0c\u7ed3\u679c\u663e\u793aGlitchFinder\u80fd\u6709\u6548\u8bc6\u522b\u5c0f\u7279\u5f81\u5bfc\u81f4\u7684\u5207\u7247\u95ee\u9898\uff0c\u5bf9\u6bd4\u4e0d\u540c\u5207\u7247\u5668\u7684\u5dee\u5f02\uff0c\u4ee5\u53ca\u53d1\u73b0\u7f51\u683c\u4fee\u590d\u5de5\u5177\u5728\u4fee\u590d\u8fc7\u7a0b\u4e2d\u5f15\u5165\u7684\u65b0\u9519\u8bef", "conclusion": "\u8be5\u7b97\u6cd5\u4e3a3D\u6253\u5370\u5236\u9020\u6d41\u7a0b\u63d0\u4f9b\u4e86\u7c7b\u4f3c\u4f20\u7edf\u7f16\u8bd1\u5668\u9a8c\u8bc1\u7684\u65b0\u65b9\u6cd5\uff0c\u5f00\u542f\u4e86\u9519\u8bef\u5b9a\u4f4d\u3001\u5de5\u5177\u6bd4\u8f83\u548c\u8d28\u91cf\u8bc4\u4f30\u7b49\u65b0\u7684\u5e94\u7528\u573a\u666f"}}
{"id": "2509.00948", "pdf": "https://arxiv.org/pdf/2509.00948", "abs": "https://arxiv.org/abs/2509.00948", "authors": ["Denghang Hu", "Taolue Chen", "Philipp R\u00fcmmer", "Fu Song", "Zhilin Wu"], "title": "Decision Procedure for A Theory of String Sequences", "categories": ["cs.PL", "cs.FL"], "comment": "21 pages, 2 tables, APLAS 2025", "summary": "The theory of sequences, supported by many SMT solvers, can model program\ndata types including bounded arrays and lists. Sequences are parameterized by\nthe element data type and provide operations such as accessing elements,\nconcatenation, forming sub-sequences and updating elements. Strings and\nsequences are intimately related; many operations, e.g., matching a string\naccording to a regular expression, splitting strings, or joining strings in a\nsequence, are frequently used in string-manipulating programs. Nevertheless,\nthese operations are typically not directly supported by existing SMT solvers,\nwhich instead only consider the generic theory of sequences. In this paper, we\npropose a theory of string sequences and study its satisfiability. We show\nthat, while it is undecidable in general, the decidability can be recovered by\nrestricting to the straight-line fragment. This is shown by encoding each\nstring sequence as a string, and each string sequence operation as a\ncorresponding string operation. We provide pre-image computation for the\nresulting string operations with respect to automata, effectively casting it\ninto the generic OSTRICH string constraint solving framework. We implement the\nnew decision procedure as a tool $\\ostrichseq$, and carry out experiments on\nbenchmark constraints generated from real-world JavaScript programs,\nhand-crafted templates and unit tests. The experiments confirm the efficacy of\nour approach.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u5b57\u7b26\u4e32\u5e8f\u5217\u7406\u8bba\uff0c\u7814\u7a76\u5176\u53ef\u6ee1\u8db3\u6027\u95ee\u9898\uff0c\u901a\u8fc7\u5c06\u5b57\u7b26\u4e32\u5e8f\u5217\u7f16\u7801\u4e3a\u5b57\u7b26\u4e32\u5e76\u9650\u5236\u4e3a\u76f4\u7ebf\u7247\u6bb5\u6765\u6062\u590d\u53ef\u5224\u5b9a\u6027\uff0c\u5b9e\u73b0\u4e86OSTRICH\u6846\u67b6\u4e0b\u7684\u51b3\u7b56\u8fc7\u7a0b\u3002", "motivation": "\u73b0\u6709SMT\u6c42\u89e3\u5668\u901a\u5e38\u53ea\u652f\u6301\u901a\u7528\u5e8f\u5217\u7406\u8bba\uff0c\u7f3a\u4e4f\u5bf9\u5b57\u7b26\u4e32\u5e8f\u5217\u64cd\u4f5c\uff08\u5982\u6b63\u5219\u8868\u8fbe\u5f0f\u5339\u914d\u3001\u5b57\u7b26\u4e32\u5206\u5272\u548c\u8fde\u63a5\uff09\u7684\u76f4\u63a5\u652f\u6301\uff0c\u800c\u8fd9\u4e9b\u64cd\u4f5c\u5728\u5b57\u7b26\u4e32\u5904\u7406\u7a0b\u5e8f\u4e2d\u7ecf\u5e38\u4f7f\u7528\u3002", "method": "\u5c06\u6bcf\u4e2a\u5b57\u7b26\u4e32\u5e8f\u5217\u7f16\u7801\u4e3a\u5b57\u7b26\u4e32\uff0c\u5c06\u5b57\u7b26\u4e32\u5e8f\u5217\u64cd\u4f5c\u6620\u5c04\u4e3a\u76f8\u5e94\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u901a\u8fc7\u81ea\u52a8\u673a\u8fdb\u884c\u7ed3\u679c\u64cd\u4f5c\u7684\u524d\u50cf\u8ba1\u7b97\uff0c\u5e76\u5c06\u5176\u96c6\u6210\u5230OSTRICH\u5b57\u7b26\u4e32\u7ea6\u675f\u6c42\u89e3\u6846\u67b6\u4e2d\u3002", "result": "\u5b9e\u73b0\u4e86\u5de5\u5177ostrichseq\uff0c\u5728\u771f\u5b9eJavaScript\u7a0b\u5e8f\u751f\u6210\u7684\u57fa\u51c6\u7ea6\u675f\u3001\u624b\u5de5\u5236\u4f5c\u7684\u6a21\u677f\u548c\u5355\u5143\u6d4b\u8bd5\u4e0a\u8fdb\u884c\u4e86\u5b9e\u9a8c\uff0c\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027\u3002", "conclusion": "\u867d\u7136\u5b57\u7b26\u4e32\u5e8f\u5217\u7406\u8bba\u5728\u4e00\u822c\u60c5\u51b5\u4e0b\u662f\u4e0d\u53ef\u5224\u5b9a\u7684\uff0c\u4f46\u901a\u8fc7\u9650\u5236\u5230\u76f4\u7ebf\u7247\u6bb5\u53ef\u4ee5\u6062\u590d\u53ef\u5224\u5b9a\u6027\uff0c\u6240\u63d0\u51fa\u7684\u65b9\u6cd5\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8868\u73b0\u51fa\u826f\u597d\u7684\u6548\u80fd\u3002"}}
{"id": "2509.01511", "pdf": "https://arxiv.org/pdf/2509.01511", "abs": "https://arxiv.org/abs/2509.01511", "authors": ["Zhe Zhou", "Benjamin Delaware", "Suresh Jagannathan"], "title": "Type-Based Incorrectness Reasoning", "categories": ["cs.PL"], "comment": null, "summary": "A coverage type generalizes refinement types found in many functional\nlanguages with support for must-style underapproximate reasoning.\nProperty-based testing frameworks are one particularly useful domain where such\ncapabilities are useful as they allow us to verify the completeness, as well as\nsafety, of test generators. There is a surprising connection between the kind\nof underapproximate reasoning coverage types offer and the style of reasoning\nenabled by recently proposed Incorrectness Logic frameworks. In our\npresentation, we propose to explore this connection more deeply, identifying\nmechanisms that more systematically integrate incorrectness reasoning within an\nexpressive refinement type system and the opportunities that such integration\noffers to functional programmers, program verifiers, and program analyzers and\nrelated tools.", "AI": {"tldr": "\u8986\u76d6\u7c7b\u578b\u5c06\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u7684\u7cbe\u5316\u7c7b\u578b\u63a8\u5e7f\u5230\u652f\u6301\u5fc5\u987b\u5f0f\u4e0b\u8fd1\u4f3c\u63a8\u7406\uff0c\u4e0e\u4e0d\u6b63\u786e\u6027\u903b\u8f91\u6709\u6df1\u523b\u8054\u7cfb\uff0c\u4e3a\u6d4b\u8bd5\u6846\u67b6\u548c\u7a0b\u5e8f\u5206\u6790\u63d0\u4f9b\u65b0\u673a\u4f1a", "motivation": "\u4f20\u7edf\u7684\u7cbe\u5316\u7c7b\u578b\u4e3b\u8981\u652f\u6301\u4e0a\u8fd1\u4f3c\u63a8\u7406\uff0c\u800c\u5c5e\u6027\u6d4b\u8bd5\u6846\u67b6\u9700\u8981\u9a8c\u8bc1\u6d4b\u8bd5\u751f\u6210\u5668\u7684\u5b8c\u6574\u6027\u548c\u5b89\u5168\u6027\uff0c\u8fd9\u9700\u8981\u4e0b\u8fd1\u4f3c\u63a8\u7406\u80fd\u529b\u3002\u8986\u76d6\u7c7b\u578b\u4e0e\u4e0d\u6b63\u786e\u6027\u903b\u8f91\u4e4b\u95f4\u7684\u610f\u5916\u8054\u7cfb\u503c\u5f97\u6df1\u5165\u63a2\u7d22", "method": "\u63d0\u51fa\u5c06\u4e0d\u6b63\u786e\u6027\u63a8\u7406\u673a\u5236\u7cfb\u7edf\u6027\u5730\u96c6\u6210\u5230\u8868\u8fbe\u6027\u7cbe\u5316\u7c7b\u578b\u7cfb\u7edf\u4e2d\uff0c\u63a2\u7d22\u8986\u76d6\u7c7b\u578b\u4e0e\u4e0d\u6b63\u786e\u6027\u903b\u8f91\u7684\u6df1\u5c42\u8054\u7cfb", "result": "\u5efa\u7acb\u4e86\u8986\u76d6\u7c7b\u578b\u4e0e\u4e0d\u6b63\u786e\u6027\u903b\u8f91\u7684\u7406\u8bba\u8054\u7cfb\uff0c\u5c55\u793a\u4e86\u8fd9\u79cd\u96c6\u6210\u5982\u4f55\u4e3a\u51fd\u6570\u5f0f\u7a0b\u5e8f\u5458\u3001\u7a0b\u5e8f\u9a8c\u8bc1\u5668\u548c\u5206\u6790\u5de5\u5177\u63d0\u4f9b\u65b0\u7684\u80fd\u529b", "conclusion": "\u8986\u76d6\u7c7b\u578b\u4e0e\u4e0d\u6b63\u786e\u6027\u903b\u8f91\u7684\u6574\u5408\u4e3a\u7a0b\u5e8f\u9a8c\u8bc1\u548c\u5206\u6790\u5f00\u8f9f\u4e86\u65b0\u9014\u5f84\uff0c\u7279\u522b\u662f\u5728\u5c5e\u6027\u6d4b\u8bd5\u548c\u7a0b\u5e8f\u6b63\u786e\u6027\u9a8c\u8bc1\u65b9\u9762\u5177\u6709\u91cd\u8981\u5e94\u7528\u4ef7\u503c"}}
{"id": "2509.02428", "pdf": "https://arxiv.org/pdf/2509.02428", "abs": "https://arxiv.org/abs/2509.02428", "authors": ["Yongwei Yuan", "Zhe Zhou", "Julia Belyakova", "Benjamin Delaware", "Suresh Jagannathan"], "title": "From Traces to Program Incorrectness: A Type-Theoretic Approach", "categories": ["cs.PL"], "comment": null, "summary": "We present a type-theoretic framework for reasoning about incorrectness in\nfunctional programs that interact with effectful, opaque library APIs. Our\napproach centers on traces -- temporally-ordered sequences of library API\ninvocations -- which naturally characterize both the preconditions of\nindividual APIs and their composite behavior. We represent these traces using\nsymbolic regular expressions (SREs), enabling formal specification of incorrect\nabstract data type (ADT) behaviors across function boundaries. The core\ncontribution is a novel type inference algorithm that operates modulo specified\nincorrectness properties and leverages the symbolic finite automata (SFAs)\nrepresentations of regexes for compositional reasoning of traces. When the\nalgorithm succeeds, the inferred types witness that an ADT implementation can\nexhibit some subset of the specified incorrect behaviors. This represents the\nfirst systematic approach to underapproximate reasoning against trace-based\nincorrectness specifications, enabling a new form of trace-guided compositional\nanalysis.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u7c7b\u578b\u8bba\u6846\u67b6\uff0c\u7528\u4e8e\u5206\u6790\u51fd\u6570\u5f0f\u7a0b\u5e8f\u4e2d\u4e0e\u6709\u526f\u4f5c\u7528\u7684\u4e0d\u900f\u660e\u5e93API\u4ea4\u4e92\u65f6\u7684\u9519\u8bef\u884c\u4e3a\uff0c\u57fa\u4e8e\u7b26\u53f7\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u7b26\u53f7\u6709\u9650\u81ea\u52a8\u673a\u8fdb\u884c\u8f68\u8ff9\u8ffd\u8e2a\u548c\u9519\u8bef\u89c4\u8303\u9a8c\u8bc1\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u7f3a\u4e4f\u5bf9\u51fd\u6570\u5f0f\u7a0b\u5e8f\u4e2d\u4e0e\u4e0d\u900f\u660e\u5e93API\u4ea4\u4e92\u65f6\u9519\u8bef\u884c\u4e3a\u7684\u7cfb\u7edf\u6027\u5206\u6790\u6846\u67b6\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u591f\u8de8\u51fd\u6570\u8fb9\u754c\u5f62\u5f0f\u5316\u6307\u5b9a\u9519\u8bef\u62bd\u8c61\u6570\u636e\u7c7b\u578b\u884c\u4e3a\u7684\u65b9\u6cd5\u3002", "method": "\u4f7f\u7528\u7b26\u53f7\u6b63\u5219\u8868\u8fbe\u5f0f(SREs)\u8868\u793aAPI\u8c03\u7528\u8f68\u8ff9\uff0c\u5f00\u53d1\u65b0\u578b\u7c7b\u578b\u63a8\u65ad\u7b97\u6cd5\uff0c\u57fa\u4e8e\u7b26\u53f7\u6709\u9650\u81ea\u52a8\u673a(SFAs)\u8fdb\u884c\u7ec4\u5408\u5f0f\u8f68\u8ff9\u63a8\u7406\uff0c\u5728\u6307\u5b9a\u9519\u8bef\u5c5e\u6027\u4e0b\u8fdb\u884c\u6a21\u8fd0\u7b97\u3002", "result": "\u7b97\u6cd5\u6210\u529f\u65f6\uff0c\u63a8\u65ad\u7684\u7c7b\u578b\u8bc1\u660eADT\u5b9e\u73b0\u80fd\u591f\u8868\u73b0\u51fa\u6307\u5b9a\u9519\u8bef\u884c\u4e3a\u7684\u67d0\u4e2a\u5b50\u96c6\uff0c\u5b9e\u73b0\u4e86\u57fa\u4e8e\u8f68\u8ff9\u7684\u9519\u8bef\u89c4\u8303\u7684\u4e0b\u8fd1\u4f3c\u63a8\u7406\u3002", "conclusion": "\u8fd9\u662f\u9996\u4e2a\u9488\u5bf9\u57fa\u4e8e\u8f68\u8ff9\u7684\u9519\u8bef\u89c4\u8303\u8fdb\u884c\u7cfb\u7edf\u6027\u4e0b\u8fd1\u4f3c\u63a8\u7406\u7684\u65b9\u6cd5\uff0c\u4e3a\u8f68\u8ff9\u5f15\u5bfc\u7684\u7ec4\u5408\u5f0f\u5206\u6790\u5f00\u8f9f\u4e86\u65b0\u9014\u5f84\u3002"}}
{"id": "2509.01082", "pdf": "https://arxiv.org/pdf/2509.01082", "abs": "https://arxiv.org/abs/2509.01082", "authors": ["Madhav Kanda", "Shubham Ugare", "Sasa Misailovic"], "title": "REFINESTAT: Efficient Exploration for Probabilistic Program Synthesis", "categories": ["cs.LG", "cs.PL"], "comment": "RefineStat constrains LM decoding with statistical validity checks\n  and uses diagnostic-guided resampling (priors/likelihoods) to transform small\n  LMs' drafts into correct, reliable probabilistic programs that can match or\n  surpass closed-source models", "summary": "Probabilistic programming offers a powerful framework for modeling\nuncertainty, yet statistical model discovery in this domain entails navigating\nan immense search space under strict domain-specific constraints. When small\nlanguage models are tasked with generating probabilistic programs, they\nfrequently produce outputs that suffer from both syntactic and semantic errors,\nsuch as flawed inference constructs. Motivated by probabilistic programmers'\ndomain expertise and debugging strategies, we introduce RefineStat, a language\nmodel--driven framework that enforces semantic constraints ensuring synthesized\nprograms contain valid distributions and well-formed parameters, and then\napplies diagnostic-aware refinement by resampling prior or likelihood\ncomponents whenever reliability checks fail. We evaluate RefineStat on multiple\nprobabilistic-programming code-generation tasks using smaller language models\n(SLMs) and find that it produces programs that are both syntactically sound and\nstatistically reliable, often matching or surpassing those from closed-source\nlarge language models (e.g., OpenAI o3).", "AI": {"tldr": "RefineStat\u662f\u4e00\u4e2a\u57fa\u4e8e\u8bed\u8a00\u6a21\u578b\u7684\u6846\u67b6\uff0c\u901a\u8fc7\u8bed\u4e49\u7ea6\u675f\u548c\u8bca\u65ad\u611f\u77e5\u7684\u7ec6\u5316\u6765\u751f\u6210\u8bed\u6cd5\u6b63\u786e\u4e14\u7edf\u8ba1\u53ef\u9760\u7684\u6982\u7387\u7a0b\u5e8f\uff0c\u4f7f\u5c0f\u578b\u8bed\u8a00\u6a21\u578b\u5728\u6982\u7387\u7f16\u7a0b\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e0a\u8fbe\u5230\u6216\u8d85\u8d8a\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u8868\u73b0\u3002", "motivation": "\u6982\u7387\u7f16\u7a0b\u4e2d\u7684\u7edf\u8ba1\u6a21\u578b\u53d1\u73b0\u9700\u8981\u5728\u5927\u641c\u7d22\u7a7a\u95f4\u548c\u4e25\u683c\u9886\u57df\u7ea6\u675f\u4e0b\u8fdb\u884c\uff0c\u5c0f\u578b\u8bed\u8a00\u6a21\u578b\u751f\u6210\u7684\u6982\u7387\u7a0b\u5e8f\u7ecf\u5e38\u5b58\u5728\u8bed\u6cd5\u548c\u8bed\u4e49\u9519\u8bef\uff08\u5982\u9519\u8bef\u7684\u63a8\u7406\u7ed3\u6784\uff09\u3002\u53d7\u6982\u7387\u7a0b\u5e8f\u5458\u9886\u57df\u4e13\u4e1a\u77e5\u8bc6\u548c\u8c03\u8bd5\u7b56\u7565\u7684\u542f\u53d1\u3002", "method": "\u5f15\u5165RefineStat\u6846\u67b6\uff1a1\uff09\u5f3a\u5236\u6267\u884c\u8bed\u4e49\u7ea6\u675f\u786e\u4fdd\u5408\u6210\u7a0b\u5e8f\u5305\u542b\u6709\u6548\u5206\u5e03\u548c\u826f\u597d\u53c2\u6570\uff1b2\uff09\u5f53\u53ef\u9760\u6027\u68c0\u67e5\u5931\u8d25\u65f6\uff0c\u5e94\u7528\u8bca\u65ad\u611f\u77e5\u7ec6\u5316\uff0c\u91cd\u65b0\u91c7\u6837\u5148\u9a8c\u6216\u4f3c\u7136\u7ec4\u4ef6\u3002", "result": "\u5728\u591a\u4e2a\u6982\u7387\u7f16\u7a0b\u4ee3\u7801\u751f\u6210\u4efb\u52a1\u4e0a\u8bc4\u4f30\uff0c\u4f7f\u7528\u5c0f\u578b\u8bed\u8a00\u6a21\u578b\u65f6\uff0cRefineStat\u751f\u6210\u7684\u7a0b\u5e8f\u65e2\u8bed\u6cd5\u6b63\u786e\u53c8\u7edf\u8ba1\u53ef\u9760\uff0c\u7ecf\u5e38\u5339\u914d\u6216\u8d85\u8d8a\u95ed\u6e90\u5927\u578b\u8bed\u8a00\u6a21\u578b\uff08\u5982OpenAI o3\uff09\u7684\u8868\u73b0\u3002", "conclusion": "RefineStat\u901a\u8fc7\u7ed3\u5408\u8bed\u4e49\u7ea6\u675f\u548c\u8bca\u65ad\u611f\u77e5\u7ec6\u5316\uff0c\u6709\u6548\u89e3\u51b3\u4e86\u5c0f\u578b\u8bed\u8a00\u6a21\u578b\u5728\u6982\u7387\u7f16\u7a0b\u4e2d\u7684\u9519\u8bef\u95ee\u9898\uff0c\u663e\u8457\u63d0\u5347\u4e86\u751f\u6210\u7a0b\u5e8f\u7684\u8d28\u91cf\u548c\u53ef\u9760\u6027\u3002"}}
{"id": "2509.01508", "pdf": "https://arxiv.org/pdf/2509.01508", "abs": "https://arxiv.org/abs/2509.01508", "authors": ["Anurudh Peduri", "Gilles Barthe", "Michael Walter"], "title": "Traq: Estimating the Quantum Cost of Classical Programs", "categories": ["quant-ph", "cs.LO", "cs.PL", "cs.SE"], "comment": "50 pages", "summary": "Predicting practical speedups offered by future quantum computers has become\na major focus of the quantum computing community. Typically, these predictions\nare supported by lengthy manual analyses and numerical simulations and are\ncarried out for one specific application at a time. In this paper, we present\nTraq, a principled approach towards estimating the quantum speedup of classical\nprograms fully automatically and with provable guarantees. It consists of a\nclassical language that includes high-level primitives amenable to quantum\nspeedups, a cost analysis, and a compilation to low-level quantum programs. Our\ncost analysis upper bounds the complexity of the resulting quantum program in a\nfine-grained way: it captures non-asymptotic information and is sensitive to\nthe input of the program (rather than providing worst-case costs). We also\nprovide a proof-of-concept implementation and a case study inspired by AND-OR\ntrees.", "AI": {"tldr": "Traq\u662f\u4e00\u4e2a\u81ea\u52a8\u4f30\u7b97\u91cf\u5b50\u52a0\u901f\u7684\u6846\u67b6\uff0c\u5305\u542b\u91cf\u5b50\u52a0\u901f\u539f\u8bed\u8bed\u8a00\u3001\u6210\u672c\u5206\u6790\u548c\u91cf\u5b50\u7a0b\u5e8f\u7f16\u8bd1\uff0c\u80fd\u63d0\u4f9b\u7ec6\u7c92\u5ea6\u7684\u975e\u6e10\u8fd1\u590d\u6742\u5ea6\u4e0a\u754c", "motivation": "\u5f53\u524d\u91cf\u5b50\u52a0\u901f\u9884\u6d4b\u9700\u8981\u5197\u957f\u7684\u624b\u52a8\u5206\u6790\u548c\u6570\u503c\u6a21\u62df\uff0c\u4e14\u6bcf\u6b21\u53ea\u80fd\u9488\u5bf9\u4e00\u4e2a\u7279\u5b9a\u5e94\u7528\uff0c\u7f3a\u4e4f\u81ea\u52a8\u5316\u4e14\u53ef\u8bc1\u660e\u4fdd\u8bc1\u7684\u65b9\u6cd5", "method": "\u5f00\u53d1\u4e86\u5305\u542b\u91cf\u5b50\u52a0\u901f\u539f\u8bed\u7684\u9ad8\u7ea7\u8bed\u8a00\uff0c\u8bbe\u8ba1\u6210\u672c\u5206\u6790\u7b97\u6cd5\u6765\u4e0a\u754c\u91cf\u5b50\u7a0b\u5e8f\u590d\u6742\u5ea6\uff08\u5305\u542b\u975e\u6e10\u8fd1\u4fe1\u606f\u548c\u8f93\u5165\u654f\u611f\u6027\uff09\uff0c\u5e76\u63d0\u4f9b\u7f16\u8bd1\u5230\u4f4e\u7ea7\u91cf\u5b50\u7a0b\u5e8f\u7684\u80fd\u529b", "result": "\u63d0\u51fa\u4e86\u6982\u5ff5\u9a8c\u8bc1\u5b9e\u73b0\uff0c\u5e76\u901a\u8fc7AND-OR\u6811\u7684\u6848\u4f8b\u7814\u7a76\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027", "conclusion": "Traq\u63d0\u4f9b\u4e86\u9996\u4e2a\u5177\u6709\u53ef\u8bc1\u660e\u4fdd\u8bc1\u7684\u5168\u81ea\u52a8\u91cf\u5b50\u52a0\u901f\u4f30\u7b97\u65b9\u6cd5\uff0c\u80fd\u591f\u7ec6\u7c92\u5ea6\u5730\u5206\u6790\u91cf\u5b50\u7a0b\u5e8f\u590d\u6742\u5ea6"}}
{"id": "2509.02197", "pdf": "https://arxiv.org/pdf/2509.02197", "abs": "https://arxiv.org/abs/2509.02197", "authors": ["Afif Boudaoud", "Alexandru Calotoiu", "Marcin Copik", "Torsten Hoefler"], "title": "DaCe AD: Unifying High-Performance Automatic Differentiation for Machine Learning and Scientific Computing", "categories": ["cs.LG", "cs.PF", "cs.PL"], "comment": null, "summary": "Automatic differentiation (AD) is a set of techniques that systematically\napplies the chain rule to compute the gradients of functions without requiring\nhuman intervention. Although the fundamentals of this technology were\nestablished decades ago, it is experiencing a renaissance as it plays a key\nrole in efficiently computing gradients for backpropagation in machine learning\nalgorithms. AD is also crucial for many applications in scientific computing\ndomains, particularly emerging techniques that integrate machine learning\nmodels within scientific simulations and schemes. Existing AD frameworks have\nfour main limitations: limited support of programming languages, requiring code\nmodifications for AD compatibility, limited performance on scientific computing\ncodes, and a naive store-all solution for forward-pass data required for\ngradient calculations. These limitations force domain scientists to manually\ncompute the gradients for large problems. This work presents DaCe AD, a\ngeneral, efficient automatic differentiation engine that requires no code\nmodifications. DaCe AD uses a novel ILP-based algorithm to optimize the\ntrade-off between storing and recomputing to achieve maximum performance within\na given memory constraint. We showcase the generality of our method by applying\nit to NPBench, a suite of HPC benchmarks with diverse scientific computing\npatterns, where we outperform JAX, a Python framework with state-of-the-art\ngeneral AD capabilities, by more than 92 times on average without requiring any\ncode changes.", "AI": {"tldr": "DaCe AD\u662f\u4e00\u4e2a\u901a\u7528\u7684\u81ea\u52a8\u5fae\u5206\u5f15\u64ce\uff0c\u65e0\u9700\u4ee3\u7801\u4fee\u6539\uff0c\u901a\u8fc7ILP\u7b97\u6cd5\u4f18\u5316\u5b58\u50a8\u4e0e\u91cd\u8ba1\u7b97\u7684\u6743\u8861\uff0c\u5728HPC\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u6bd4JAX\u5feb92\u500d\u4ee5\u4e0a", "motivation": "\u73b0\u6709AD\u6846\u67b6\u5b58\u5728\u7f16\u7a0b\u8bed\u8a00\u652f\u6301\u6709\u9650\u3001\u9700\u8981\u4ee3\u7801\u4fee\u6539\u3001\u79d1\u5b66\u8ba1\u7b97\u6027\u80fd\u4e0d\u8db3\u3001\u5b58\u50a8\u7b56\u7565\u7b80\u5355\u7b49\u9650\u5236\uff0c\u8feb\u4f7f\u9886\u57df\u79d1\u5b66\u5bb6\u624b\u52a8\u8ba1\u7b97\u5927\u578b\u95ee\u9898\u7684\u68af\u5ea6", "method": "\u4f7f\u7528\u57fa\u4e8e\u6574\u6570\u7ebf\u6027\u89c4\u5212(ILP)\u7684\u65b0\u7b97\u6cd5\uff0c\u5728\u7ed9\u5b9a\u5185\u5b58\u7ea6\u675f\u4e0b\u4f18\u5316\u5b58\u50a8\u4e0e\u91cd\u8ba1\u7b97\u7684\u6743\u8861\uff0c\u5b9e\u73b0\u6700\u5927\u6027\u80fd", "result": "\u5728NPBench HPC\u57fa\u51c6\u6d4b\u8bd5\u5957\u4ef6\u4e0a\uff0c\u5e73\u5747\u6bd4\u6700\u5148\u8fdb\u7684JAX\u6846\u67b6\u5feb92\u500d\u4ee5\u4e0a\uff0c\u4e14\u65e0\u9700\u4efb\u4f55\u4ee3\u7801\u4fee\u6539", "conclusion": "DaCe AD\u63d0\u4f9b\u4e86\u4e00\u4e2a\u901a\u7528\u9ad8\u6548\u7684\u81ea\u52a8\u5fae\u5206\u89e3\u51b3\u65b9\u6848\uff0c\u89e3\u51b3\u4e86\u73b0\u6709AD\u6846\u67b6\u7684\u4e3b\u8981\u9650\u5236\uff0c\u7279\u522b\u9002\u7528\u4e8e\u79d1\u5b66\u8ba1\u7b97\u548c\u673a\u5668\u5b66\u4e60\u96c6\u6210\u5e94\u7528"}}
{"id": "2509.02457", "pdf": "https://arxiv.org/pdf/2509.02457", "abs": "https://arxiv.org/abs/2509.02457", "authors": ["Ajay Singh"], "title": "Safe Memory Reclamation Techniques", "categories": ["cs.DC", "cs.DS", "cs.PF", "cs.PL"], "comment": "Ph.D. Thesis", "summary": "Safe memory reclamation is crucial to memory safety for optimistic and\nlock-free concurrent data structures in non garbage collected programming\nlanguages. However, several challenges arise in designing an ideal safe memory\nreclamation algorithm, including achieving high speed and scalability, easy of\nuse for programmers, applicability to wide class of data structures, managing\nthe large memory footprint caused by delayed freeing of memory for safety and\nperformance, and avoiding asymmetric overhead on data structure operations.\nSeveral approaches to designing safe memory reclamation algorithms are studied\nby blending ideas and tools from across the hardware-software stack. These\nsolutions cross traditional boundaries and exploit features exposed at\ndifferent layers.", "AI": {"tldr": "\u8be5\u8bba\u6587\u7814\u7a76\u5b89\u5168\u5185\u5b58\u56de\u6536\u7b97\u6cd5\uff0c\u9488\u5bf9\u65e0\u5783\u573e\u6536\u96c6\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u4e50\u89c2\u548c\u65e0\u9501\u5e76\u53d1\u6570\u636e\u7ed3\u6784\uff0c\u63a2\u8ba8\u5982\u4f55\u5b9e\u73b0\u9ad8\u901f\u3001\u53ef\u6269\u5c55\u3001\u6613\u7528\u4e14\u5185\u5b58\u5360\u7528\u5c0f\u7684\u89e3\u51b3\u65b9\u6848\u3002", "motivation": "\u5728\u975e\u5783\u573e\u6536\u96c6\u7f16\u7a0b\u8bed\u8a00\u4e2d\uff0c\u5b89\u5168\u5185\u5b58\u56de\u6536\u5bf9\u4e8e\u4e50\u89c2\u548c\u65e0\u9501\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u7684\u5185\u5b58\u5b89\u5168\u81f3\u5173\u91cd\u8981\u3002\u8bbe\u8ba1\u7406\u60f3\u7684\u5b89\u5168\u5185\u5b58\u56de\u6536\u7b97\u6cd5\u9762\u4e34\u591a\u4e2a\u6311\u6218\uff0c\u5305\u62ec\u5b9e\u73b0\u9ad8\u901f\u548c\u53ef\u6269\u5c55\u6027\u3001\u7a0b\u5e8f\u5458\u6613\u7528\u6027\u3001\u5e7f\u6cdb\u6570\u636e\u7ed3\u6784\u7684\u9002\u7528\u6027\u3001\u7ba1\u7406\u5ef6\u8fdf\u91ca\u653e\u5185\u5b58\u5bfc\u81f4\u7684\u5927\u5185\u5b58\u5360\u7528\uff0c\u4ee5\u53ca\u907f\u514d\u6570\u636e\u7ed3\u6784\u64cd\u4f5c\u7684\u4e0d\u5bf9\u79f0\u5f00\u9500\u3002", "method": "\u901a\u8fc7\u878d\u5408\u786c\u4ef6-\u8f6f\u4ef6\u6808\u5404\u5c42\u7684\u601d\u8def\u548c\u5de5\u5177\uff0c\u7814\u7a76\u591a\u79cd\u5b89\u5168\u5185\u5b58\u56de\u6536\u7b97\u6cd5\u8bbe\u8ba1\u65b9\u6cd5\u3002\u8fd9\u4e9b\u89e3\u51b3\u65b9\u6848\u8de8\u8d8a\u4f20\u7edf\u8fb9\u754c\uff0c\u5229\u7528\u4e0d\u540c\u5c42\u7ea7\u66b4\u9732\u7684\u7279\u6027\u3002", "result": "\u8bba\u6587\u63d0\u51fa\u4e86\u8de8\u5c42\u7ea7\u7684\u5b89\u5168\u5185\u5b58\u56de\u6536\u89e3\u51b3\u65b9\u6848\uff0c\u4f46\u5177\u4f53\u7ed3\u679c\u9700\u8981\u9605\u8bfb\u5b8c\u6574\u8bba\u6587\u624d\u80fd\u4e86\u89e3\u3002", "conclusion": "\u5b89\u5168\u5185\u5b58\u56de\u6536\u7b97\u6cd5\u7684\u8bbe\u8ba1\u9700\u8981\u7efc\u5408\u8003\u8651\u6027\u80fd\u3001\u6613\u7528\u6027\u548c\u5185\u5b58\u6548\u7387\uff0c\u901a\u8fc7\u786c\u4ef6-\u8f6f\u4ef6\u6808\u7684\u534f\u540c\u8bbe\u8ba1\u53ef\u4ee5\u5b9e\u73b0\u66f4\u597d\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
