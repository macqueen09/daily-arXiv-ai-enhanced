{"id": "2509.03318", "pdf": "https://arxiv.org/pdf/2509.03318", "abs": "https://arxiv.org/abs/2509.03318", "authors": ["Eduard Kamburjan", "Vidar Norstein Klungre", "Yuanwei Qu", "Rudolf Schlatte", "Egor V. Kostylev", "Martin Giese", "Einar Broch Johnsen"], "title": "Semantically Reflected Programs", "categories": ["cs.PL", "cs.LO"], "comment": null, "summary": "This paper addresses the dichotomy between the formalization of structural\nand the formalization of behavioral knowledge by means of semantically lifted\nprograms, which explore an intuitive connection between programs and knowledge\ngraphs. While knowledge graphs and ontologies are eminently useful to represent\nformal knowledge about a system's individuals and universals, programming\nlanguages are designed to describe the system's evolution. To address this\ndichotomy, we introduce a semantic lifting of the program states of an\nexecuting program into a knowledge graph, for an object-oriented programming\nlanguage. The resulting graph is exposed as a semantic reflection layer within\nthe programming language, allowing programmers to leverage knowledge of the\napplication domain in their programs. In this paper, we formalize semantic\nlifting and semantic reflection for a small programming language, SMOL, explain\nthe operational aspects of the language, and consider type correctness and\nvirtualisation for runtime program queries through the semantic reflection\nlayer. We illustrate semantic lifting and semantic reflection through a case\nstudy of geological modelling and discuss different applications of the\ntechnique. The language implementation is open source and available online.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u901a\u8fc7\u8bed\u4e49\u63d0\u5347\u6280\u672f\u89e3\u51b3\u7ed3\u6784\u6027\u77e5\u8bc6\u4e0e\u884c\u4e3a\u6027\u77e5\u8bc6\u7684\u4e8c\u5206\u6cd5\uff0c\u5c06\u7a0b\u5e8f\u6267\u884c\u72b6\u6001\u63d0\u5347\u4e3a\u77e5\u8bc6\u56fe\u8c31\uff0c\u4ece\u800c\u5728\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5b9e\u73b0\u8bed\u4e49\u53cd\u5c04\u5c42", "motivation": "\u89e3\u51b3\u77e5\u8bc6\u56fe\u8c31/\u672c\u4f53\u8bba\u4e0e\u7f16\u7a0b\u8bed\u8a00\u5728\u8868\u5f81\u7ed3\u6784\u6027\u77e5\u8bc6\u548c\u884c\u4e3a\u6027\u77e5\u8bc6\u65b9\u9762\u7684\u5206\u5272\uff0c\u8ba9\u7a0b\u5e8f\u5458\u80fd\u591f\u5728\u7a0b\u5e8f\u4e2d\u5229\u7528\u5e94\u7528\u9886\u57df\u77e5\u8bc6", "method": "\u4e3a\u9762\u5411\u5bf9\u8c61\u7f16\u7a0b\u8bed\u8a00\u5f15\u5165\u8bed\u4e49\u63d0\u5347\u6280\u672f\uff0c\u5c06\u7a0b\u5e8f\u6267\u884c\u72b6\u6001\u8f6c\u6362\u4e3a\u77e5\u8bc6\u56fe\u8c31\uff0c\u5e76\u5728SMOL\u5c0f\u578b\u7f16\u7a0b\u8bed\u8a00\u4e2d\u6b63\u5f0f\u5316\u8fd9\u4e00\u8fc7\u7a0b", "result": "\u5b9e\u73b0\u4e86\u8bed\u4e49\u53cd\u5c04\u5c42\uff0c\u652f\u6301\u8fd0\u884c\u65f6\u7a0b\u5e8f\u67e5\u8be2\uff0c\u5e76\u901a\u8fc7\u5730\u8d28\u5efa\u6a21\u6848\u4f8b\u5c55\u793a\u4e86\u8be5\u6280\u672f\u7684\u5e94\u7528", "conclusion": "\u8bed\u4e49\u63d0\u5347\u6280\u672f\u6709\u6548\u6d89\u53ca\u4e86\u7a0b\u5e8f\u4e0e\u77e5\u8bc6\u56fe\u8c31\u4e4b\u95f4\u7684\u76f8\u5173\u6027\uff0c\u4e3a\u7f16\u7a0b\u8bed\u8a00\u63d0\u4f9b\u4e86\u65b0\u7684\u8bed\u4e49\u53cd\u5c04\u80fd\u529b\uff0c\u5f00\u6e90\u5b9e\u73b0\u53ef\u7528"}}
{"id": "2509.02958", "pdf": "https://arxiv.org/pdf/2509.02958", "abs": "https://arxiv.org/abs/2509.02958", "authors": ["Kaustuv Mukherji", "Jaikrishna Manojkumar Patil", "Dyuman Aditya", "Paulo Shakarian", "Devendra Parkar", "Lahari Pokala", "Clark Dorman", "Gerardo I. Simari"], "title": "Lattice Annotated Temporal (LAT) Logic for Non-Markovian Reasoning", "categories": ["cs.LO", "cs.AI", "cs.LG", "cs.PL"], "comment": null, "summary": "We introduce Lattice Annotated Temporal (LAT) Logic, an extension of\nGeneralized Annotated Logic Programs (GAPs) that incorporates temporal\nreasoning and supports open-world semantics through the use of a lower lattice\nstructure. This logic combines an efficient deduction process with temporal\nlogic programming to support non-Markovian relationships and open-world\nreasoning capabilities. The open-world aspect, a by-product of the use of the\nlower-lattice annotation structure, allows for efficient grounding through a\nSkolemization process, even in domains with infinite or highly diverse\nconstants.\n  We provide a suite of theoretical results that bound the computational\ncomplexity of the grounding process, in addition to showing that many of the\nresults on GAPs (using an upper lattice) still hold with the lower lattice and\ntemporal extensions (though different proof techniques are required). Our\nopen-source implementation, PyReason, features modular design, machine-level\noptimizations, and direct integration with reinforcement learning environments.\nEmpirical evaluations across multi-agent simulations and knowledge graph tasks\ndemonstrate up to three orders of magnitude speedup and up to five orders of\nmagnitude memory reduction while maintaining or improving task performance.\nAdditionally, we evaluate LAT Logic's value in reinforcement learning\nenvironments as a non-Markovian simulator, achieving up to three orders of\nmagnitude faster simulation with improved agent performance, including a 26%\nincrease in win rate due to capturing richer temporal dependencies. These\nresults highlight LAT Logic's potential as a unified, extensible framework for\nopen-world temporal reasoning in dynamic and uncertain environments. Our\nimplementation is available at: pyreason.syracuse.edu.", "AI": {"tldr": "LAT\u903b\u8f91\u662f\u4e00\u79cd\u6269\u5c55\u7684\u6ce2\u6c0f\u6ce8\u91ca\u903b\u8f91\u7a0b\u5e8f\uff0c\u7ed3\u5408\u65f6\u6001\u63a8\u7406\u548c\u5f00\u653e\u4e16\u754c\u8bed\u4e49\uff0c\u901a\u8fc7\u4e0b\u683c\u7ed3\u6784\u5b9e\u73b0\u9ad8\u6548\u5730\u57f9\u57fa\u548c\u65f6\u6001\u4f9d\u8d56\u5173\u7cfb\u5904\u7406\u3002", "motivation": "\u4e3a\u4e86\u5728\u52a8\u6001\u548c\u4e0d\u786e\u5b9a\u73af\u5883\u4e2d\u652f\u6301\u5f00\u653e\u4e16\u754c\u8bed\u4e49\u7684\u65f6\u6001\u63a8\u7406\uff0c\u5145\u5206\u5229\u7528\u683c\u7ed3\u6784\u6765\u5904\u7406\u975e\u9a6c\u5c14\u53ef\u592b\u5173\u7cfb\u548c\u65e0\u9650\u57df\u95f4\u95ee\u9898\u3002", "method": "\u6269\u5c55\u4e86\u6cdb\u5316\u6ce2\u6c0f\u6ce8\u91ca\u903b\u8f91\u7a0b\u5e8f(GAPs)\uff0c\u7ed3\u5408\u4e0b\u683c\u7ed3\u6784\u652f\u6301\u5f00\u653e\u4e16\u754c\u8bed\u4e49\uff0c\u901a\u8fc7Skolemization\u8fc7\u7a0b\u5b9e\u73b0\u9ad8\u6548\u5730\u57f9\u57fa\u3002\u5f00\u53d1\u4e86\u5f00\u6e90\u5b9e\u73b0PyReason\uff0c\u5177\u6709\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u673a\u5668\u7ea7\u4f18\u5316\u3002", "result": "\u5728\u591a\u81ea\u6e38\u6a21\u62df\u548c\u77e5\u8bc6\u56fe\u4efb\u52a1\u4e2d\u5b9e\u73b0\u4e86\u8fd0\u884c\u901f\u5ea6\u63d0\u53473\u4e2a\u6570\u91cf\u7ea7\u548c\u5185\u5b58\u4f7f\u7528\u51cf\u5c115\u4e2a\u6570\u91cf\u7ea7\uff0c\u4efb\u52a1\u6027\u80fd\u4fdd\u6301\u6216\u63d0\u5347\u3002\u5728\u5f3a\u5316\u5b66\u4e60\u73af\u5883\u4e2d\u4f5c\u4e3a\u975e\u9a6c\u5c14\u53ef\u592b\u6a21\u62df\u5668\uff0c\u6a21\u62df\u901f\u5ea6\u63d0\u53473\u4e2a\u6570\u91cf\u7ea7\uff0c\u5e76\u5e26\u676526%\u80dc\u5229\u7387\u63d0\u5347\u3002", "conclusion": "LAT\u903b\u8f91\u4f5c\u4e3a\u4e00\u4e2a\u7edf\u4e00\u3001\u53ef\u6269\u5c55\u7684\u6846\u67b6\uff0c\u5728\u52a8\u6001\u548c\u4e0d\u786e\u5b9a\u73af\u5883\u4e2d\u5c55\u793a\u4e86\u5f00\u653e\u4e16\u754c\u65f6\u6001\u63a8\u7406\u7684\u5f3a\u5927\u6f5c\u529b\u3002"}}
