{"id": "2509.05504", "pdf": "https://arxiv.org/pdf/2509.05504", "abs": "https://arxiv.org/abs/2509.05504", "authors": ["Karl Aaron Rudkowski", "Sallar Ahmadi-Pour", "Rolf Drechsler"], "title": "Comparing Methods for the Cross-Level Verification of SystemC Peripherals with Symbolic Execution", "categories": ["cs.PL", "cs.AR"], "comment": null, "summary": "Virtual Prototypes (VPs) are important tools in modern hardware development.\nAt high abstractions, they are often implemented in SystemC and offer early\nanalysis of increasingly complex designs. These complex designs often combine\none or more processors, interconnects, and peripherals to perform tasks in\nhardware or interact with the environment. Verifying these subsystems is a\nwell-suited task for VPs, as they allow reasoning across different abstraction\nlevels. While modern verification techniques like symbolic execution can be\nseamlessly integrated into VP-based workflows, they require modifications in\nthe SystemC kernel. Hence, existing approaches therefore modify and replace the\nSystemC kernel, or ignore the opportunity of cross-level scenarios completely,\nand would not allow focusing on special challenges of particular subsystems\nlike peripherals. We propose CrosSym and SEFOS, two opposing approaches for a\nversatile symbolic execution of peripherals. CrosSym modifies the SystemC\nkernel, while SEFOS instead modifies a modern symbolic execution engine. Our\nextensive evaluation applies our tools to various peripherals on different\nlevels of abstractions. Both tools extensive sets of features are demonstrated\nfor (1) different verification scenarios, and (2) identifying 300+ mutants. In\ncomparison with each other, SEFOS convinces with the unmodified SystemC kernel\nand peripheral, while CrosSym offers slightly better runtime and memory usage.\nIn comparison to the state-of-the-art, that is limited to Transaction Level\nModelling (TLM), our tools offered comparable runtime, while enabling\ncross-level verification with symbolic execution.", "AI": {"tldr": "\u63d0\u51fa\u4e86CrosSym\u548cSEFOS\u4e24\u79cd\u865a\u62df\u539f\u578b\u7b26\u53f7\u6267\u884c\u65b9\u6cd5\uff0c\u5206\u522b\u901a\u8fc7\u4fee\u6539SystemC\u5185\u6838\u548c\u7b26\u53f7\u6267\u884c\u5f15\u64ce\u6765\u5b9e\u73b0\u5916\u8bbe\u7684\u8de8\u5c42\u7ea7\u9a8c\u8bc1", "motivation": "\u73b0\u4ee3\u786c\u4ef6\u5f00\u53d1\u4e2d\u865a\u62df\u539f\u578b(VP)\u5728SystemC\u4e2d\u5b9e\u73b0\uff0c\u4f46\u73b0\u6709\u7b26\u53f7\u6267\u884c\u65b9\u6cd5\u9700\u8981\u4fee\u6539SystemC\u5185\u6838\u6216\u5ffd\u7565\u8de8\u5c42\u7ea7\u9a8c\u8bc1\u673a\u4f1a\uff0c\u65e0\u6cd5\u4e13\u6ce8\u4e8e\u5916\u8bbe\u7b49\u7279\u5b9a\u5b50\u7cfb\u7edf\u7684\u7279\u6b8a\u6311\u6218", "method": "CrosSym\u4fee\u6539SystemC\u5185\u6838\uff0cSEFOS\u4fee\u6539\u73b0\u4ee3\u7b26\u53f7\u6267\u884c\u5f15\u64ce\uff0c\u4e24\u79cd\u65b9\u6cd5\u90fd\u652f\u6301\u5916\u8bbe\u7684\u591a\u62bd\u8c61\u5c42\u7ea7\u7b26\u53f7\u6267\u884c", "result": "\u5728\u591a\u79cd\u5916\u8bbe\u548c\u4e0d\u540c\u62bd\u8c61\u5c42\u7ea7\u4e0a\u8fdb\u884c\u4e86\u5e7f\u6cdb\u8bc4\u4f30\uff0c\u5c55\u793a\u4e86\u4e24\u79cd\u5de5\u5177\u7684\u529f\u80fd\uff1a(1)\u4e0d\u540c\u9a8c\u8bc1\u573a\u666f\uff1b(2)\u8bc6\u522b300+\u53d8\u5f02\u4f53\u3002SEFOS\u4fdd\u6301\u672a\u4fee\u6539\u7684SystemC\u5185\u6838\u548c\u5916\u8bbe\uff0cCrosSym\u5728\u8fd0\u884c\u65f6\u548c\u5185\u5b58\u4f7f\u7528\u4e0a\u7a0d\u597d", "conclusion": "\u4e0e\u4ec5\u9650\u4e8e\u4e8b\u52a1\u7ea7\u5efa\u6a21(TLM)\u7684\u6700\u5148\u8fdb\u6280\u672f\u76f8\u6bd4\uff0c\u6211\u4eec\u7684\u5de5\u5177\u63d0\u4f9b\u4e86\u76f8\u5f53\u7684\u8fd0\u884c\u65f6\u6027\u80fd\uff0c\u540c\u65f6\u5b9e\u73b0\u4e86\u7b26\u53f7\u6267\u884c\u7684\u8de8\u5c42\u7ea7\u9a8c\u8bc1"}}
{"id": "2509.05586", "pdf": "https://arxiv.org/pdf/2509.05586", "abs": "https://arxiv.org/abs/2509.05586", "authors": ["Lee Zheng Han", "Umang Mathur"], "title": "Fixed Parameter Tractable Linearizability Monitoring for Stack, Queue and Anagram Agnostic Data Types", "categories": ["cs.PL", "cs.CC"], "comment": null, "summary": "Verifying linearizability of concurrent data structures is NP-hard, even for\nsimple types. We present fixed-parameter tractable algorithms for monitoring\nstacks, queues, and anagram-agnostic data types (AADTs), parameterized by the\nmaximum concurrency. Our approach leverages frontier graphs and partition\nstates to bound the search space. For AADTs, equivalence of linearizations\nenables monitoring in log-linear time. For stacks, we introduce a grammar-based\nmethod with a sub-cubic reduction to matrix multiplication, and for queues, a\nsplit-sequence transition system supporting efficient dynamic programming.\nThese results unify tractability guarantees for both order-sensitive and\nanagram-agnostic data types under bounded concurrency.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u9488\u5bf9\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u6027\u5316\u9a8c\u8bc1\u7684\u56fa\u5b9a\u53c2\u6570\u53ef\u5904\u7406\u7b97\u6cd5\uff0c\u9488\u5bf9\u6808\u3001\u961f\u5217\u548c\u5b57\u8c1c\u65e0\u5173\u6570\u636e\u7c7b\u578b\uff0c\u53c2\u6570\u5316\u4e3a\u6700\u5927\u5e76\u53d1\u5ea6", "motivation": "\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u7684\u7ebf\u6027\u5316\u9a8c\u8bc1\u662fNP\u96be\u95ee\u9898\uff0c\u5373\u4f7f\u5bf9\u4e8e\u7b80\u5355\u7c7b\u578b\u4e5f\u662f\u5982\u6b64\uff0c\u9700\u8981\u5f00\u53d1\u9ad8\u6548\u7684\u9a8c\u8bc1\u65b9\u6cd5", "method": "\u5229\u7528\u524d\u6cbf\u56fe\u548c\u5206\u533a\u72b6\u6001\u6765\u9650\u5236\u641c\u7d22\u7a7a\u95f4\uff0c\u5bf9\u4e8e\u5b57\u8c1c\u65e0\u5173\u6570\u636e\u7c7b\u578b\u4f7f\u7528\u7ebf\u6027\u5316\u7b49\u4ef7\u6027\uff0c\u5bf9\u4e8e\u6808\u4f7f\u7528\u57fa\u4e8e\u6587\u6cd5\u7684\u65b9\u6cd5\u548c\u77e9\u9635\u4e58\u6cd5\u7ea6\u7b80\uff0c\u5bf9\u4e8e\u961f\u5217\u4f7f\u7528\u5206\u5272\u5e8f\u5217\u8f6c\u79fb\u7cfb\u7edf\u548c\u52a8\u6001\u89c4\u5212", "result": "\u5728\u6709\u9650\u5e76\u53d1\u5ea6\u4e0b\u5b9e\u73b0\u4e86\u5bf9\u6570\u7ebf\u6027\u65f6\u95f4\u5230\u6b21\u7acb\u65b9\u65f6\u95f4\u7684\u76d1\u63a7\u590d\u6742\u5ea6", "conclusion": "\u8fd9\u4e9b\u7ed3\u679c\u7edf\u4e00\u4e86\u5728\u6709\u754c\u5e76\u53d1\u4e0b\u5bf9\u987a\u5e8f\u654f\u611f\u548c\u5b57\u8c1c\u65e0\u5173\u6570\u636e\u7c7b\u578b\u7684\u53ef\u5904\u7406\u6027\u4fdd\u8bc1"}}
{"id": "2509.06724", "pdf": "https://arxiv.org/pdf/2509.06724", "abs": "https://arxiv.org/abs/2509.06724", "authors": ["Florian Kohn", "Arthur Correnson", "Jan Baumeister", "Bernd Finkbeiner"], "title": "Pacing Types: Safe Monitoring of Asynchronous Streams", "categories": ["cs.PL"], "comment": null, "summary": "Stream-based monitoring is a real-time safety assurance mechanism for complex\ncyber-physical systems such as unmanned aerial vehicles. In this context, a\nmonitor aggregates streams of input data from sensors and other sources to give\nreal-time statistics and assessments of the system's health. Since monitors are\nsafety-critical components, it is crucial to ensure that they are free of\npotential runtime errors. One of the central challenges in designing reliable\nstream-based monitors is to deal with the asynchronous nature of data streams:\nin concrete applications, the different sensors being monitored produce values\nat different speeds, and it is the monitor's responsibility to correctly react\nto the asynchronous arrival of different streams of values. To ease this\nprocess, modern frameworks for stream-based monitoring such as RTLola feature\nan expressive specification language that allows to finely specify data\nsynchronization policies. While this feature dramatically simplifies the design\nof monitors, it can also lead to subtle runtime errors. To mitigate this issue,\nthis paper presents pacing types, a novel type system implemented in RTLola to\nensure that monitors for asynchronous streams are well-behaved at runtime. We\nformalize the essence of pacing types for a core fragment of RTLola, and\npresent a soundness proof of the pacing type system using a new logical\nrelation.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7c7b\u578b\u7cfb\u7edf\"pacing types\"\uff0c\u7528\u4e8e\u786e\u4fdd\u5f02\u6b65\u6570\u636e\u6d41\u76d1\u63a7\u5668\u7684\u8fd0\u884c\u65f6\u5b89\u5168\u6027\uff0c\u5145\u5206\u5229\u7528RTLola\u6846\u67b6\u7684\u540c\u6b65\u5316\u7b56\u7565\u89c4\u8303\u529f\u80fd\u3002", "motivation": "\u6d41\u5f0f\u76d1\u63a7\u662f\u590d\u6742\u7cfb\u7edf\u7684\u5b9e\u65f6\u5b89\u5168\u4fdd\u969c\u673a\u5236\uff0c\u76d1\u63a7\u5668\u672c\u8eab\u5b89\u5168\u6027\u81f3\u5173\u91cd\u8981\u3002\u5f02\u6b65\u6570\u636e\u6d41\u7684\u540c\u6b65\u95ee\u9898\u662f\u8bbe\u8ba1\u53ef\u9760\u76d1\u63a7\u5668\u7684\u6838\u5fc3\u6311\u6218\uff0c\u867d\u7136RTLola\u6846\u67b6\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u540c\u6b65\u5316\u89c4\u8303\u80fd\u529b\uff0c\u4f46\u4e5f\u5f15\u5165\u4e86\u7ec6\u5fae\u7684\u8fd0\u884c\u65f6\u9519\u8bef\u98ce\u9669\u3002", "method": "\u8bba\u6587\u63d0\u51fa\u4e86pacing types\u7c7b\u578b\u7cfb\u7edf\uff0c\u5b9e\u73b0\u5728RTLola\u6846\u67b6\u4e2d\u3002\u5bf9RTLola\u7684\u6838\u5fc3\u6bb5\u843d\u8fdb\u884c\u4e86\u5f62\u5f0f\u5316\u5b9a\u4e49\uff0c\u5e76\u4f7f\u7528\u65b0\u7684\u903b\u8f91\u5173\u7cfb\u5b8c\u6210\u4e86\u7c7b\u578b\u7cfb\u7edf\u7684\u5b8c\u5907\u6027\u8bc1\u660e\u3002", "result": "\u5f00\u53d1\u4e86\u80fd\u591f\u786e\u4fdd\u5f02\u6b65\u6570\u636e\u6d41\u76d1\u63a7\u5668\u8fd0\u884c\u65f6\u884c\u4e3a\u826f\u597d\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u901a\u8fc7\u5f62\u5f0f\u5316\u9a8c\u8bc1\u548c\u5b8c\u5907\u6027\u8bc1\u660e\u786e\u4fdd\u4e86\u65b9\u6cd5\u7684\u53ef\u9760\u6027\u3002", "conclusion": "pacing types\u7c7b\u578b\u7cfb\u7edf\u6709\u6548\u89e3\u51b3\u4e86\u5f02\u6b65\u6570\u636e\u6d41\u76d1\u63a7\u5668\u7684\u8fd0\u884c\u65f6\u5b89\u5168\u6027\u95ee\u9898\uff0c\u4e3a\u6784\u5efa\u53ef\u9760\u7684\u5b9e\u65f6\u5b89\u5168\u4fdd\u969c\u673a\u5236\u63d0\u4f9b\u4e86\u91cd\u8981\u6280\u672f\u652f\u6491\u3002"}}
{"id": "2509.06752", "pdf": "https://arxiv.org/pdf/2509.06752", "abs": "https://arxiv.org/abs/2509.06752", "authors": ["Amir M. Ben-Amram", "Samir Genaim", "Jo\u00ebl Ouaknine", "James Worrell"], "title": "Termination Analysis of Linear-Constraint Programs", "categories": ["cs.PL", "cs.LO"], "comment": null, "summary": "This Survey provides an overview of techniques in termination analysis for\nprograms with numerical variables and transitions defined by linear\nconstraints. This subarea of program analysis is challenging due to the\nexistence of undecidable problems, and this Survey systematically explores\napproaches that mitigate this inherent difficulty. These include foundational\ndecidability results, the use of ranking functions, and disjunctive\nwell-founded transition invariants. The Survey also discusses non-termination\nwitnesses, used to prove that a program will not halt. We examine the\nalgorithmic and complexity aspects of these methods, showing how different\napproaches offer a trade-off between expressive power and computational\ncomplexity. The Survey does not discuss how termination analysis is performed\non real-world programming languages, nor does it consider more expressive\nabstract models that include non-linear arithmetic, probabilistic choice, or\nterm rewriting systems.", "AI": {"tldr": "\u8fd9\u7bc7\u8c03\u67e5\u6027\u8bba\u6587\u7cfb\u7edf\u8bc4\u4f30\u4e86\u5e26\u6570\u503c\u53d8\u91cf\u548c\u7ebf\u6027\u7ea6\u675f\u8fc7\u6e21\u7cfb\u7edf\u7684\u7a0b\u5e8f\u7ec8\u6b62\u6027\u5206\u6790\u6280\u672f\uff0c\u5305\u62ec\u57fa\u7840\u53ef\u51b3\u5b9a\u6027\u7406\u8bba\u3001\u6392\u5e8f\u51fd\u6570\u548c\u5206\u79bb\u826f\u57fa\u8fc7\u6e21\u4e0d\u53d8\u91cf\u7b49\u65b9\u6cd5\uff0c\u540c\u65f6\u4e5f\u8ba8\u8bba\u4e86\u975e\u7ec8\u6b62\u6027\u8bc1\u636e\u3002", "motivation": "\u7a0b\u5e8f\u7ec8\u6b62\u6027\u5206\u6790\u5b58\u5728\u672c\u8d28\u4e0a\u7684\u4e0d\u53ef\u51b3\u5b9a\u6027\u95ee\u9898\uff0c\u9700\u8981\u7cfb\u7edf\u6027\u5730\u63a2\u7d22\u53ef\u4ee5\u51cf\u8f7b\u8fd9\u79cd\u56f0\u96be\u7684\u65b9\u6cd5\u3002", "method": "\u8c03\u67e5\u91c7\u7528\u4e86\u591a\u79cd\u6280\u672f\u8fdb\u884c\u7cfb\u7edf\u5206\u6790\uff1a\u57fa\u7840\u53ef\u51b3\u5b9a\u6027\u7406\u8bba\u7814\u7a76\u3001\u6392\u5e8f\u51fd\u6570\u65b9\u6cd5\u3001\u5206\u79bb\u826f\u57fa\u8fc7\u6e21\u4e0d\u53d8\u91cf\u7b49\uff0c\u540c\u65f6\u4e5f\u8003\u5bdf\u4e86\u975e\u7ec8\u6b62\u6027\u8bc1\u636e\u7684\u6784\u5efa\u3002", "result": "\u7814\u7a76\u5c55\u793a\u4e86\u4e0d\u540c\u65b9\u6cd5\u5728\u8868\u8fbe\u80fd\u529b\u4e0e\u8ba1\u7b97\u590d\u6742\u6027\u4e4b\u95f4\u7684\u627f\u8d5e\u5173\u7cfb\uff0c\u63d0\u4f9b\u4e86\u7b97\u6cd5\u548c\u590d\u6742\u6027\u65b9\u9762\u7684\u6df1\u5165\u5206\u6790\u3002", "conclusion": "\u8fd9\u4efd\u8c03\u67e5\u4e3a\u7ebf\u6027\u7ea6\u675f\u7a0b\u5e8f\u7684\u7ec8\u6b62\u6027\u5206\u6790\u63d0\u4f9b\u4e86\u7cfb\u7edf\u6027\u7684\u6280\u672f\u6982\u89c8\uff0c\u4f46\u5e76\u672a\u6d89\u53ca\u5b9e\u9645\u7f16\u7a0b\u8bed\u8a00\u6216\u66f4\u590d\u6742\u7684\u975e\u7ebf\u6027\u3001\u6982\u7387\u6027\u6a21\u578b\u3002"}}
{"id": "2509.06794", "pdf": "https://arxiv.org/pdf/2509.06794", "abs": "https://arxiv.org/abs/2509.06794", "authors": ["Shihan Fang", "Hongzheng Chen", "Niansong Zhang", "Jiajie Li", "Han Meng", "Adrian Liu", "Zhiru Zhang"], "title": "Dato: A Task-Based Programming Model for Dataflow Accelerators", "categories": ["cs.PL", "cs.AR", "cs.LG"], "comment": null, "summary": "Recent deep learning workloads increasingly push computational demand beyond\nwhat current memory systems can sustain, with many kernels stalling on data\nmovement rather than computation. While modern dataflow accelerators\nincorporate on-chip streaming to mitigate off-chip bandwidth limitations,\nexisting programming models struggle to harness these capabilities effectively.\nLow-level interfaces provide fine-grained control but impose significant\ndevelopment overhead, whereas high-level tile-based languages abstract away\ncommunication details, restricting optimization and forcing compilers to\nreconstruct the intended dataflow. We present Dato, a Python-embedded,\ntask-based programming model for dataflow accelerators that elevates data\ncommunication and sharding to first-class type constructs. Developers write\nprograms as a graph of tasks connected via explicit stream types, with sharded\ninputs specified using layout types. These tasks are first mapped virtually\nonto the accelerator's spatial fabric, and the compiler then generates a\nphysical mapping that respects hardware constraints. Experimental results on\nboth AMD Ryzen AI NPU and Alveo FPGA devices demonstrate that Dato achieves\nhigh performance while significantly reducing the burden of writing optimized\ncode. On the NPU, Dato attains up to 84% hardware utilization for GEMM and\ndelivers a 2.81x speedup on attention kernels compared to a state-of-the-art\ncommercial framework. On the FPGA, Dato surpasses leading frameworks in\nperformance when generating custom systolic arrays, achieving 98% of the\ntheoretical peak performance.", "AI": {"tldr": "Dato\u662f\u4e00\u4e2aPython\u5d4c\u5165\u5f0f\u4efb\u52a1\u7f16\u7a0b\u6a21\u578b\uff0c\u901a\u8fc7\u5c06\u6570\u636e\u901a\u4fe1\u548c\u5206\u7247\u4f5c\u4e3a\u4e00\u7b49\u7c7b\u578b\u6784\u9020\uff0c\u7b80\u5316\u6570\u636e\u6d41\u52a0\u901f\u5668\u7f16\u7a0b\uff0c\u5728NPU\u548cFPGA\u4e0a\u5b9e\u73b0\u9ad8\u6027\u80fd\u548c\u9ad8\u786c\u4ef6\u5229\u7528\u7387", "motivation": "\u73b0\u4ee3\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u5bf9\u8ba1\u7b97\u9700\u6c42\u65e5\u76ca\u589e\u957f\uff0c\u4f46\u73b0\u6709\u7f16\u7a0b\u6a21\u578b\u96be\u4ee5\u6709\u6548\u5229\u7528\u6570\u636e\u6d41\u52a0\u901f\u5668\u7684\u7247\u4e0a\u6d41\u5904\u7406\u80fd\u529b\uff0c\u4f4e\u5c42\u63a5\u53e3\u5f00\u53d1\u6210\u672c\u9ad8\uff0c\u9ad8\u5c42\u8bed\u8a00\u53c8\u9650\u5236\u4e86\u4f18\u5316\u7a7a\u95f4", "method": "\u63d0\u51fa\u4efb\u52a1\u56fe\u7f16\u7a0b\u6a21\u578b\uff0c\u901a\u8fc7\u663e\u5f0f\u6d41\u7c7b\u578b\u8fde\u63a5\u4efb\u52a1\uff0c\u4f7f\u7528\u5e03\u5c40\u7c7b\u578b\u6307\u5b9a\u5206\u7247\u8f93\u5165\uff0c\u5148\u5728\u7a7a\u95f4\u7ed3\u6784\u4e0a\u8fdb\u884c\u865a\u62df\u6620\u5c04\uff0c\u7136\u540e\u7f16\u8bd1\u5668\u751f\u6210\u7b26\u5408\u786c\u4ef6\u7ea6\u675f\u7684\u7269\u7406\u6620\u5c04", "result": "\u5728AMD Ryzen AI NPU\u4e0a\u5b9e\u73b084%\u7684GEMM\u786c\u4ef6\u5229\u7528\u7387\uff0c\u6ce8\u610f\u529b\u6838\u51fd\u6570\u76f8\u6bd4\u6700\u5148\u8fdb\u5546\u4e1a\u6846\u67b6\u63d0\u901f2.81\u500d\uff1b\u5728FPGA\u4e0a\u751f\u6210\u5b9a\u5236\u8109\u52a8\u9635\u5217\u65f6\u8fbe\u5230\u7406\u8bba\u5cf0\u503c\u6027\u80fd\u768498%", "conclusion": "Dato\u7f16\u7a0b\u6a21\u578b\u80fd\u591f\u663e\u8457\u964d\u4f4e\u7f16\u5199\u4f18\u5316\u4ee3\u7801\u7684\u8d1f\u62c5\uff0c\u540c\u65f6\u5728\u6570\u636e\u6d41\u52a0\u901f\u5668\u4e0a\u5b9e\u73b0\u9ad8\u6027\u80fd\u8ba1\u7b97"}}
{"id": "2509.06845", "pdf": "https://arxiv.org/pdf/2509.06845", "abs": "https://arxiv.org/abs/2509.06845", "authors": ["Tom Lauwaerts", "Maarten Steevens", "Christophe Scholliers"], "title": "MIO: Multiverse Debugging in the Face of Input/Output -- Extended Version with Additional Appendices", "categories": ["cs.PL", "cs.SE"], "comment": "This extended version provides auxiliary material to the article of\n  the same title that will appear in the ACM Digital Library as part of the\n  PACMPL issue for OOPSLA 2025", "summary": "Debugging non-deterministic programs on microcontrollers is notoriously\nchallenging, especially when bugs manifest in unpredictable, input-dependent\nexecution paths. A recent approach, called multiverse debugging, makes it\neasier to debug non-deterministic programs by allowing programmers to explore\nall potential execution paths. Current multiverse debuggers enable both forward\nand backward traversal of program paths, and some facilitate jumping to any\npreviously visited states, potentially branching into alternative execution\npaths within the state space.\n  Unfortunately, debugging programs that involve input/output operations using\nexisting multiverse debuggers can reveal inaccessible program states, i.e.\nstates which are not encountered during regular execution. This can\nsignificantly hinder the debugging process, as the programmer may spend\nsubstantial time exploring and examining inaccessible program states, or worse,\nmay mistakenly assume a bug is present in the code, when in fact, the issue is\ncaused by the debugger.\n  This paper presents a novel approach to multiverse debugging, which can\naccommodate a broad spectrum of input/output operations. We provide the\nsemantics of our approach and prove the correctness of our debugger, ensuring\nthat despite having support for a wide range of input/output operations the\ndebugger will only explore those program states which can be reached during\nregular execution.\n  We have developed a prototype, called MIO, leveraging the WARDuino\nWebAssembly virtual machine to demonstrate the feasibility and efficiency of\nour techniques. As a demonstration of the approach we highlight a color dial\nbuilt with a Lego Mindstorms motor, and color sensor, providing a tangible\nexample of how our approach enables multiverse debugging for programs running\non an STM32 microcontroller.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u591a\u5b87\u5b99\u8c03\u8bd5\u65b9\u6cd5MIO\uff0c\u89e3\u51b3\u4e86\u5fae\u63a7\u5236\u5668\u4e0a\u975e\u786e\u5b9a\u6027\u7a0b\u5e8f\u8c03\u8bd5\u4e2d\u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u5bfc\u81f4\u65e0\u6cd5\u8bbf\u95ee\u7a0b\u5e8f\u72b6\u6001\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u591a\u5b87\u5b99\u8c03\u8bd5\u5668\u5728\u5904\u7406\u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u65f6\u4f1a\u5bfc\u81f4\u7a0b\u5e8f\u5458\u63a2\u7d22\u5230\u65e0\u6cd5\u8fbe\u5230\u7684\u7a0b\u5e8f\u72b6\u6001\uff0c\u8fd9\u4f1a\u8d28\u91cf\u8c03\u8bd5\u8fc7\u7a0b\u5e76\u53ef\u80fd\u5bfc\u81f4\u8bef\u5224\u7a0b\u5e8f\u9519\u8bef\u3002", "method": "\u8bba\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u591a\u5b87\u5b99\u8c03\u8bd5\u65b9\u6cd5\uff0c\u80fd\u591f\u652f\u6301\u5e7f\u6cdb\u7684\u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u3002\u7814\u7a76\u4eba\u5458\u63d0\u4f9b\u4e86\u8be5\u65b9\u6cd5\u7684\u8bed\u4e49\u5b9a\u4e49\uff0c\u5e76\u8bc1\u660e\u4e86\u8c03\u8bd5\u5668\u7684\u6b63\u786e\u6027\u3002\u5f00\u53d1\u4e86\u539f\u578b\u7cfb\u7edfMIO\uff0c\u57fa\u4e8eWARDuino WebAssembly\u865a\u62df\u673a\u5b9e\u73b0\u3002", "result": "MIO\u8c03\u8bd5\u5668\u786e\u4fdd\u53ea\u4f1a\u63a2\u7d22\u5728\u6b63\u5e38\u6267\u884c\u4e2d\u53ef\u8fbe\u5230\u7684\u7a0b\u5e8f\u72b6\u6001\uff0c\u907f\u514d\u4e86\u65e0\u6cd5\u8bbf\u95ee\u72b6\u6001\u7684\u95ee\u9898\u3002\u901a\u8fc7\u4e00\u4e2aLego Mindstorms\u989c\u8272\u8c03\u8282\u5668\u6848\u4f8b\u9a8c\u8bc1\u4e86\u8be5\u65b9\u6cd5\u5728STM32\u5fae\u63a7\u5236\u5668\u4e0a\u7684\u53ef\u884c\u6027\u548c\u6548\u7387\u3002", "conclusion": "\u8be5\u7814\u7a76\u63d0\u4f9b\u4e86\u4e00\u79cd\u80fd\u591f\u6709\u6548\u5904\u7406\u8f93\u5165/\u8f93\u51fa\u64cd\u4f5c\u7684\u591a\u5b87\u5b99\u8c03\u8bd5\u65b9\u6cd5\uff0c\u89e3\u51b3\u4e86\u5fae\u63a7\u5236\u5668\u4e0a\u975e\u786e\u5b9a\u6027\u7a0b\u5e8f\u8c03\u8bd5\u7684\u5173\u952e\u6311\u6218\uff0c\u4e3a\u5fae\u63a7\u5236\u5668\u7a0b\u5e8f\u8c03\u8bd5\u63d0\u4f9b\u4e86\u66f4\u52a0\u53ef\u9760\u7684\u5de5\u5177\u652f\u6301\u3002"}}
{"id": "2509.06872", "pdf": "https://arxiv.org/pdf/2509.06872", "abs": "https://arxiv.org/abs/2509.06872", "authors": ["Zachary Kent", "Ugur Y. Yavuz", "Siddhartha Jayanti", "Stephanie Balzer", "Guy Blelloch"], "title": "Mechanized Metatheory of Forward Reasoning for End-to-End Linearizability Proofs", "categories": ["cs.PL"], "comment": null, "summary": "In the past decade, many techniques have been developed to prove\nlinearizability, the gold standard of correctness for concurrent data\nstructures. Intuitively, linearizability requires that every operation on a\nconcurrent data structure appears to take place instantaneously, even when\ninterleaved with other operations. Most recently, Jayanti et al. presented the\nfirst sound and complete \"forward reasoning\" technique for proving\nlinearizability that relates the behavior of a concurrent data structure to a\nreference atomic data structure as time moves forward. This technique can be\nused to produce machine-checked proofs of linearizability in TLA+. However,\nwhile Jayanti et al.'s approach is shown to be sound and complete, a\nmechanization of this important metatheoretic result is still outstanding. As a\nresult, it is not possible to produce verified end-to-end proofs of\nlinearizability. To reduce the size of this trusted computing base, we\nformalize this forward reasoning technique and mechanize proofs of its\nsoundness and completeness in Rocq. As a case study, we use the approach to\nproduce a verified end-to-end proof of linearizability for a simple concurrent\nregister.", "AI": {"tldr": "\u672c\u6587\u5f62\u5f0f\u5316\u5e76\u673a\u68b0\u5316\u4e86Jayanti\u7b49\u4eba\u63d0\u51fa\u7684\u524d\u5411\u63a8\u7406\u7ebf\u6027\u5316\u8bc1\u660e\u6280\u672f\uff0c\u5728Rocq\u4e2d\u9a8c\u8bc1\u5176\u5b89\u5168\u6027\u548c\u5b8c\u5907\u6027\uff0c\u5e76\u901a\u8fc7\u5e76\u53d1\u5bc4\u5b58\u5668\u6848\u4f8b\u8fdb\u884c\u9a8c\u8bc1\u3002", "motivation": "\u867d\u7136Jayanti\u7b49\u4eba\u63d0\u51fa\u4e86\u7b2c\u4e00\u4e2a\u58f0\u97f3\u5b8c\u6574\u7684\u524d\u5411\u63a8\u7406\u7ebf\u6027\u5316\u8bc1\u660e\u6280\u672f\uff0c\u4f46\u5176\u91cd\u8981\u7684\u5f62\u5f0f\u5316\u7406\u8bba\u7ed3\u679c\u4ecd\u672a\u5f97\u5230\u673a\u68b0\u5316\u9a8c\u8bc1\uff0c\u5bfc\u81f4\u65e0\u6cd5\u751f\u6210\u9a8c\u8bc1\u7684\u7aef\u5230\u7aef\u7ebf\u6027\u5316\u8bc1\u660e\u3002", "method": "\u5728Rocq\u4e2d\u5f62\u5f0f\u5316\u524d\u5411\u63a8\u7406\u6280\u672f\uff0c\u673a\u68b0\u5316\u5176\u5b89\u5168\u6027\u548c\u5b8c\u5907\u6027\u8bc1\u660e\uff0c\u5e76\u4f7f\u7528\u8be5\u65b9\u6cd5\u4e3a\u7b80\u5355\u5e76\u53d1\u5bc4\u5b58\u5668\u751f\u6210\u9a8c\u8bc1\u7684\u7aef\u5230\u7aef\u7ebf\u6027\u5316\u8bc1\u660e\u3002", "result": "\u5b9e\u73b0\u4e86\u524d\u5411\u63a8\u7406\u6280\u672f\u7684\u5f62\u5f0f\u5316\u548c\u673a\u68b0\u5316\u9a8c\u8bc1\uff0c\u51cf\u5c11\u4e86\u53ef\u4fe1\u8ba1\u7b97\u57fa\u7840\u7684\u89c4\u6a21\uff0c\u5e76\u6210\u529f\u4e3a\u5e76\u53d1\u5bc4\u5b58\u5668\u751f\u6210\u4e86\u7aef\u5230\u7aef\u7684\u9a8c\u8bc1\u7ebf\u6027\u5316\u8bc1\u660e\u3002", "conclusion": "\u8be5\u5de5\u4f5c\u586b\u8865\u4e86\u524d\u5411\u63a8\u7406\u7ebf\u6027\u5316\u8bc1\u660e\u6280\u672f\u5f62\u5f0f\u5316\u9a8c\u8bc1\u7684\u7a7a\u767d\uff0c\u4e3a\u751f\u6210\u9a8c\u8bc1\u7684\u5e76\u53d1\u6570\u636e\u7ed3\u6784\u7ebf\u6027\u5316\u8bc1\u660e\u63d0\u4f9b\u4e86\u53ef\u9760\u57fa\u7840\u3002"}}
{"id": "2509.05462", "pdf": "https://arxiv.org/pdf/2509.05462", "abs": "https://arxiv.org/abs/2509.05462", "authors": ["Grigory Kondyrev", "David I. Spivak"], "title": "The compact double category $\\mathbf{Int}(\\mathbf{Poly}_*)$ models control flow and data transformations", "categories": ["math.CT", "cs.PL", "18M30, 18M10, 18M35, 18B20, 18M60", "D.1.7; D.3.3"], "comment": "28 pages including many diagrams", "summary": "Hasegawa showed that control flow in programming languages -- while loops and\nif-then-else statements -- can be modeled using traced cocartesian categories,\nsuch as the category $\\mathbf{Set}_*$ of pointed sets. In this paper we define\nan operad $\\mathscr{W}$ of wiring diagrams that provides syntax for categories\nwhose control flow moreover includes data transformations, including deleting,\nduplicating, permuting, and applying pre-specified functions to variables. In\nthe most basic version, the operad underlies $\\mathbf{Int}(\\mathbf{Poly}_*)$,\nwhere $\\mathbf{Int}(\\mathscr{T})$ denotes the free compact category on a traced\ncategory $\\mathscr{T}$, as defined by Joyal, Street, and Verity; to do so, we\nshow that $\\mathbf{Poly}_*$, as well as any multivariate version of it, is\ntraced. We show moreover that whenever $\\mathscr{T}$ is uniform -- a condition\nalso defined by Hasegawa and satisfied by $\\mathbf{Int}(\\mathscr{T})$ -- the\nresulting $\\mathbf{Int}$-construction extends to a double category\n$\\mathbb{I}\\mathbf{nt}(\\mathscr{T})$, which is compact in the sense of\nPatterson. Finally, we define a universal property of the double category\n$\\mathbb{I}\\mathbf{nt}(\\mathbf{Poly}_*)$ and\n$\\mathbb{I}\\mathbf{nt}(\\mathbf{Set}_*)$ by which one can track trajectories as\nthey move through the control flow associated to a wiring diagram.", "AI": {"tldr": "Error", "motivation": "Error", "method": "Error", "result": "Error", "conclusion": "Error"}}
