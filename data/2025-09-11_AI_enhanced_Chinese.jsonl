{"id": "2509.08182", "pdf": "https://arxiv.org/pdf/2509.08182", "abs": "https://arxiv.org/abs/2509.08182", "authors": ["Faruk Alpay", "Taylan Alpay"], "title": "XML Prompting as Grammar-Constrained Interaction: Fixed-Point Semantics, Convergence Guarantees, and Human-AI Protocols", "categories": ["cs.PL", "cs.AI", "cs.CL", "03B70, 06B23, 47H10, 68T27, 68T50", "I.2.7; I.2.8; F.4.1; F.4.3; H.5.2"], "comment": "7 pages, multiple XML prompts", "summary": "Structured prompting with XML tags has emerged as an effective way to steer\nlarge language models (LLMs) toward parseable, schema-adherent outputs in\nreal-world systems. We develop a logic-first treatment of XML prompting that\nunifies (i) grammar-constrained decoding, (ii) fixed-point semantics over\nlattices of hierarchical prompts, and (iii) convergent human-AI interaction\nloops. We formalize a complete lattice of XML trees under a refinement order\nand prove that monotone prompt-to-prompt operators admit least fixed points\n(Knaster-Tarski) that characterize steady-state protocols; under a task-aware\ncontraction metric on trees, we further prove Banach-style convergence of\niterative guidance. We instantiate these results with context-free grammars\n(CFGs) for XML schemas and show how constrained decoding guarantees\nwell-formedness while preserving task performance. A set of multi-layer\nhuman-AI interaction recipes demonstrates practical deployment patterns,\nincluding multi-pass \"plan $\\to$ verify $\\to$ revise\" routines and agentic tool\nuse. We provide mathematically complete proofs and tie our framework to recent\nadvances in grammar-aligned decoding, chain-of-verification, and programmatic\nprompting.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8eXML\u6807\u7b7e\u7684\u7ed3\u6784\u5316\u63d0\u793a\u903b\u8f91\u6846\u67b6\uff0c\u7edf\u4e00\u4e86\u8bed\u6cd5\u7ea6\u675f\u89e3\u7801\u3001\u5206\u5c42\u63d0\u793a\u7684\u56fa\u5b9a\u70b9\u8bed\u4e49\u4ee5\u53ca\u4eba\u673a\u4ea4\u4e92\u5faa\u73af\uff0c\u5e76\u63d0\u4f9b\u4e86\u6570\u5b66\u8bc1\u660e\u548c\u5b9e\u9645\u5e94\u7528\u6a21\u5f0f\u3002", "motivation": "\u7ed3\u6784\u5316\u63d0\u793a\u5728\u5f15\u5bfc\u5927\u8bed\u8a00\u6a21\u578b\u751f\u6210\u53ef\u89e3\u6790\u3001\u7b26\u5408\u6a21\u5f0f\u8981\u6c42\u7684\u8f93\u51fa\u65b9\u9762\u6548\u679c\u663e\u8457\uff0c\u4f46\u7f3a\u4e4f\u7edf\u4e00\u7684\u7406\u8bba\u6846\u67b6\u6765\u6574\u5408\u8bed\u6cd5\u7ea6\u675f\u89e3\u7801\u3001\u56fa\u5b9a\u70b9\u8bed\u4e49\u548c\u6536\u655b\u6027\u7684\u4eba\u673a\u4ea4\u4e92\u5faa\u73af\u3002", "method": "\u5f00\u53d1\u4e86\u57fa\u4e8eXML\u63d0\u793a\u7684\u903b\u8f91\u4f18\u5148\u5904\u7406\u65b9\u6cd5\uff0c\u5b9a\u4e49\u4e86XML\u6811\u7684\u5b8c\u6574\u683c\u7ed3\u6784\uff0c\u8bc1\u660e\u4e86\u5355\u8c03\u63d0\u793a\u7b97\u5b50\u7684\u6700\u5c0f\u56fa\u5b9a\u70b9\u5b58\u5728\u6027\uff0c\u5e76\u5b9e\u4f8b\u5316\u4e86\u4e0a\u4e0b\u6587\u65e0\u5173\u6587\u6cd5\u7684XML\u6a21\u5f0f\u7ea6\u675f\u89e3\u7801\u3002", "result": "\u5efa\u7acb\u4e86\u5b8c\u6574\u7684\u6570\u5b66\u7406\u8bba\u6846\u67b6\uff0c\u8bc1\u660e\u4e86\u5728\u7cbe\u5316\u5e8f\u4e0b\u7684\u6536\u655b\u6027\uff0c\u5c55\u793a\u4e86\u591a\u5c42\u4eba\u673a\u4ea4\u4e92\u6a21\u5f0f\uff08\u5982\u89c4\u5212\u2192\u9a8c\u8bc1\u2192\u4fee\u8ba2\u6d41\u7a0b\uff09\u548c\u5de5\u5177\u4f7f\u7528\u7684\u5b9e\u9645\u90e8\u7f72\u65b9\u6848\u3002", "conclusion": "\u8be5\u6846\u67b6\u4e3a\u7ed3\u6784\u5316\u63d0\u793a\u63d0\u4f9b\u4e86\u575a\u5b9e\u7684\u7406\u8bba\u57fa\u7840\uff0c\u5c06\u8bed\u6cd5\u5bf9\u9f50\u89e3\u7801\u3001\u9a8c\u8bc1\u94fe\u548c\u7a0b\u5e8f\u5316\u63d0\u793a\u7b49\u6700\u65b0\u8fdb\u5c55\u7edf\u4e00\u8d77\u6765\uff0c\u786e\u4fdd\u4e86\u8f93\u51fa\u7684\u826f\u597d\u683c\u5f0f\u548c\u4efb\u52a1\u6027\u80fd\u3002"}}
{"id": "2509.08727", "pdf": "https://arxiv.org/pdf/2509.08727", "abs": "https://arxiv.org/abs/2509.08727", "authors": ["Shixin Song", "Tingzhen Dong", "Kosi Nwabueze", "Julian Zanders", "Andres Erbsen", "Adam Chlipala", "Mengjia Yan"], "title": "Securing Cryptographic Software via Typed Assembly Language (Extended Version)", "categories": ["cs.CR", "cs.AR", "cs.PL"], "comment": null, "summary": "Authors of cryptographic software are well aware that their code should not\nleak secrets through its timing behavior, and, until 2018, they believed that\nfollowing industry-standard constant-time coding guidelines was sufficient.\nHowever, the revelation of the Spectre family of speculative execution attacks\ninjected new complexities.\n  To block speculative attacks, prior work has proposed annotating the\nprogram's source code to mark secret data, with hardware using this information\nto decide when to speculate (i.e., when only public values are involved) or not\n(when secrets are in play). While these solutions are able to track secret\ninformation stored on the heap, they suffer from limitations that prevent them\nfrom correctly tracking secrets on the stack, at a cost in performance.\n  This paper introduces SecSep, a transformation framework that rewrites\nassembly programs so that they partition secret and public data on the stack.\nBy moving from the source-code level to assembly rewriting, SecSep is able to\naddress limitations of prior work. The key challenge in performing this\nassembly rewriting stems from the loss of semantic information through the\nlengthy compilation process. The key innovation of our methodology is a new\nvariant of typed assembly language (TAL), Octal, which allows us to address\nthis challenge. Assembly rewriting is driven by compile-time inference within\nOctal. We apply our technique to cryptographic programs and demonstrate that it\nenables secure speculation efficiently, incurring a low average overhead of\n$1.2\\%$.", "AI": {"tldr": "SecSep\u662f\u4e00\u4e2a\u6c47\u7f16\u7ea7\u8f6c\u6362\u6846\u67b6\uff0c\u901a\u8fc7\u6808\u6570\u636e\u5206\u533a\u548cOctal\u7c7b\u578b\u5316\u6c47\u7f16\u8bed\u8a00\u6765\u9632\u5fa1Spectre\u7c7b\u63a8\u6d4b\u6267\u884c\u653b\u51fb\uff0c\u5e73\u5747\u5f00\u9500\u4ec51.2%", "motivation": "\u73b0\u6709\u6e90\u4ee3\u7801\u6807\u6ce8\u65b9\u6cd5\u65e0\u6cd5\u6b63\u786e\u8ddf\u8e2a\u6808\u4e0a\u7684\u79d8\u5bc6\u6570\u636e\uff0c\u5b58\u5728\u6027\u80fd\u5f00\u9500\u95ee\u9898\uff0c\u9700\u8981\u66f4\u6709\u6548\u7684\u9632\u5fa1Spectre\u63a8\u6d4b\u6267\u884c\u653b\u51fb\u7684\u65b9\u6848", "method": "\u5f00\u53d1SecSep\u8f6c\u6362\u6846\u67b6\uff0c\u4f7f\u7528\u65b0\u578bOctal\u7c7b\u578b\u5316\u6c47\u7f16\u8bed\u8a00\u8fdb\u884c\u7f16\u8bd1\u65f6\u63a8\u65ad\uff0c\u91cd\u5199\u6c47\u7f16\u7a0b\u5e8f\u5b9e\u73b0\u6808\u4e0a\u79d8\u5bc6\u4e0e\u516c\u5f00\u6570\u636e\u5206\u533a", "result": "\u6210\u529f\u5e94\u7528\u4e8e\u5bc6\u7801\u7a0b\u5e8f\uff0c\u5b9e\u73b0\u5b89\u5168\u63a8\u6d4b\u6267\u884c\uff0c\u5e73\u5747\u6027\u80fd\u5f00\u9500\u4ec5\u4e3a1.2%", "conclusion": "\u6c47\u7f16\u7ea7\u91cd\u5199\u65b9\u6cd5\u6bd4\u6e90\u4ee3\u7801\u6807\u6ce8\u66f4\u6709\u6548\uff0cOctal\u7c7b\u578b\u5316\u6c47\u7f16\u8bed\u8a00\u89e3\u51b3\u4e86\u7f16\u8bd1\u8fc7\u7a0b\u4e2d\u8bed\u4e49\u4fe1\u606f\u4e22\u5931\u7684\u6311\u6218\uff0c\u80fd\u4ee5\u4f4e\u5f00\u9500\u5b9e\u73b0\u5b89\u5168\u63a8\u6d4b"}}
{"id": "2509.08804", "pdf": "https://arxiv.org/pdf/2509.08804", "abs": "https://arxiv.org/abs/2509.08804", "authors": ["Bishnu Bhusal", "Rohit Chadha", "A. Prasad Sistla", "Mahesh Viswanathan"], "title": "Approximate Algorithms for Verifying Differential Privacy with Gaussian Distributions", "categories": ["cs.CR", "cs.PL", "D.2.5; F.4.1"], "comment": "An extended abstract appears in CCS 2025", "summary": "The verification of differential privacy algorithms that employ Gaussian\ndistributions is little understood. This paper tackles the challenge of\nverifying such programs by introducing a novel approach to approximating\nprobability distributions of loop-free programs that sample from both discrete\nand continuous distributions with computable probability density functions,\nincluding Gaussian and Laplace. We establish that verifying\n$(\\epsilon,\\delta)$-differential privacy for these programs is \\emph{almost\ndecidable}, meaning the problem is decidable for all values of $\\delta$ except\nthose in a finite set. Our verification algorithm is based on computing\nprobabilities to any desired precision by combining integral approximations,\nand tail probability bounds. The proposed methods are implemented in the tool,\nDipApprox, using the FLINT library for high-precision integral computations,\nand incorporate optimizations to enhance scalability. We validate {\\ourtool} on\nfundamental privacy-preserving algorithms, such as Gaussian variants of the\nSparse Vector Technique and Noisy Max, demonstrating its effectiveness in both\nconfirming privacy guarantees and detecting violations.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u9a8c\u8bc1\u4f7f\u7528\u9ad8\u65af\u5206\u5e03\u7684\u5dee\u5206\u9690\u79c1\u7b97\u6cd5\u7684\u65b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u8fd1\u4f3c\u6982\u7387\u5206\u5e03\u6765\u89e3\u51b3\u9a8c\u8bc1\u95ee\u9898\uff0c\u5e76\u8bc1\u660e\u5bf9\u4e8e\u8fd9\u7c7b\u7a0b\u5e8f\uff0c\u9a8c\u8bc1(\u03b5,\u03b4)-\u5dee\u5206\u9690\u79c1\u51e0\u4e4e\u662f\u53ef\u5224\u5b9a\u7684\u3002", "motivation": "\u9ad8\u65af\u5206\u5e03\u5dee\u5206\u9690\u79c1\u7b97\u6cd5\u7684\u9a8c\u8bc1\u95ee\u9898\u7f3a\u4e4f\u6df1\u5165\u7406\u89e3\uff0c\u73b0\u6709\u65b9\u6cd5\u96be\u4ee5\u6709\u6548\u9a8c\u8bc1\u8fd9\u7c7b\u7a0b\u5e8f\u7684\u9690\u79c1\u4fdd\u8bc1\u3002", "method": "\u5f15\u5165\u8fd1\u4f3c\u6982\u7387\u5206\u5e03\u7684\u65b0\u65b9\u6cd5\uff0c\u7ed3\u5408\u79ef\u5206\u8fd1\u4f3c\u548c\u5c3e\u90e8\u6982\u7387\u8fb9\u754c\u8ba1\u7b97\u6982\u7387\uff0c\u4f7f\u7528FLINT\u5e93\u8fdb\u884c\u9ad8\u7cbe\u5ea6\u79ef\u5206\u8ba1\u7b97\uff0c\u5e76\u5b9e\u73b0\u4f18\u5316\u4ee5\u63d0\u9ad8\u53ef\u6269\u5c55\u6027\u3002", "result": "\u5f00\u53d1\u4e86DipApprox\u5de5\u5177\uff0c\u5728\u57fa\u7840\u9690\u79c1\u4fdd\u62a4\u7b97\u6cd5\uff08\u5982\u9ad8\u65af\u7a00\u758f\u5411\u91cf\u6280\u672f\u548c\u566a\u58f0\u6700\u5927\u503c\u53d8\u4f53\uff09\u4e0a\u9a8c\u8bc1\u4e86\u65b9\u6cd5\u7684\u6709\u6548\u6027\uff0c\u65e2\u80fd\u786e\u8ba4\u9690\u79c1\u4fdd\u8bc1\u4e5f\u80fd\u68c0\u6d4b\u8fdd\u89c4\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u4e3a\u9a8c\u8bc1\u9ad8\u65af\u5206\u5e03\u5dee\u5206\u9690\u79c1\u7a0b\u5e8f\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u8bc1\u660e\u4e86(\u03b5,\u03b4)-\u5dee\u5206\u9690\u79c1\u9a8c\u8bc1\u95ee\u9898\u51e0\u4e4e\u662f\u53ef\u5224\u5b9a\u7684\u3002"}}
