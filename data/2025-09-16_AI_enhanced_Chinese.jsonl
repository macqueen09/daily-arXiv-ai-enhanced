{"id": "2509.11418", "pdf": "https://arxiv.org/pdf/2509.11418", "abs": "https://arxiv.org/abs/2509.11418", "authors": ["Runming Li", "Yue Yao", "Robert Harper"], "title": "Mechanizing Synthetic Tait Computability in Istari", "categories": ["cs.PL"], "comment": null, "summary": "Categorical gluing is a powerful technique for proving meta-theorems of type\ntheories such as canonicity and normalization. Synthetic Tait Computability\n(STC) provides an abstract treatment of the complex gluing models by\ninternalizing the gluing category into a modal dependent type theory with a\nphase distinction. This work presents a mechanization of STC in the Istari\nproof assistant. Istari is a Martin-L\\\"{o}f-style extensional type theory with\nequality reflection. Equality reflection eliminates the nuisance of transport\nreasoning typically found in intensional proof assistants. This work develops a\nreusable library for synthetic phase distinction, including modalities,\nextension types, and strict glue types, and applies it to two case studies: (1)\na canonicity model for dependent type theory with dependent products and\nbooleans with large elimination, and (2) a Kripke canonicity model for the\ncost-aware logical framework. Our results demonstrate that the core STC\nconstructions can be formalized essentially verbatim in Istari, preserving the\nelegance of the on-paper arguments while ensuring machine-checked correctness.", "AI": {"tldr": "\u5728Istari\u8bc1\u660e\u52a9\u624b\u4e2d\u5b9e\u73b0\u4e86\u5408\u6210Tait\u53ef\u8ba1\u7b97\u6027(STC)\u7684\u5f62\u5f0f\u5316\uff0c\u5305\u62ec\u6a21\u6001\u3001\u6269\u5c55\u7c7b\u578b\u548c\u4e25\u683c\u80f6\u5408\u7c7b\u578b\u7b49\u53ef\u91cd\u7528\u5e93\uff0c\u5e76\u5e94\u7528\u4e8e\u4e24\u4e2a\u6848\u4f8b\u7814\u7a76\uff1a\u5e26\u5927\u6d88\u9664\u7684\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u7684\u5178\u8303\u6027\u6a21\u578b\u548c\u6210\u672c\u611f\u77e5\u903b\u8f91\u6846\u67b6\u7684Kripke\u5178\u8303\u6027\u6a21\u578b", "motivation": "\u8303\u7574\u80f6\u5408\u662f\u8bc1\u660e\u7c7b\u578b\u7406\u8bba\u5143\u5b9a\u7406\uff08\u5982\u5178\u8303\u6027\u548c\u6b63\u89c4\u5316\uff09\u7684\u5f3a\u5927\u6280\u672f\uff0cSTC\u901a\u8fc7\u5c06\u80f6\u5408\u8303\u7574\u5185\u5316\u5230\u5177\u6709\u76f8\u4f4d\u533a\u5206\u7684\u6a21\u6001\u4f9d\u8d56\u7c7b\u578b\u7406\u8bba\u4e2d\uff0c\u63d0\u4f9b\u4e86\u5bf9\u590d\u6742\u80f6\u5408\u6a21\u578b\u7684\u62bd\u8c61\u5904\u7406", "method": "\u5728Istari\u8bc1\u660e\u52a9\u624b\u4e2d\u5f00\u53d1\u53ef\u91cd\u7528\u7684\u5408\u6210\u76f8\u4f4d\u533a\u5206\u5e93\uff0c\u5305\u62ec\u6a21\u6001\u3001\u6269\u5c55\u7c7b\u578b\u548c\u4e25\u683c\u80f6\u5408\u7c7b\u578b\uff0c\u7136\u540e\u5e94\u7528\u4e8e\u4e24\u4e2a\u5177\u4f53\u6848\u4f8b\u7814\u7a76", "result": "\u6838\u5fc3STC\u6784\u9020\u53ef\u4ee5\u5728Istari\u4e2d\u51e0\u4e4e\u9010\u5b57\u5f62\u5f0f\u5316\uff0c\u4fdd\u6301\u4e86\u7eb8\u4e0a\u8bba\u8bc1\u7684\u4f18\u96c5\u6027\u540c\u65f6\u786e\u4fdd\u673a\u5668\u68c0\u67e5\u7684\u6b63\u786e\u6027", "conclusion": "Istari\u7684\u7b49\u5f0f\u53cd\u5c04\u6d88\u9664\u4e86\u5185\u6db5\u8bc1\u660e\u52a9\u624b\u4e2d\u5178\u578b\u7684\u4f20\u8f93\u63a8\u7406\u9ebb\u70e6\uff0c\u4f7f\u5f97STC\u7684\u5f62\u5f0f\u5316\u65e2\u4f18\u96c5\u53c8\u53ef\u673a\u5668\u9a8c\u8bc1"}}
{"id": "2509.11901", "pdf": "https://arxiv.org/pdf/2509.11901", "abs": "https://arxiv.org/abs/2509.11901", "authors": ["Kentaro Kobayashi", "Yukiyoshi Kameyama"], "title": "Expressive Power of One-Shot Control Operators and Coroutines", "categories": ["cs.PL", "cs.LO"], "comment": "Full version of the paper accepted at APLAS 2025. Includes appendices\n  with proofs. 59 pages", "summary": "Control operators, such as exceptions and effect handlers, provide a means of\nrepresenting computational effects in programs abstractly and modularly. While\nmost theoretical studies have focused on multi-shot control operators, one-shot\ncontrol operators -- which restrict the use of captured continuations to at\nmost once -- are gaining attention for their balance between expressiveness and\nefficiency. This study aims to fill the gap. We present a mathematically\nrigorous comparison of the expressive power among one-shot control operators,\nincluding effect handlers, delimited continuations, and even asymmetric\ncoroutines. Following previous studies on multi-shot control operators, we\nadopt Felleisen's macro-expressiveness as our measure of expressiveness. We\nverify the folklore that one-shot effect handlers and one-shot\ndelimited-control operators can be macro-expressed by asymmetric coroutines,\nbut not vice versa. We explain why a previous informal argument fails, and how\nto revise it to make a valid macro-translation.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u901a\u8fc7\u6570\u5b66\u4e25\u8c28\u7684\u5fae\u89c2\u8868\u8fbe\u529b\u5206\u6790\uff0c\u8bc1\u5b9e\u4e86\u4e00\u952e\u63a7\u5236\u64cd\u4f5c\u7b26\u4e2d\u4e0d\u5bf9\u79f0\u534f\u7a0b\u80fd\u591f\u5b8f\u8868\u8fbe\u6548\u679c\u5904\u7406\u5668\u548c\u754c\u5b9a\u7eed\u4f53\uff0c\u4f46\u53cd\u4e4b\u5219\u4e0d\u884c\u7684\u6c11\u95f4\u5047\u8bf4\uff0c\u5e76\u4fee\u6b63\u4e86\u4e4b\u524d\u7684\u975e\u6b63\u5f0f\u8bc1\u660e\u3002", "motivation": "\u867d\u7136\u591a\u952e\u63a7\u5236\u64cd\u4f5c\u7b26\u5f97\u5230\u5e7f\u6cdb\u7814\u7a76\uff0c\u4f46\u4e00\u952e\u63a7\u5236\u64cd\u4f5c\u7b26\u5728\u8868\u8fbe\u529b\u548c\u6548\u7387\u4e4b\u95f4\u53d6\u5f97\u4e86\u66f4\u597d\u7684\u5e73\u8861\uff0c\u800c\u73b0\u6709\u7814\u7a76\u5728\u8fd9\u65b9\u9762\u5b58\u5728\u7a7a\u767d\u3002\u672c\u7814\u7a76\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u901a\u8fc7\u4e25\u683c\u7684\u6570\u5b66\u6bd4\u8f83\u6765\u5206\u6790\u5404\u79cd\u4e00\u952e\u63a7\u5236\u64cd\u4f5c\u7b26\u7684\u8868\u8fbe\u529b\u3002", "method": "\u91c7\u7528Felleisen\u7684\u5b8f\u8868\u8fbe\u529b\u4f5c\u4e3a\u8868\u8fbe\u529b\u7684\u8861\u91cf\u6807\u51c6\uff0c\u5bf9\u4e00\u952e\u6548\u679c\u5904\u7406\u5668\u3001\u4e00\u952e\u754c\u5b9a\u7eed\u4f53\u548c\u4e0d\u5bf9\u79f0\u534f\u7a0b\u8fdb\u884c\u6570\u5b66\u4e0a\u4e25\u8c28\u7684\u5fae\u89c2\u8868\u8fbe\u529b\u6bd4\u8f83\u3002", "result": "\u9a8c\u8bc1\u4e86\u6c11\u95f4\u5047\u8bf4\uff1a\u4e00\u952e\u6548\u679c\u5904\u7406\u5668\u548c\u4e00\u952e\u754c\u5b9a\u7eed\u4f53\u53ef\u4ee5\u901a\u8fc7\u4e0d\u5bf9\u79f0\u534f\u7a0b\u5b8f\u8868\u8fbe\uff0c\u4f46\u53cd\u4e4b\u5219\u4e0d\u884c\u3002\u540c\u65f6\u8bc1\u660e\u4e86\u4e4b\u524d\u975e\u6b63\u5f0f\u8bba\u8bc1\u7684\u9519\u8bef\u4e4b\u5904\uff0c\u5e76\u63d0\u51fa\u4e86\u6709\u6548\u7684\u5b8f\u8f6c\u6362\u65b9\u6848\u3002", "conclusion": "\u4e00\u952e\u63a7\u5236\u64cd\u4f5c\u7b26\u5728\u8868\u8fbe\u529b\u5c42\u6b21\u4e0a\u5b58\u5728\u660e\u663e\u7684\u5d4c\u5957\u5173\u7cfb\uff0c\u4e0d\u5bf9\u79f0\u534f\u7a0b\u5177\u6709\u6700\u9ad8\u7684\u8868\u8fbe\u529b\uff0c\u800c\u6548\u679c\u5904\u7406\u5668\u548c\u754c\u5b9a\u7eed\u4f53\u5728\u8868\u8fbe\u529b\u4e0a\u76f8\u5f53\u3002\u8fd9\u4e00\u53d1\u73b0\u4e3a\u7a0b\u5e8f\u8bed\u8a00\u8bbe\u8ba1\u4e2d\u63a7\u5236\u7ed3\u6784\u7684\u9009\u62e9\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2201.06325", "pdf": "https://arxiv.org/pdf/2201.06325", "abs": "https://arxiv.org/abs/2201.06325", "authors": ["Umang Mathur", "Andreas Pavlogiannis", "H\u00fcnkar Can Tun\u00e7", "Mahesh Viswanathan"], "title": "A Tree Clock Data Structure for Causal Orderings in Concurrent Executions", "categories": ["cs.LO", "cs.DC", "cs.DS", "cs.PL", "cs.SE"], "comment": null, "summary": "Dynamic techniques are a scalable and effective way to analyze concurrent\nprograms. Instead of analyzing all behaviors of a program, these techniques\ndetect errors by focusing on a single program execution. Often a crucial step\nin these techniques is to define a causal ordering between events in the\nexecution, which is then computed using vector clocks, a simple data structure\nthat stores logical times of threads. The two basic operations of vector\nclocks, namely join and copy, require $\\Theta(k)$ time, where $k$ is the number\nof threads. Thus they are a computational bottleneck when $k$ is large.\n  In this work, we introduce tree clocks, a new data structure that replaces\nvector clocks for computing causal orderings in program executions. Joining and\ncopying tree clocks takes time that is roughly proportional to the number of\nentries being modified, and hence the two operations do not suffer the a-priori\n$\\Theta(k)$ cost per application. We show that when used to compute the classic\nhappens-before (HB) partial order, tree clocks are optimal, in the sense that\nno other data structure can lead to smaller asymptotic running time. Moreover,\nwe demonstrate that tree clocks can be used to compute other partial orders,\nsuch as schedulable-happens-before (SHB) and the standard Mazurkiewicz (MAZ)\npartial order, and thus are a versatile data structure. Our experiments show\nthat just by replacing vector clocks with tree clocks, the computation becomes\nfrom $2.02 \\times$ faster (MAZ) to $2.66 \\times$ (SHB) and $2.97 \\times$ (HB)\non average per benchmark. These results illustrate that tree clocks have the\npotential to become a standard data structure with wide applications in\nconcurrent analyses.", "AI": {"tldr": "\u6811\u949f\u662f\u4e00\u79cd\u65b0\u7684\u6570\u636e\u7ed3\u6784\uff0c\u7528\u4e8e\u66ff\u4ee3\u5411\u91cf\u949f\u6765\u8ba1\u7b97\u5e76\u53d1\u7a0b\u5e8f\u6267\u884c\u4e2d\u7684\u56e0\u679c\u6392\u5e8f\u5173\u7cfb\uff0c\u5177\u6709\u66f4\u9ad8\u7684\u6548\u7387\u548c\u66f4\u4f18\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u3002", "motivation": "\u5411\u91cf\u949f\u5728\u5904\u7406\u5927\u89c4\u6a21\u5e76\u53d1\u7a0b\u5e8f\u65f6\uff0c\u57fa\u672c\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a\u03b8(k)\uff08k\u4e3a\u7ebf\u7a0b\u6570\uff09\uff0c\u6210\u4e3a\u8ba1\u7b97\u74f6\u9888\u3002\u9700\u8981\u4e00\u79cd\u66f4\u9ad8\u6548\u7684\u6570\u636e\u7ed3\u6784\u6765\u63d0\u5347\u5e76\u53d1\u5206\u6790\u7684\u6027\u80fd\u3002", "method": "\u63d0\u51fa\u6811\u949f\u6570\u636e\u7ed3\u6784\uff0c\u5176\u5408\u5e76\u548c\u590d\u5236\u64cd\u4f5c\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e0e\u4fee\u6539\u7684\u9879\u6570\u6210\u6b63\u6bd4\uff0c\u907f\u514d\u4e86\u56fa\u6709\u7684\u03b8(k)\u6210\u672c\u3002\u8bc1\u660e\u5728\u8ba1\u7b97happens-before\u504f\u5e8f\u5173\u7cfb\u65f6\uff0c\u6811\u949f\u662f\u6700\u4f18\u7684\u3002", "result": "\u5b9e\u9a8c\u7ed3\u679c\u663e\u793a\uff0c\u4f7f\u7528\u6811\u949f\u66ff\u4ee3\u5411\u91cf\u949f\u540e\uff0c\u8ba1\u7b97\u901f\u5ea6\u63d0\u53472.02\u500d(MAZ)\u52302.97\u500d(HB)\uff0c\u5e73\u5747\u6027\u80fd\u63d0\u5347\u8d85\u8fc72\u500d\u3002", "conclusion": "\u6811\u949f\u662f\u4e00\u79cd\u4f18\u5316\u7684\u6570\u636e\u7ed3\u6784\uff0c\u53ef\u4ee5\u5e7f\u6cdb\u5e94\u7528\u4e8e\u5404\u79cd\u5e76\u53d1\u5206\u6790\u90e8\u5206\u6392\u5e8f\u8ba1\u7b97\uff0c\u6709\u671b\u6210\u4e3a\u5e76\u53d1\u5206\u6790\u9886\u57df\u7684\u6807\u51c6\u6570\u636e\u7ed3\u6784\u3002"}}
{"id": "2509.10694", "pdf": "https://arxiv.org/pdf/2509.10694", "abs": "https://arxiv.org/abs/2509.10694", "authors": ["Kahfi S. Zulkifli", "Wenbo Qian", "Shaowei Zhu", "Yuan Zhou", "Zhen Zhang", "Chang Lou"], "title": "Verifying Computational Graphs in Production-Grade Distributed Machine Learning Frameworks", "categories": ["cs.LG", "cs.PL"], "comment": null, "summary": "Modern machine learning frameworks support very large models by incorporating\nparallelism and optimization techniques. Yet, these very techniques add new\nlayers of complexity, introducing silent errors that severely degrade model\nperformance. Existing solutions are either ad hoc or too costly for production.\n  We present Scalify, a lightweight framework that exposes silent errors by\nverifying semantic equivalence of computational graphs using equality\nsaturation and Datalog-style reasoning. To scale, Scalify partitions graphs\nwith parallel rewriting and layer memoization, reuses rewrite templates, and\naugments equality saturation with relational reasoning and symbolic bijection\ninference. It further localizes discrepancies to precise code sites, turning\nverification results into actionable debugging guidance. Scalify verifies\nmodels as large as Llama-3.1-405B within minutes on a commodity machine and\nexposed five unknown bugs in Amazon production machine learning frameworks.", "AI": {"tldr": "Scalify\u662f\u4e00\u4e2a\u8f7b\u91cf\u7ea7\u6846\u67b6\uff0c\u901a\u8fc7\u9a8c\u8bc1\u8ba1\u7b97\u56fe\u7684\u8bed\u4e49\u7b49\u4ef7\u6027\u6765\u66b4\u9732\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u9759\u9ed8\u9519\u8bef\uff0c\u4f7f\u7528\u7b49\u5f0f\u9971\u548c\u548cDatalog\u63a8\u7406\uff0c\u80fd\u591f\u5feb\u901f\u9a8c\u8bc1\u5927\u578b\u6a21\u578b\u5e76\u5b9a\u4f4d\u9519\u8bef\u3002", "motivation": "\u73b0\u4ee3\u673a\u5668\u5b66\u4e60\u6846\u67b6\u901a\u8fc7\u5e76\u884c\u5316\u548c\u4f18\u5316\u6280\u672f\u652f\u6301\u5927\u578b\u6a21\u578b\uff0c\u4f46\u8fd9\u4e9b\u6280\u672f\u5f15\u5165\u4e86\u65b0\u7684\u590d\u6742\u6027\uff0c\u5bfc\u81f4\u9759\u9ed8\u9519\u8bef\u4e25\u91cd\u964d\u4f4e\u6a21\u578b\u6027\u80fd\u3002\u73b0\u6709\u89e3\u51b3\u65b9\u6848\u8981\u4e48\u662f\u4e34\u65f6\u7684\uff0c\u8981\u4e48\u5728\u751f\u4ea7\u73af\u5883\u4e2d\u6210\u672c\u8fc7\u9ad8\u3002", "method": "\u4f7f\u7528\u7b49\u5f0f\u9971\u548c\u548cDatalog\u5f0f\u63a8\u7406\u9a8c\u8bc1\u8ba1\u7b97\u56fe\u7684\u8bed\u4e49\u7b49\u4ef7\u6027\uff1b\u901a\u8fc7\u5e76\u884c\u91cd\u5199\u548c\u5c42\u8bb0\u5fc6\u5316\u5bf9\u56fe\u8fdb\u884c\u5206\u533a\uff1b\u91cd\u7528\u91cd\u5199\u6a21\u677f\uff1b\u5728\u7b49\u5f0f\u9971\u548c\u4e2d\u589e\u52a0\u5173\u7cfb\u63a8\u7406\u548c\u7b26\u53f7\u53cc\u5c04\u63a8\u65ad\uff1b\u5c06\u5dee\u5f02\u5b9a\u4f4d\u5230\u7cbe\u786e\u7684\u4ee3\u7801\u4f4d\u7f6e\u3002", "result": "\u5728\u666e\u901a\u673a\u5668\u4e0a\u51e0\u5206\u949f\u5185\u9a8c\u8bc1\u4e86Llama-3.1-405B\u7b49\u5927\u578b\u6a21\u578b\uff1b\u5728Amazon\u751f\u4ea7\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e2d\u53d1\u73b0\u4e865\u4e2a\u672a\u77e5\u9519\u8bef\u3002", "conclusion": "Scalify\u63d0\u4f9b\u4e86\u4e00\u4e2a\u9ad8\u6548\u3001\u53ef\u6269\u5c55\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u80fd\u591f\u5feb\u901f\u68c0\u6d4b\u548c\u5b9a\u4f4d\u673a\u5668\u5b66\u4e60\u6846\u67b6\u4e2d\u7684\u9759\u9ed8\u9519\u8bef\uff0c\u4e3a\u751f\u4ea7\u73af\u5883\u63d0\u4f9b\u4e86\u5b9e\u7528\u7684\u8c03\u8bd5\u6307\u5bfc\u3002"}}
{"id": "2509.10819", "pdf": "https://arxiv.org/pdf/2509.10819", "abs": "https://arxiv.org/abs/2509.10819", "authors": ["Christoph Hochrainer", "Valentin W\u00fcstholz", "Maria Christakis"], "title": "Arguzz: Testing zkVMs for Soundness and Completeness Bugs", "categories": ["cs.SE", "cs.CR", "cs.PL"], "comment": null, "summary": "Zero-knowledge virtual machines (zkVMs) are increasingly deployed in\ndecentralized applications and blockchain rollups since they enable verifiable\noff-chain computation. These VMs execute general-purpose programs, frequently\nwritten in Rust, and produce succinct cryptographic proofs. However, zkVMs are\ncomplex, and bugs in their constraint systems or execution logic can cause\ncritical soundness (accepting invalid executions) or completeness (rejecting\nvalid ones) issues.\n  We present Arguzz, the first automated tool for testing zkVMs for soundness\nand completeness bugs. To detect such bugs, Arguzz combines a novel variant of\nmetamorphic testing with fault injection. In particular, it generates\nsemantically equivalent program pairs, merges them into a single Rust program\nwith a known output, and runs it inside a zkVM. By injecting faults into the\nVM, Arguzz mimics malicious or buggy provers to uncover overly weak\nconstraints.\n  We used Arguzz to test six real-world zkVMs (RISC Zero, Nexus, Jolt, SP1,\nOpenVM, and Pico) and found eleven bugs in three of them. One RISC Zero bug\nresulted in a $50,000 bounty, despite prior audits, demonstrating the critical\nneed for systematic testing of zkVMs.", "AI": {"tldr": "Arguzz\u662f\u9996\u4e2a\u81ea\u52a8\u5316\u6d4b\u8bd5zkVM\u7684\u5de5\u5177\uff0c\u901a\u8fc7\u53d8\u5f62\u6d4b\u8bd5\u548c\u6545\u969c\u6ce8\u5165\u53d1\u73b011\u4e2a\u6f0f\u6d1e\uff0c\u5305\u62ecRISC Zero\u7684\u4e00\u4e2a\u9ad8\u989d\u8d4f\u91d1\u6f0f\u6d1e", "motivation": "zkVM\u5728\u53bb\u4e2d\u5fc3\u5316\u5e94\u7528\u4e2d\u5e7f\u6cdb\u4f7f\u7528\uff0c\u4f46\u5176\u7ea6\u675f\u7cfb\u7edf\u548c\u6267\u884c\u903b\u8f91\u7684\u6f0f\u6d1e\u53ef\u80fd\u5bfc\u81f4\u4e25\u91cd\u7684\u5b89\u5168\u95ee\u9898\uff08\u63a5\u53d7\u65e0\u6548\u6267\u884c\u6216\u62d2\u7edd\u6709\u6548\u6267\u884c\uff09\uff0c\u73b0\u6709\u5ba1\u8ba1\u65b9\u6cd5\u4e0d\u8db3", "method": "\u7ed3\u5408\u53d8\u5f62\u6d4b\u8bd5\u548c\u6545\u969c\u6ce8\u5165\uff0c\u751f\u6210\u8bed\u4e49\u7b49\u6548\u7684\u7a0b\u5e8f\u5bf9\uff0c\u5408\u5e76\u4e3a\u5df2\u77e5\u8f93\u51fa\u7684Rust\u7a0b\u5e8f\uff0c\u5728zkVM\u4e2d\u8fd0\u884c\u5e76\u901a\u8fc7\u6545\u969c\u6ce8\u5165\u6a21\u62df\u6076\u610f\u8bc1\u660e\u8005", "result": "\u6d4b\u8bd56\u4e2a\u771f\u5b9ezkVM\u7cfb\u7edf\uff08RISC Zero\u3001Nexus\u3001Jolt\u7b49\uff09\uff0c\u53d1\u73b011\u4e2a\u6f0f\u6d1e\uff0c\u5176\u4e2dRISC Zero\u7684\u4e00\u4e2a\u6f0f\u6d1e\u83b7\u5f975\u4e07\u7f8e\u5143\u8d4f\u91d1", "conclusion": "\u7cfb\u7edf\u5316\u6d4b\u8bd5zkVM\u81f3\u5173\u91cd\u8981\uff0cArguzz\u8bc1\u660e\u4e86\u81ea\u52a8\u5316\u6d4b\u8bd5\u5de5\u5177\u5728\u53d1\u73b0\u5173\u952e\u6f0f\u6d1e\u65b9\u9762\u7684\u6709\u6548\u6027\uff0c\u5c3d\u7ba1\u8fd9\u4e9b\u7cfb\u7edf\u5df2\u7ecf\u8fc7\u5ba1\u8ba1"}}
{"id": "2509.11065", "pdf": "https://arxiv.org/pdf/2509.11065", "abs": "https://arxiv.org/abs/2509.11065", "authors": ["Yuan Si", "Daming Li", "Hanyuan Shi", "Jialu Zhang"], "title": "ViScratch: Using Large Language Models and Gameplay Videos for Automated Feedback in Scratch", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "Block-based programming environments such as Scratch are increasingly popular\nin programming education, in particular for young learners. While the use of\nblocks helps prevent syntax errors, semantic bugs remain common and difficult\nto debug. Existing tools for Scratch debugging rely heavily on predefined rules\nor user manual inputs, and crucially, they ignore the platform's inherently\nvisual nature.\n  We introduce ViScratch, the first multimodal feedback generation system for\nScratch that leverages both the project's block code and its generated gameplay\nvideo to diagnose and repair bugs. ViScratch uses a two-stage pipeline: a\nvision-language model first aligns visual symptoms with code structure to\nidentify a single critical issue, then proposes minimal, abstract syntax tree\nlevel repairs that are verified via execution in the Scratch virtual machine.\n  We evaluate ViScratch on a set of real-world Scratch projects against\nstate-of-the-art LLM-based tools and human testers. Results show that gameplay\nvideo is a crucial debugging signal: ViScratch substantially outperforms prior\ntools in both bug identification and repair quality, even without access to\nproject descriptions or goals. This work demonstrates that video can serve as a\nfirst-class specification in visual programming environments, opening new\ndirections for LLM-based debugging beyond symbolic code alone.", "AI": {"tldr": "ViScratch\u662f\u4e00\u4e2a\u57fa\u4e8e\u591a\u6a21\u6001\u7684Scratch\u8c03\u8bd5\u7cfb\u7edf\uff0c\u901a\u8fc7\u7ed3\u5408\u4ee3\u7801\u5757\u548c\u6e38\u620f\u89c6\u9891\u6765\u8bca\u65ad\u548c\u4fee\u590dbug\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u5de5\u5177", "motivation": "\u73b0\u6709\u7684Scratch\u8c03\u8bd5\u5de5\u5177\u4e3b\u8981\u4f9d\u8d56\u9884\u5b9a\u4e49\u89c4\u5219\u6216\u624b\u52a8\u8f93\u5165\uff0c\u5ffd\u7565\u4e86\u5e73\u53f0\u7684\u89c6\u89c9\u7279\u6027\uff0c\u65e0\u6cd5\u6709\u6548\u5904\u7406\u8bed\u4e49bug", "method": "\u91c7\u7528\u4e24\u9636\u6bb5\u6d41\u6c34\u7ebf\uff1a\u89c6\u89c9\u8bed\u8a00\u6a21\u578b\u5c06\u89c6\u89c9\u75c7\u72b6\u4e0e\u4ee3\u7801\u7ed3\u6784\u5bf9\u9f50\u8bc6\u522b\u5173\u952e\u95ee\u9898\uff0c\u7136\u540e\u63d0\u51faAST\u7ea7\u522b\u7684\u4fee\u590d\u65b9\u6848\u5e76\u5728Scratch\u865a\u62df\u673a\u4e2d\u9a8c\u8bc1", "result": "ViScratch\u5728bug\u8bc6\u522b\u548c\u4fee\u590d\u8d28\u91cf\u65b9\u9762\u5927\u5e45\u4f18\u4e8e\u73b0\u6709LLM\u5de5\u5177\u548c\u4eba\u5de5\u6d4b\u8bd5\u8005\uff0c\u8bc1\u660e\u6e38\u620f\u89c6\u9891\u662f\u5173\u952e\u7684\u8c03\u8bd5\u4fe1\u53f7", "conclusion": "\u89c6\u9891\u53ef\u4ee5\u4f5c\u4e3a\u53ef\u89c6\u5316\u7f16\u7a0b\u73af\u5883\u4e2d\u7684\u4e00\u7b49\u89c4\u8303\uff0c\u4e3a\u57fa\u4e8eLLM\u7684\u8c03\u8bd5\u5f00\u8f9f\u4e86\u8d85\u8d8a\u7eaf\u7b26\u53f7\u4ee3\u7801\u7684\u65b0\u65b9\u5411"}}
{"id": "2509.11559", "pdf": "https://arxiv.org/pdf/2509.11559", "abs": "https://arxiv.org/abs/2509.11559", "authors": ["Tarakaram Gollamudi", "Anitha Gollamudi", "Joshua Gancher"], "title": "ILA: Correctness via Type Checking for Fully Homomorphic Encryption", "categories": ["cs.CR", "cs.PL"], "comment": null, "summary": "RLWE-based Fully Homomorphic Encryption (FHE) schemes add some small\n\\emph{noise} to the message during encryption. The noise accumulates with each\nhomomorphic operation. When the noise exceeds a critical value, the FHE circuit\nproduces an incorrect output. This makes developing FHE applications quite\nsubtle, as one must closely track the noise to ensure correctness. However,\nexisting libraries and compilers offer limited support to statically track the\nnoise. Additionally, FHE circuits are also plagued by wraparound errors that\nare common in finite modulus arithmetic. These two limitations of existing\ncompilers and libraries make FHE applications too difficult to develop with\nconfidence.\n  In this work, we present a \\emph{correctness-oriented} IR, Intermediate\nLanguage for Arithmetic circuits, for type-checking circuits intended for\nhomomorphic evaluation. Our IR is backed by a type system that tracks low-level\nquantitative bounds (e.g., ciphertext noise) without using the secret key.\nUsing our type system, we identify and prove a strong \\emph{functional\ncorrectness} criterion for \\ila circuits. Additionally, we have designed \\ila\nto be maximally general: our core type system does not directly assume a\nparticular FHE scheme, but instead axiomatizes a \\emph{model} of FHE. We\ninstantiate this model with the exact FHE schemes (BGV, BFV and TFHE), and\nobtain functional correctness for free.", "AI": {"tldr": "\u63d0\u51fa\u4e86ILA\u4e2d\u95f4\u8868\u793a\u8bed\u8a00\uff0c\u7528\u4e8e\u7c7b\u578b\u68c0\u67e5\u540c\u6001\u52a0\u5bc6\u7535\u8def\u7684\u566a\u58f0\u548c\u7b97\u672f\u6ea2\u51fa\u9519\u8bef\uff0c\u786e\u4fdd\u529f\u80fd\u6b63\u786e\u6027", "motivation": "\u73b0\u6709FHE\u7f16\u8bd1\u5668\u7f3a\u4e4f\u9759\u6001\u566a\u58f0\u8ddf\u8e2a\u80fd\u529b\uff0c\u4e14\u5b58\u5728\u6709\u9650\u6a21\u8fd0\u7b97\u7684\u73af\u7ed5\u9519\u8bef\uff0c\u5bfc\u81f4\u5f00\u53d1FHE\u5e94\u7528\u56f0\u96be", "method": "\u8bbe\u8ba1\u57fa\u4e8e\u7c7b\u578b\u7cfb\u7edf\u7684IR\u8bed\u8a00\uff0c\u8ddf\u8e2a\u5bc6\u7801\u6587\u672c\u566a\u58f0\u7b49\u91cf\u5316\u8fb9\u754c\uff0c\u4e0d\u4f9d\u8d56\u5bc6\u94a5\uff0c\u53ef\u5b9e\u4f8b\u5316\u5230BGV\u3001BFV\u548cTFHE\u7b49\u5177\u4f53\u65b9\u6848", "result": "\u5efa\u7acb\u4e86\u5f3a\u529f\u80fd\u6b63\u786e\u6027\u51c6\u5219\uff0c\u80fd\u591f\u8bc6\u522b\u548c\u8bc1\u660eILA\u7535\u8def\u7684\u6b63\u786e\u6027", "conclusion": "ILA\u63d0\u4f9b\u4e86\u901a\u7528\u7684FHE\u6a21\u578b\u62bd\u8c61\uff0c\u53ef\u786e\u4fdd\u540c\u6001\u8ba1\u7b97\u7535\u8def\u7684\u6b63\u786e\u6027\uff0c\u964d\u4f4e\u5f00\u53d1\u96be\u5ea6"}}
{"id": "2509.11877", "pdf": "https://arxiv.org/pdf/2509.11877", "abs": "https://arxiv.org/abs/2509.11877", "authors": ["Andrei Arusoaie", "Hora\u0163iu Cheval", "Radu Iosif"], "title": "Proceedings 9th edition of Working Formal Methods Symposium", "categories": ["cs.LO", "cs.PL", "cs.SE"], "comment": null, "summary": "This volume contains the proceedings of the 9th Working Formal Methods\nSymposium, which was held at the Alexandru Ioan Cuza University, Ia\\c{s}i,\nRomania on September 17-19, 2025.", "AI": {"tldr": "\u7b2c\u4e5d\u5c4a\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\uff0c\u5305\u542b2025\u5e749\u670817-19\u65e5\u5728\u7f57\u9a6c\u5c3c\u4e9a\u96c5\u897f\u5927\u5b66\u4e3e\u884c\u7684\u4f1a\u8bae\u8bba\u6587", "motivation": "\u6c47\u96c6\u5f62\u5f0f\u5316\u65b9\u6cd5\u9886\u57df\u7684\u6700\u65b0\u7814\u7a76\u6210\u679c\uff0c\u4fc3\u8fdb\u5b66\u672f\u4ea4\u6d41\u4e0e\u5408\u4f5c", "method": "\u4f1a\u8bae\u8bba\u6587\u96c6\u5f62\u5f0f\uff0c\u6536\u5f55\u7ecf\u8fc7\u540c\u884c\u8bc4\u5ba1\u7684\u5b66\u672f\u8bba\u6587", "result": "\u51fa\u7248\u4e86\u5305\u542b\u591a\u7bc7\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u7a76\u8bba\u6587\u7684\u4f1a\u8bae\u8bba\u6587\u96c6", "conclusion": "\u8be5\u8bba\u6587\u96c6\u8bb0\u5f55\u4e86\u7b2c\u4e5d\u5c4a\u5f62\u5f0f\u5316\u65b9\u6cd5\u7814\u8ba8\u4f1a\u7684\u91cd\u8981\u5b66\u672f\u6210\u679c\uff0c\u4e3a\u8be5\u9886\u57df\u7814\u7a76\u8005\u63d0\u4f9b\u4e86\u6709\u4ef7\u503c\u7684\u53c2\u8003\u8d44\u6599"}}
