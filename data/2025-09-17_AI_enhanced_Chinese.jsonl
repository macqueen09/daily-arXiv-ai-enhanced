{"id": "2509.12593", "pdf": "https://arxiv.org/pdf/2509.12593", "abs": "https://arxiv.org/abs/2509.12593", "authors": ["Yimin Zhang", "Mario de Sousa"], "title": "Converting IEC 61131-3 LD into SFC Using Large Language Model: Dataset and Testing", "categories": ["cs.PL"], "comment": null, "summary": "In the domain of Programmable Logic Controller (PLC) programming, converting\na Ladder Diagram (LD) into a Sequential Function Chart (SFC) is an inherently\nchallenging problem, primarily due to the lack of domain-specific knowledge and\nthe issue of state explosion in existing algorithms. However, the rapid\ndevelopment of Artificial Intelligence (AI) - especially Large Language Model\n(LLM) - offers a promising new approach.\n  Despite this potential, data-driven approaches in this field have been\nhindered by a lack of suitable datasets. To address this gap, we constructed\nseveral datasets consisting of paired textual representations of SFC and LD\nprograms that conform to the IEC 61131-3 standard.\n  Based on these datasets, we explored the feasibility of automating the LD-SFC\nconversion using LLM. Our preliminary experiments show that a fine-tuned LLM\nmodel achieves up to 91% accuracy on certain dataset, with the lowest observed\naccuracy being 79%, suggesting that with proper training and representation,\nLLMs can effectively support LD-SFC conversion. These early results highlight\nthe viability and future potential of this approach.", "AI": {"tldr": "\u4f7f\u7528\u7ec6\u8c03\u7684\u5927\u8bed\u8a00\u6a21\u578b\u5c06\u68d2\u56fe\u8f6c\u6362\u4e3a\u987a\u5e8f\u529f\u80fd\u56fe\uff0c\u51c6\u786e\u7387\u8fbe91%\uff0c\u89e3\u51b3\u4e86\u9884\u5148\u77e5\u8bc6\u7f3a\u4e4f\u548c\u72b6\u6001\u7206\u70b8\u95ee\u9898", "motivation": "\u68d2\u56fe(LD)\u8f6c\u6362\u4e3a\u987a\u5e8f\u529f\u80fd\u56fe(SFC)\u9762\u4e34\u9884\u5148\u77e5\u8bc6\u7f3a\u4e4f\u548c\u72b6\u6001\u7206\u70b8\u6311\u6218\uff0c\u800c\u5927\u8bed\u8a00\u6a21\u578b\u7684\u53d1\u5c55\u4e3a\u6b64\u63d0\u4f9b\u4e86\u65b0\u65b9\u6cd5", "method": "\u6784\u5efa\u4e86\u7b26\u5408IEC 61131-3\u6807\u51c6\u7684SFC\u548cLD\u7a0b\u5e8f\u6587\u672c\u8868\u793a\u7684\u5bf9\u5e94\u6570\u636e\u96c6\uff0c\u7136\u540e\u4f7f\u7528\u7ec6\u8c03\u7684LLM\u6a21\u578b\u8fdb\u884c\u81ea\u52a8\u8f6c\u6362", "result": "\u7ec6\u8c03\u540e\u7684LLM\u6a21\u578b\u5728\u67d0\u4e9b\u6570\u636e\u96c6\u4e0a\u8fbe\u5230\u4e8691%\u7684\u51c6\u786e\u7387\uff0c\u6700\u4f4e\u51c6\u786e\u7387\u4e3a79%", "conclusion": "\u901a\u8fc7\u9002\u5f53\u7684\u8bad\u7ec3\u548c\u8868\u793a\u65b9\u5f0f\uff0cLLM\u80fd\u591f\u6709\u6548\u652f\u6301LD-SFC\u8f6c\u6362\uff0c\u8be5\u65b9\u6cd5\u5177\u6709\u53ef\u884c\u6027\u548c\u5e7f\u9614\u7684\u5e94\u7528\u6f5c\u529b"}}
{"id": "2509.13006", "pdf": "https://arxiv.org/pdf/2509.13006", "abs": "https://arxiv.org/abs/2509.13006", "authors": ["Shermin Khosravi", "David Bremner"], "title": "Efficient Compilation of Algorithms into Compact Linear Programs", "categories": ["cs.PL", "cs.MS", "math.OC", "90C05, 90c06, 90c10", "D.3.4; G.4"], "comment": "Preliminary version will appear in CASCON 2025", "summary": "Linear Programming (LP) is widely applied in industry and is a key component\nof various other mathematical problem-solving techniques. Recent work\nintroduced an LP compiler translating polynomial-time, polynomial-space\nalgorithms into polynomial-size LPs using intuitive high-level programming\nlanguages, offering a promising alternative to manually specifying each set of\nconstraints through Algebraic Modeling Languages (AMLs). However, the resulting\nLPs, while polynomial in size, are often extremely large, posing challenges for\nexisting LP solvers. In this paper, we propose a novel approach for generating\nsubstantially smaller LPs from algorithms. Our goal is to establish\nminimum-size compact LP formulations for problems in P having natural\nformulations with exponential extension complexities. Our broader vision is to\nenable the systematic generation of Compact Integer Programming (CIP)\nformulations for problems with exponential-size IPs having polynomial-time\nseparation oracles. To this end, we introduce a hierarchical linear pipelining\ntechnique that decomposes nested program structures into synchronized regions\nwith well-defined execution transitions -- functions of compile-time\nparameters. This decomposition allows us to localize LP constraints and\nvariables within each region, significantly reducing LP size without the loss\nof generality, ensuring the resulting LP remains valid for all inputs of size\n$n$. We demonstrate the effectiveness of our method on two benchmark problems\n-- the makespan problem, which has exponential extension complexity, and the\nweighted minimum spanning tree problem -- both of which have exponential-size\nnatural LPs. Our results show up to a $25$-fold reduction in LP size and\nsubstantial improvements in solver performance across both commercial and\nnon-commercial LP solvers.", "AI": {"tldr": "\u901a\u8fc7\u5206\u5c42\u7ebf\u6027\u6d41\u6c34\u7ebf\u6280\u672f\uff0c\u5c06\u7a0b\u5e8f\u7ed3\u6784\u5206\u89e3\u4e3a\u540c\u6b65\u533a\u57df\uff0c\u5927\u5e45\u51cf\u5c0f\u7ebf\u6027\u89c4\u5212\u95ee\u9898\u7684\u89c4\u6a21\uff0c\u5b9e\u73b0\u4e86\u6709\u6548\u7684\u7f29\u51cf\u6548\u679c\u548c\u6c42\u89e3\u6027\u80fd\u63d0\u5347\u3002", "motivation": "\u89e3\u51b3\u7ebf\u6027\u89c4\u5212\u7f16\u8bd1\u5668\u4ea7\u751f\u7684\u5927\u89c4\u6a21LP\u95ee\u9898\uff0c\u867d\u7136\u591a\u9879\u5f0f\u89c4\u6a21\u4f46\u6781\u5176\u5927\u7684\u89c4\u6a21\u5bf9\u73b0\u6709\u6c42\u89e3\u5668\u6784\u6210\u6311\u6218\uff0c\u9700\u8981\u751f\u6210\u66f4\u5c0f\u7684\u7d27\u51d1LP\u8868\u8fbe\u5f0f\u3002", "method": "\u91c7\u7528\u5206\u5c42\u7ebf\u6027\u6d41\u6c34\u7ebf\u6280\u672f\uff0c\u5c06\u5d4c\u5957\u7a0b\u5e8f\u7ed3\u6784\u5206\u89e3\u4e3a\u540c\u6b65\u533a\u57df\uff0c\u901a\u8fc7\u7f16\u8bd1\u65f6\u53c2\u6570\u5b9a\u4e49\u6267\u884c\u8fc1\u79fb\uff0c\u5b9e\u73b0\u533a\u57df\u5185\u7684\u7ea6\u675f\u548c\u53d8\u91cf\u5c40\u90e8\u5316\uff0c\u4ece\u800c\u5927\u5e45\u51cf\u5c0fLP\u89c4\u6a21\u3002", "result": "\u5728makespan\u95ee\u9898\u548c\u52a0\u6743\u6700\u5c0f\u751f\u6210\u6811\u95ee\u9898\u4e0a\uff0c\u5b9e\u73b0\u4e86\u81f325\u500d\u7684LP\u89c4\u6a21\u7f29\u51cf\uff0c\u5e76\u5728\u5546\u4e1a\u548c\u975e\u5546\u4e1a\u6c42\u89e3\u5668\u4e0a\u83b7\u5f97\u4e86\u663e\u8457\u7684\u6027\u80fd\u63d0\u5347\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u80fd\u591f\u7cfb\u7edf\u5730\u751f\u6210\u7d27\u51d1\u6574\u6570\u89c4\u5212\u8868\u8fbe\u5f0f\uff0c\u4e3a\u5904\u7406\u5177\u6709\u591a\u9879\u5f0f\u65f6\u95f4\u5206\u79bb\u795e\u8c15\u7684\u6307\u6570\u89c4\u6a21IP\u95ee\u9898\u63d0\u4f9b\u4e86\u6709\u6548\u9014\u5f84\uff0c\u4e14\u4fdd\u8bc1\u4e86\u6240\u6709\u8f93\u5165\u89c4\u6a21\u7684\u6709\u6548\u6027\u3002"}}
{"id": "2509.13019", "pdf": "https://arxiv.org/pdf/2509.13019", "abs": "https://arxiv.org/abs/2509.13019", "authors": ["Fr\u00e9d\u00e9ric Fort", "David Nowak", "Vlad Rusu"], "title": "Pleasant Imperative Program Proofs with GallinaC", "categories": ["cs.PL", "cs.LO"], "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Even with the increase of popularity of functional programming, imperative\nprogramming remains a key programming paradigm, especially for programs\noperating at lower levels of abstraction. When such software offers key\ncomponents of a Trusted Computing Base (TCB), e.g. an operating system kernel,\nit becomes desirable to provide mathematical correctness proofs.\n  However, current real-world imperative programming languages possess\n\"expressive\", i.e. overly permissive, semantics. Thus, producing correctness\nproofs of such programs becomes tedious and error-prone, requiring to take care\nof numerous \"administrative\" details. Ideally, a proof-oriented imperative\nlanguage should feature well-behaved semantics while allowing imperative\nidioms.\n  To obtain a high-degree of confidence in the correctness of such a language,\nits tools should be developed inside a proof-assistant such that program proofs\nare machine checked.\n  We present GallinaC, a shallow embedding of a Turing-complete imperative\nlanguage directly inside the functional programming language of the Rocq proof\nassistant, Gallina. In particular, it features a truly generic and unbounded\nwhile loop. Having a functional core means proofs about GallinaC programs may\nuse the same tactics as proofs about pure functional ones.\n  Work on GallinaC is still under progress, but we present first promising\nresults. A prototype implementation has shown the viability of GallinaC with\nthe correctness proof of a list reversal procedure for linked-lists of unknown\nsize. We currently focus on the forward simulation between the GallinaC\nintermediate representation (IR) and Cminor, the entry language of the CompCert\nback-end.", "AI": {"tldr": "GallinaC\u662f\u4e00\u4e2a\u5728Rocq\u8bc1\u660e\u52a9\u624b\u7684Gallina\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u6d45\u5c42\u5d4c\u5165\u7684\u56fe\u7075\u5b8c\u5907\u547d\u4ee4\u5f0f\u8bed\u8a00\uff0c\u65e8\u5728\u4e3a\u4f4e\u7ea7\u7cfb\u7edf\u8f6f\u4ef6\u63d0\u4f9b\u673a\u5668\u9a8c\u8bc1\u7684\u6b63\u786e\u6027\u8bc1\u660e", "motivation": "\u5f53\u524d\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8bed\u8a00\u8bed\u4e49\u8fc7\u4e8e\u5bbd\u677e\uff0c\u4f7f\u5f97\u6b63\u786e\u6027\u8bc1\u660e\u53d8\u5f97\u7e41\u7410\u4e14\u5bb9\u6613\u51fa\u9519\uff0c\u9700\u8981\u4e00\u79cd\u652f\u6301\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8303\u5f0f\u4f46\u5177\u6709\u826f\u597d\u8bed\u4e49\u7684\u8bc1\u660e\u5bfc\u5411\u8bed\u8a00", "method": "\u5728Gallina\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u6d45\u5c42\u5d4c\u5165\u56fe\u7075\u5b8c\u5907\u7684\u547d\u4ee4\u5f0f\u8bed\u8a00\uff0c\u652f\u6301\u65e0\u754cwhile\u5faa\u73af\uff0c\u5229\u7528\u51fd\u6570\u5f0f\u6838\u5fc3\u4f7f\u5f97\u7a0b\u5e8f\u8bc1\u660e\u53ef\u4ee5\u4f7f\u7528\u4e0e\u7eaf\u51fd\u6570\u5f0f\u7a0b\u5e8f\u76f8\u540c\u7684\u7b56\u7565", "result": "\u539f\u578b\u5b9e\u73b0\u5df2\u8bc1\u660eGallinaC\u7684\u53ef\u884c\u6027\uff0c\u6210\u529f\u5b8c\u6210\u4e86\u672a\u77e5\u5927\u5c0f\u94fe\u8868\u7684\u53cd\u8f6c\u7a0b\u5e8f\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u76ee\u524d\u6b63\u4e13\u6ce8\u4e8eGallinaC\u4e2d\u95f4\u8868\u793a\u4e0eCompCert\u540e\u7aef\u5165\u53e3\u8bed\u8a00Cminor\u7684\u524d\u5411\u6a21\u62df", "conclusion": "GallinaC\u4e3a\u4f4e\u7ea7\u7cfb\u7edf\u8f6f\u4ef6\u63d0\u4f9b\u4e86\u4e00\u79cd\u5728\u8bc1\u660e\u52a9\u624b\u4e2d\u673a\u5668\u9a8c\u8bc1\u547d\u4ee4\u5f0f\u7a0b\u5e8f\u6b63\u786e\u6027\u7684\u6709\u524d\u666f\u7684\u65b9\u6cd5"}}
{"id": "2509.13022", "pdf": "https://arxiv.org/pdf/2509.13022", "abs": "https://arxiv.org/abs/2509.13022", "authors": ["Andrei Nacu", "Dorel Lucanu"], "title": "Navigating the Python Type Jungle", "categories": ["cs.PL"], "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Python's typing system has evolved pragmatically into a powerful but\ntheoretically fragmented system, with scattered specifications. This paper\nproposes a formalization to address this fragmentation. The central\ncontribution is a formal foundation that uses concepts from type theory to\ndemonstrate that Python's type system can be elegantly described. This work\naims to serve as a crucial first step toward the future development of type\ninference tools.", "AI": {"tldr": "\u5bf9Python\u7c7b\u578b\u7cfb\u7edf\u8fdb\u884c\u6b63\u5f0f\u5316\u7684\u7814\u7a76\uff0c\u901a\u8fc7\u7c7b\u578b\u7406\u8bba\u6982\u5ff5\u7f8e\u5730\u63cf\u8ff0Python\u7684\u7c7b\u578b\u7cfb\u7edf\uff0c\u4e3a\u7c7b\u578b\u63a8\u65ad\u5de5\u5177\u7684\u53d1\u5c55\u5960\u5b9a\u57fa\u7840", "motivation": "Python\u7684\u7c7b\u578b\u7cfb\u7edf\u5b9e\u8df5\u6027\u5730\u53d1\u5c55\u4e3a\u529f\u80fd\u5f3a\u5927\u4f46\u7406\u8bba\u5206\u6563\u7684\u7cfb\u7edf\uff0c\u89c4\u8303\u6563\u843d\uff0c\u9700\u8981\u6b63\u5f0f\u5316\u6765\u89e3\u51b3\u8fd9\u79cd\u5206\u6563\u95ee\u9898", "method": "\u4f7f\u7528\u7c7b\u578b\u7406\u8bba\u6982\u5ff5\u6784\u5efa\u6b63\u5f0f\u57fa\u7840\uff0c\u901a\u8fc7\u7406\u8bba\u5316\u65b9\u6cd5\u7f8e\u5730\u63cf\u8ff0Python\u7684\u7c7b\u578b\u7cfb\u7edf", "result": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u6b63\u5f0f\u7684\u57fa\u7840\u6846\u67b6\uff0c\u8bc1\u660ePython\u7c7b\u578b\u7cfb\u7edf\u53ef\u4ee5\u88ab\u96c5\u81f4\u5730\u5f62\u5f0f\u5316", "conclusion": "\u8be5\u5de5\u4f5c\u662f\u5411\u7c7b\u578b\u63a8\u65ad\u5de5\u5177\u672a\u6765\u53d1\u5c55\u7684\u5173\u952e\u7b2c\u4e00\u6b65\uff0c\u4e3aPython\u7c7b\u578b\u7cfb\u7edf\u7684\u7406\u8bba\u57fa\u7840\u548c\u5de5\u5177\u652f\u6301\u5960\u5b9a\u4e86\u57fa\u7840"}}
{"id": "2509.13128", "pdf": "https://arxiv.org/pdf/2509.13128", "abs": "https://arxiv.org/abs/2509.13128", "authors": ["Rapha\u00ebl Monat"], "title": "Try-Mopsa: Relational Static Analysis in Your Pocket", "categories": ["cs.PL", "cs.SE"], "comment": null, "summary": "Static analyzers are complex pieces of software with large dependencies. They\ncan be difficult to install, which hinders adoption and creates barriers for\nstudents learning static analysis. This work introduces Try-Mopsa: a\nscaled-down version of the Mopsa static analysis platform, compiled into\nJavaScript to run purely as a client-side application in web browsers.\nTry-Mopsa provides a responsive interface that works on both desktop and mobile\ndevices. Try-Mopsa features all the core components of Mopsa. In particular, it\nsupports relational numerical domains. We present the interface, changes and\nadaptations required to have a pure JavaScript version of Mopsa. We envision\nTry-Mopsa as a convenient platform for onboarding or teaching purposes.", "AI": {"tldr": "Try-Mopsa\u662f\u4e00\u4e2a\u57fa\u4e8eJavaScript\u7684Mopsa\u9759\u6001\u5206\u6790\u5e73\u53f0\u7b80\u5316\u7248\uff0c\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\uff0c\u65e0\u9700\u5b89\u88c5\uff0c\u4fbf\u4e8e\u6559\u5b66\u548c\u5165\u95e8\u4f7f\u7528", "motivation": "\u9759\u6001\u5206\u6790\u5668\u5b89\u88c5\u590d\u6742\u3001\u4f9d\u8d56\u4f17\u591a\uff0c\u963b\u788d\u4e86\u91c7\u7528\u548c\u5b66\u4e60\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0c\u5f00\u53d1\u4e86\u53ef\u5728\u6d4f\u89c8\u5668\u4e2d\u8fd0\u884c\u7684\u7b80\u5316\u7248\u672c", "method": "\u5c06Mopsa\u9759\u6001\u5206\u6790\u5e73\u53f0\u7684\u6838\u5fc3\u7ec4\u4ef6\u7f16\u8bd1\u6210JavaScript\uff0c\u521b\u5efa\u7eaf\u5ba2\u6237\u7aefWeb\u5e94\u7528\uff0c\u652f\u6301\u684c\u9762\u548c\u79fb\u52a8\u8bbe\u5907\uff0c\u4fdd\u7559\u5173\u7cfb\u6570\u503c\u57df\u7b49\u6838\u5fc3\u529f\u80fd", "result": "\u6210\u529f\u5f00\u53d1\u4e86Try-Mopsa\uff0c\u63d0\u4f9b\u4e86\u54cd\u5e94\u5f0f\u754c\u9762\uff0c\u652f\u6301\u6240\u6709Mopsa\u6838\u5fc3\u7ec4\u4ef6\uff0c\u7279\u522b\u662f\u5173\u7cfb\u6570\u503c\u57df", "conclusion": "Try-Mopsa\u4e3a\u9759\u6001\u5206\u6790\u7684\u5b66\u4e60\u548c\u5165\u95e8\u63d0\u4f9b\u4e86\u4fbf\u6377\u5e73\u53f0\uff0c\u964d\u4f4e\u4e86\u4f7f\u7528\u95e8\u69db"}}
{"id": "2509.13261", "pdf": "https://arxiv.org/pdf/2509.13261", "abs": "https://arxiv.org/abs/2509.13261", "authors": ["No\u00e9 De Santo", "Stephanie Weirich"], "title": "Rebound: Efficient, Expressive, and Well-Scoped Binding", "categories": ["cs.PL", "D.3.4"], "comment": "15 pages, 5 figures, 3 tables. To be published in Proceedings of the\n  18th ACM SIGPLAN International Haskell Symposium (Haskell 2025)", "summary": "We introduce the Rebound library that supports well-scoped term\nrepresentations in Haskell and automates the definition of substitution,\nalpha-equivalence, and other operations that work with binding structures. The\nkey idea of our design is the use of first-class environments that map\nvariables to expressions in some new scope. By statically tracking scopes,\nusers of this library gain confidence that they have correctly maintained the\nsubtle invariants that stem from using de Bruijn indices. Behind the scenes,\nRebound uses environments to optimize the application of substitutions, while\nproviding explicit access to these data structures when desired. We demonstrate\nthat this library is expressive by using it to implement a wide range of\nlanguage features with sophisticated uses of binding and several different\noperations that use this abstract syntax. Our examples include pi-forall, a\ntutorial implementation of a type checker for a dependently-typed programming\nlanguage. Finally, we benchmark Rebound to understand its performance\ncharacteristics and find that it produces faster code than competing libraries.", "AI": {"tldr": "Rebound\u662f\u4e00\u4e2aHaskell\u5e93\uff0c\u901a\u8fc7\u9759\u6001\u8ddf\u8e2a\u4f5c\u7528\u57df\u548c\u4e00\u7ea7\u73af\u5883\u6765\u81ea\u52a8\u5316\u5904\u7406\u7ed1\u5b9a\u7ed3\u6784\u7684\u66ff\u6362\u3001alpha\u7b49\u4ef7\u7b49\u64cd\u4f5c\uff0c\u786e\u4fddde Bruijn\u7d22\u5f15\u7684\u6b63\u786e\u4f7f\u7528\uff0c\u5e76\u63d0\u4f9b\u6027\u80fd\u4f18\u5316\u3002", "motivation": "\u5904\u7406\u7ed1\u5b9a\u7ed3\u6784\u65f6\uff0c\u7ef4\u62a4de Bruijn\u7d22\u5f15\u7684\u5fae\u5999\u4e0d\u53d8\u91cf\u5bb9\u6613\u51fa\u9519\uff0c\u9700\u8981\u81ea\u52a8\u5316\u5de5\u5177\u6765\u786e\u4fdd\u6b63\u786e\u6027\u548c\u63d0\u4f9b\u6027\u80fd\u4f18\u5316\u3002", "method": "\u4f7f\u7528\u4e00\u7ea7\u73af\u5883\u6620\u5c04\u53d8\u91cf\u5230\u8868\u8fbe\u5f0f\uff0c\u9759\u6001\u8ddf\u8e2a\u4f5c\u7528\u57df\uff0c\u81ea\u52a8\u5316\u5b9a\u4e49\u66ff\u6362\u3001alpha\u7b49\u4ef7\u7b49\u64cd\u4f5c\uff0c\u5e76\u63d0\u4f9b\u73af\u5883\u6570\u636e\u7ed3\u6784\u7684\u663e\u5f0f\u8bbf\u95ee\u3002", "result": "\u5e93\u5177\u6709\u8868\u8fbe\u6027\uff0c\u80fd\u591f\u5b9e\u73b0\u591a\u79cd\u8bed\u8a00\u7279\u6027\u548c\u590d\u6742\u7ed1\u5b9a\u7528\u6cd5\uff0c\u5728pi-forall\u7c7b\u578b\u68c0\u67e5\u5668\u7b49\u793a\u4f8b\u4e2d\u9a8c\u8bc1\u4e86\u5b9e\u7528\u6027\uff0c\u6027\u80fd\u57fa\u51c6\u6d4b\u8bd5\u663e\u793a\u6bd4\u7ade\u4e89\u5e93\u66f4\u5feb\u3002", "conclusion": "Rebound\u5e93\u6210\u529f\u89e3\u51b3\u4e86\u7ed1\u5b9a\u7ed3\u6784\u5904\u7406\u7684\u6b63\u786e\u6027\u548c\u6027\u80fd\u95ee\u9898\uff0c\u4e3aHaskell\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u53ef\u9760\u7684\u5de5\u5177\u652f\u6301\u3002"}}
{"id": "2509.13026", "pdf": "https://arxiv.org/pdf/2509.13026", "abs": "https://arxiv.org/abs/2509.13026", "authors": ["Adriana Balan", "Silviu-George Pantelimon"], "title": "The Hidden Strength of Costrong Functors", "categories": ["cs.LO", "cs.PL", "math.CT"], "comment": "In Proceedings FROM 2025, arXiv:2509.11877", "summary": "Strong functors and monads are ubiquitous in Computer Science. More recently,\ncomonads have demonstrated their use in structuring context-dependent notions\nof computation. However, the dualisation of ``being strong'' property passed\nsomehow unobserved so far. We argue that ``being costrong'' gives a different\nunderstanding of how functors can interact with monoidal structures. This work\nin progress aims to explore costrong functors and their natural properties,\nwith an eye towards the semantics of computations.", "AI": {"tldr": "\u672c\u6587\u63a2\u8ba8\u4e86costrong\u51fd\u5b50\u7684\u6982\u5ff5\uff0c\u8fd9\u662fstrong\u51fd\u5b50\u7684\u5bf9\u5076\u6027\u8d28\uff0c\u65e8\u5728\u7814\u7a76\u51fd\u5b50\u4e0e\u5e7a\u534a\u7ed3\u6784\u7684\u4ea4\u4e92\u65b9\u5f0f\u53ca\u5176\u5728\u8ba1\u7b97\u8bed\u4e49\u4e2d\u7684\u5e94\u7528\u3002", "motivation": "strong\u51fd\u5b50\u548cmonad\u5728\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u65e0\u5904\u4e0d\u5728\uff0ccomonad\u5728\u7ed3\u6784\u5316\u4e0a\u4e0b\u6587\u76f8\u5173\u8ba1\u7b97\u6982\u5ff5\u4e2d\u4e5f\u663e\u793a\u51fa\u5176\u7528\u9014\uff0c\u4f46\"being strong\"\u6027\u8d28\u7684\u5bf9\u5076\u5316\uff08\u5373\"being costrong\"\uff09\u81f3\u4eca\u672a\u88ab\u5145\u5206\u7814\u7a76\u3002", "method": "\u8fd9\u9879\u5de5\u4f5c\u6b63\u5728\u8fdb\u884c\u4e2d\uff0c\u65e8\u5728\u63a2\u7d22costrong\u51fd\u5b50\u53ca\u5176\u81ea\u7136\u6027\u8d28\uff0c\u91cd\u70b9\u5173\u6ce8\u8ba1\u7b97\u8bed\u4e49\u5b66\u3002", "result": "\u76ee\u524d\u662f\u5de5\u4f5c\u8fdb\u5c55\u9636\u6bb5\uff0c\u5177\u4f53\u7ed3\u679c\u5c1a\u672a\u516c\u5e03\u3002", "conclusion": "costrong\u6027\u8d28\u4e3a\u7406\u89e3\u51fd\u5b50\u5982\u4f55\u4e0e\u5e7a\u534a\u7ed3\u6784\u4ea4\u4e92\u63d0\u4f9b\u4e86\u4e0d\u540c\u7684\u89c6\u89d2\uff0c\u5bf9\u8ba1\u7b97\u8bed\u4e49\u5b66\u5177\u6709\u91cd\u8981\u610f\u4e49\uff0c\u503c\u5f97\u8fdb\u4e00\u6b65\u6df1\u5165\u7814\u7a76\u3002"}}
{"id": "2509.13121", "pdf": "https://arxiv.org/pdf/2509.13121", "abs": "https://arxiv.org/abs/2509.13121", "authors": ["Faruk Alpay", "Hamdi Alakkad"], "title": "On the Fixed Point Property in Reflexive Banach Spaces", "categories": ["math.FA", "cs.PL", "47H10, 47H09, 46B20, 65J15", "F.2.1; D.3.4"], "comment": "35 pages, 1 fig., asm", "summary": "Fixed point theory studies conditions under which nonexpansive maps on Banach\nspaces have fixed points. This paper examines the open question of whether\nevery reflexive Banach space has the fixed point property. After surveying\nclassical results, we propose a quantitative framework based on diametral l1\npressure and weighted selection functionals, which measure how much an orbit\nhull of a fixed point free nonexpansive map can collapse. We prove that if\neither invariant is uniformly positive, then the space must contain a copy of\nl1 and thus cannot be reflexive. We present finite dimensional certificates,\npositive and negative examples, and an x86-64 routine that computes mutual\ncoherence and a lower bound for the pressure. The paper clarifies why existing\napproaches fail and outlines open problems and ethical considerations.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u81ea\u53cdBanach\u7a7a\u95f4\u662f\u5426\u5177\u6709\u4e0d\u52a8\u70b9\u6027\u8d28\u7684\u5f00\u653e\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u57fa\u4e8e\u76f4\u5f84l1\u538b\u529b\u548c\u52a0\u6743\u9009\u62e9\u6cdb\u51fd\u7684\u5b9a\u91cf\u6846\u67b6\uff0c\u8bc1\u660e\u5982\u679c\u8fd9\u4e9b\u4e0d\u53d8\u91cf\u4e00\u81f4\u4e3a\u6b63\uff0c\u5219\u7a7a\u95f4\u5fc5\u987b\u5305\u542bl1\u526f\u672c\uff0c\u4ece\u800c\u4e0d\u80fd\u662f\u81ea\u53cd\u7684\u3002", "motivation": "\u89e3\u51b3\u81ea\u53cdBanach\u7a7a\u95f4\u662f\u5426\u5177\u6709\u4e0d\u52a8\u70b9\u6027\u8d28\u7684\u957f\u671f\u5f00\u653e\u95ee\u9898\uff0c\u73b0\u6709\u65b9\u6cd5\u5b58\u5728\u5c40\u9650\u6027\uff0c\u9700\u8981\u65b0\u7684\u5b9a\u91cf\u5206\u6790\u6846\u67b6\u3002", "method": "\u63d0\u51fa\u57fa\u4e8e\u76f4\u5f84l1\u538b\u529b\u548c\u52a0\u6743\u9009\u62e9\u6cdb\u51fd\u7684\u5b9a\u91cf\u6846\u67b6\uff0c\u6d4b\u91cf\u65e0\u4e0d\u52a8\u70b9\u975e\u6269\u5f20\u6620\u5c04\u7684\u8f68\u9053\u58f3\u584c\u9677\u7a0b\u5ea6\uff0c\u5f00\u53d1\u6709\u9650\u7ef4\u8bc1\u4e66\u548cx86-64\u8ba1\u7b97\u7a0b\u5e8f\u3002", "result": "\u8bc1\u660e\u5982\u679c\u76f4\u5f84l1\u538b\u529b\u6216\u52a0\u6743\u9009\u62e9\u6cdb\u51fd\u4e00\u81f4\u4e3a\u6b63\uff0c\u5219Banach\u7a7a\u95f4\u5fc5\u987b\u5305\u542bl1\u526f\u672c\uff0c\u56e0\u6b64\u4e0d\u80fd\u662f\u81ea\u53cd\u7684\u3002", "conclusion": "\u5efa\u7acb\u4e86\u65b0\u7684\u5b9a\u91cf\u5206\u6790\u6846\u67b6\u6765\u89e3\u51b3\u4e0d\u52a8\u70b9\u6027\u8d28\u95ee\u9898\uff0c\u6f84\u6e05\u4e86\u73b0\u6709\u65b9\u6cd5\u7684\u5931\u8d25\u539f\u56e0\uff0c\u5e76\u63d0\u51fa\u4e86\u5f00\u653e\u95ee\u9898\u548c\u4f26\u7406\u8003\u91cf\u3002"}}
