{"id": "2509.14496", "pdf": "https://arxiv.org/pdf/2509.14496", "abs": "https://arxiv.org/abs/2509.14496", "authors": ["Wyatt Petula", "Anushcka Joshi", "Peggy Tu", "Amrutha Somasundar", "Suman Saha"], "title": "DeliverC: Teaching Pointers through GenAI-Powered Game-Based Learning", "categories": ["cs.PL"], "comment": "The paper before Camera-ready paper. The paper has been accepted by\n  SIGCSE 2026", "summary": "While game-based learning is widely used in programming education, few tools\noffer adaptive, real-time support for complex topics, such as C pointers. We\npresent DeliverC, a GenAI-enhanced game that integrates GPT-4-mini to provide\npersonalized hints and generate pointer-related challenges on the fly. In a\npilot study involving 25 undergraduate students, we investigated the impact of\nthe system on learning through gameplay data and a 15-item survey that covered\nconstructs such as motivation, self-efficacy, metacognition, and feedback\nquality. Results show that most students felt more confident and reflective\nafter using the tool, and error rates decreased as students progressed through\nscaffolded levels. However, participation decreased with task difficulty, and\nsome students reported receiving unclear or vague feedback. These findings\nsuggest that DeliverC can enhance engagement and understanding in systems\nprogramming, although refinement in AI-generated feedback is still needed. Our\nstudy highlights the potential of combining GenAI with game-based learning to\nsupport personalized and interactive practice in traditionally challenging\nprogramming domains.", "AI": {"tldr": "DeliverC\u662f\u4e00\u4e2a\u96c6\u6210GPT-4-mini\u7684GenAI\u589e\u5f3a\u6e38\u620f\uff0c\u4e3aC\u8bed\u8a00\u6307\u9488\u5b66\u4e60\u63d0\u4f9b\u5b9e\u65f6\u4e2a\u6027\u5316\u63d0\u793a\u548c\u6311\u6218\u751f\u6210\u3002\u7814\u7a76\u8868\u660e\u5b83\u80fd\u63d0\u5347\u5b66\u751f\u4fe1\u5fc3\u548c\u53cd\u601d\u80fd\u529b\uff0c\u4f46AI\u53cd\u9988\u8d28\u91cf\u4ecd\u9700\u6539\u8fdb\u3002", "motivation": "\u4f20\u7edf\u6e38\u620f\u5316\u7f16\u7a0b\u6559\u80b2\u7f3a\u4e4f\u5bf9\u590d\u6742\u4e3b\u9898\uff08\u5982C\u6307\u9488\uff09\u7684\u5b9e\u65f6\u81ea\u9002\u5e94\u652f\u6301\uff0c\u9700\u8981\u5f00\u53d1\u80fd\u591f\u63d0\u4f9b\u4e2a\u6027\u5316\u5b66\u4e60\u4f53\u9a8c\u7684\u5de5\u5177\u3002", "method": "\u5f00\u53d1DeliverC\u6e38\u620f\uff0c\u96c6\u6210GPT-4-mini\u63d0\u4f9b\u4e2a\u6027\u5316\u63d0\u793a\u548c\u52a8\u6001\u751f\u6210\u6307\u9488\u76f8\u5173\u6311\u6218\u3002\u901a\u8fc725\u540d\u672c\u79d1\u751f\u7684\u8bd5\u70b9\u7814\u7a76\uff0c\u6536\u96c6\u6e38\u620f\u6570\u636e\u548c15\u9879\u95ee\u5377\u8c03\u67e5\uff0c\u8bc4\u4f30\u52a8\u673a\u3001\u81ea\u6211\u6548\u80fd\u3001\u5143\u8ba4\u77e5\u548c\u53cd\u9988\u8d28\u91cf\u7b49\u6784\u5ff5\u3002", "result": "\u5927\u591a\u6570\u5b66\u751f\u4f7f\u7528\u540e\u611f\u5230\u66f4\u81ea\u4fe1\u548c\u5584\u4e8e\u53cd\u601d\uff0c\u9519\u8bef\u7387\u968f\u811a\u624b\u67b6\u5f0f\u5173\u5361\u8fdb\u5c55\u800c\u4e0b\u964d\u3002\u4f46\u53c2\u4e0e\u5ea6\u968f\u4efb\u52a1\u96be\u5ea6\u589e\u52a0\u800c\u964d\u4f4e\uff0c\u90e8\u5206\u5b66\u751f\u53cd\u9988AI\u751f\u6210\u7684\u63d0\u793a\u4e0d\u591f\u6e05\u6670\u3002", "conclusion": "DeliverC\u80fd\u591f\u589e\u5f3a\u7cfb\u7edf\u7f16\u7a0b\u7684\u53c2\u4e0e\u5ea6\u548c\u7406\u89e3\uff0c\u4f46\u9700\u8981\u6539\u8fdbAI\u751f\u6210\u53cd\u9988\u7684\u8d28\u91cf\u3002\u7814\u7a76\u5c55\u793a\u4e86GenAI\u4e0e\u6e38\u620f\u5316\u5b66\u4e60\u7ed3\u5408\u5728\u4f20\u7edf\u6311\u6218\u6027\u7f16\u7a0b\u9886\u57df\u652f\u6301\u4e2a\u6027\u5316\u4ea4\u4e92\u5b9e\u8df5\u7684\u6f5c\u529b\u3002"}}
{"id": "2509.15005", "pdf": "https://arxiv.org/pdf/2509.15005", "abs": "https://arxiv.org/abs/2509.15005", "authors": ["Facundo Dom\u00ednguez", "Arnaud Spiwack"], "title": "Refinement-Types Driven Development: A study", "categories": ["cs.PL"], "comment": "11 pages, 3 figures, artifacts\n  https://github.com/tweag/ifl2025-liquidhaskell", "summary": "This paper advocates for the broader application of SMT solvers in everyday\nprogramming, challenging the conventional wisdom that these tools are solely\nfor formal methods and verification. We claim that SMT solvers, when seamlessly\nintegrated into a compiler's static checks, significantly enhance the\ncapabilities of ordinary type checkers in program composition. Specifically, we\nargue that refinement types, as embodied by Liquid Haskell, enable the use of\nSMT solvers in mundane programming tasks. Through a case study on handling\nbinder scopes in compilers, we envision a future where ordinary programming is\nmade simpler and more enjoyable with the aid of refinement types and SMT\nsolvers. As a secondary contribution, we present a prototype implementation of\na theory of finite maps for Liquid Haskell's solver, developed to support our\ncase study.", "AI": {"tldr": "\u63a8\u5e7fSMT\u6c42\u89e3\u5668\u5728\u65e5\u5e38\u7f16\u7a0b\u4e2d\u7684\u5e94\u7528\uff0c\u901a\u8fc7\u7cbe\u7ec6\u7c7b\u578b\u4e0e\u7f16\u8bd1\u5668\u6574\u5408\u63d0\u5347\u7a0b\u5e8f\u7ec4\u5408\u80fd\u529b", "motivation": "\u8d28\u7591SMT\u6c42\u89e3\u5668\u4ec5\u9002\u7528\u4e8e\u5f62\u5f0f\u9a8c\u8bc1\u7684\u4f20\u7edf\u89c2\u70b9\uff0c\u8ba4\u4e3a\u5176\u5728\u666e\u901a\u7f16\u7a0b\u4efb\u52a1\u4e2d\u4e5f\u6709\u5e7f\u9614\u5e94\u7528\u6f5c\u529b", "method": "\u91c7\u7528Liquid Haskell\u7684\u7cbe\u7ec6\u7c7b\u578b\u6280\u672f\uff0c\u5c06SMT\u6c42\u89e3\u5668\u96c6\u6210\u5230\u7f16\u8bd1\u5668\u9759\u6001\u68c0\u67e5\u4e2d\uff0c\u5e76\u901a\u8fc7\u7f16\u8bd1\u5668\u7ed1\u5b9a\u8303\u56f4\u7684\u6848\u4f8b\u7814\u7a76\u8fdb\u884c\u9a8c\u8bc1", "result": "\u5f00\u53d1\u4e86Liquid Haskell\u6709\u9650\u6620\u5c04\u7406\u8bba\u7684\u539f\u578b\u5b9e\u73b0\uff0c\u652f\u6301\u6848\u4f8b\u7814\u7a76\uff0c\u8bc1\u660e\u4e86SMT\u6c42\u89e3\u5668\u5728\u666e\u901a\u7f16\u7a0b\u4e2d\u7684\u53ef\u884c\u6027", "conclusion": "\u7cbe\u7ec6\u7c7b\u578b\u548cSMT\u6c42\u89e3\u5668\u7684\u7ed3\u5408\u80fd\u591f\u8ba9\u666e\u901a\u7f16\u7a0b\u66f4\u7b80\u5355\u3001\u66f4\u6109\u5feb\uff0c\u4e3a\u65e5\u5e38\u7f16\u7a0b\u5de5\u5177\u94fe\u5e26\u6765\u91cd\u5927\u6539\u8fdb"}}
{"id": "2509.14404", "pdf": "https://arxiv.org/pdf/2509.14404", "abs": "https://arxiv.org/abs/2509.14404", "authors": ["Haoye Tian", "Chong Wang", "BoYang Yang", "Lyuye Zhang", "Yang Liu"], "title": "A Taxonomy of Prompt Defects in LLM Systems", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.PL"], "comment": null, "summary": "Large Language Models (LLMs) have become key components of modern software,\nwith prompts acting as their de-facto programming interface. However, prompt\ndesign remains largely empirical and small mistakes can cascade into\nunreliable, insecure, or inefficient behavior. This paper presents the first\nsystematic survey and taxonomy of prompt defects, recurring ways that prompts\nfail to elicit their intended behavior from LLMs. We organize defects along six\ndimensions: (1) Specification and Intent, (2) Input and Content, (3) Structure\nand Formatting, (4) Context and Memory, (5) Performance and Efficiency, and (6)\nMaintainability and Engineering. Each dimension is refined into fine-grained\nsubtypes, illustrated with concrete examples and root cause analysis. Grounded\nin software engineering principles, we show how these defects surface in real\ndevelopment workflows and examine their downstream effects. For every subtype,\nwe distill mitigation strategies that span emerging prompt engineering\npatterns, automated guardrails, testing harnesses, and evaluation frameworks.\nWe then summarize these strategies in a master taxonomy that links defect,\nimpact, and remedy. We conclude with open research challenges and a call for\nrigorous engineering-oriented methodologies to ensure that LLM-driven systems\nare dependable by design.", "AI": {"tldr": "\u672c\u6587\u9996\u6b21\u7cfb\u7edf\u6027\u5730\u8c03\u67e5\u548c\u5206\u7c7b\u4e86\u63d0\u793a\u7f3a\u9677\uff0c\u5c06\u63d0\u793a\u7f3a\u9677\u5206\u4e3a6\u4e2a\u7ef4\u5ea6\uff0c\u63d0\u4f9b\u4e86\u5177\u4f53\u7684\u7f3a\u9677\u793a\u4f8b\u3001\u6839\u672c\u539f\u56e0\u5206\u6790\u548c\u7f13\u89e3\u7b56\u7565\uff0c\u65e8\u5728\u63d0\u9ad8LLM\u9a71\u52a8\u7cfb\u7edf\u7684\u53ef\u9760\u6027\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5df2\u6210\u4e3a\u73b0\u4ee3\u8f6f\u4ef6\u7684\u5173\u952e\u7ec4\u4ef6\uff0c\u4f46\u63d0\u793a\u8bbe\u8ba1\u4ecd\u4e3b\u8981\u4f9d\u8d56\u7ecf\u9a8c\uff0c\u5c0f\u9519\u8bef\u53ef\u80fd\u5bfc\u81f4\u4e0d\u53ef\u9760\u3001\u4e0d\u5b89\u5168\u6216\u4f4e\u6548\u7684\u884c\u4e3a\uff0c\u9700\u8981\u7cfb\u7edf\u5316\u7684\u7f3a\u9677\u5206\u7c7b\u548c\u7f13\u89e3\u65b9\u6cd5\u3002", "method": "\u901a\u8fc7\u7cfb\u7edf\u8c03\u67e5\u548c\u5206\u7c7b\u5b66\u65b9\u6cd5\uff0c\u5c06\u63d0\u793a\u7f3a\u9677\u7ec4\u7ec7\u4e3a6\u4e2a\u7ef4\u5ea6\uff1a\u89c4\u8303\u548c\u610f\u56fe\u3001\u8f93\u5165\u548c\u5185\u5bb9\u3001\u7ed3\u6784\u548c\u683c\u5f0f\u3001\u4e0a\u4e0b\u6587\u548c\u5185\u5b58\u3001\u6027\u80fd\u548c\u6548\u7387\u3001\u53ef\u7ef4\u62a4\u6027\u548c\u5de5\u7a0b\u5316\uff0c\u6bcf\u4e2a\u7ef4\u5ea6\u7ec6\u5206\u4e3a\u5b50\u7c7b\u578b\u5e76\u63d0\u4f9b\u5177\u4f53\u793a\u4f8b\u548c\u6839\u672c\u539f\u56e0\u5206\u6790\u3002", "result": "\u5efa\u7acb\u4e86\u5b8c\u6574\u7684\u63d0\u793a\u7f3a\u9677\u5206\u7c7b\u4f53\u7cfb\uff0c\u4e3a\u6bcf\u79cd\u7f3a\u9677\u7c7b\u578b\u63d0\u4f9b\u4e86\u7f13\u89e3\u7b56\u7565\uff0c\u5305\u62ec\u65b0\u5174\u7684\u63d0\u793a\u5de5\u7a0b\u6a21\u5f0f\u3001\u81ea\u52a8\u5316\u62a4\u680f\u3001\u6d4b\u8bd5\u6846\u67b6\u548c\u8bc4\u4f30\u6846\u67b6\uff0c\u5e76\u603b\u7ed3\u4e86\u8fde\u63a5\u7f3a\u9677\u3001\u5f71\u54cd\u548c\u8865\u6551\u63aa\u65bd\u7684\u4e3b\u5206\u7c7b\u6cd5\u3002", "conclusion": "\u63d0\u51fa\u4e86\u9762\u5411\u5de5\u7a0b\u7684\u4e25\u683c\u65b9\u6cd5\u5b66\u9700\u6c42\uff0c\u4ee5\u786e\u4fddLLM\u9a71\u52a8\u7cfb\u7edf\u5728\u8bbe\u8ba1\u4e0a\u5c31\u662f\u53ef\u9760\u7684\uff0c\u5e76\u6307\u51fa\u4e86\u5f00\u653e\u7684\u7814\u7a76\u6311\u6218\u3002"}}
{"id": "2509.14623", "pdf": "https://arxiv.org/pdf/2509.14623", "abs": "https://arxiv.org/abs/2509.14623", "authors": ["Hanlong Wan", "Xing Lu", "Yan Chen", "Karthik Devaprasad", "Laura Hinkle"], "title": "Automating Modelica Module Generation Using Large Language Models: A Case Study on Building Control Description Language", "categories": ["cs.SE", "cs.AI", "cs.PL", "cs.SY", "eess.SY"], "comment": "This is the pre-peer-review version of a journal paper; the repo is\n  available at: https://github.com/pnnl/prompt2control", "summary": "Dynamic energy systems and controls require advanced modeling frameworks to\ndesign and test supervisory and fault tolerant strategies. Modelica is a widely\nused equation based language, but developing control modules is labor intensive\nand requires specialized expertise. This paper examines the use of large\nlanguage models (LLMs) to automate the generation of Control Description\nLanguage modules in the Building Modelica Library as a case study. We developed\na structured workflow that combines standardized prompt scaffolds, library\naware grounding, automated compilation with OpenModelica, and human in the loop\nevaluation. Experiments were carried out on four basic logic tasks (And, Or,\nNot, and Switch) and five control modules (chiller enable/disable, bypass valve\ncontrol, cooling tower fan speed, plant requests, and relief damper control).\nThe results showed that GPT 4o failed to produce executable Modelica code in\nzero shot mode, while Claude Sonnet 4 achieved up to full success for basic\nlogic blocks with carefully engineered prompts. For control modules, success\nrates reached 83 percent, and failed outputs required medium level human repair\n(estimated one to eight hours). Retrieval augmented generation often produced\nmismatches in module selection (for example, And retrieved as Or), while a\ndeterministic hard rule search strategy avoided these errors. Human evaluation\nalso outperformed AI evaluation, since current LLMs cannot assess simulation\nresults or validate behavioral correctness. Despite these limitations, the LLM\nassisted workflow reduced the average development time from 10 to 20 hours down\nto 4 to 6 hours per module, corresponding to 40 to 60 percent time savings.\nThese results highlight both the potential and current limitations of LLM\nassisted Modelica generation, and point to future research in pre simulation\nvalidation, stronger grounding, and closed loop evaluation.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4f7f\u7528\u5927\u578b\u8bed\u8a00\u6a21\u578b\u81ea\u52a8\u751f\u6210Modelica\u63a7\u5236\u6a21\u5757\uff0c\u5f00\u53d1\u4e86\u7ed3\u5408\u6807\u51c6\u5316\u63d0\u793a\u3001\u5e93\u611f\u77e5\u3001\u81ea\u52a8\u7f16\u8bd1\u548c\u4eba\u5de5\u8bc4\u4f30\u7684\u5de5\u4f5c\u6d41\u7a0b\u3002GPT-4o\u96f6\u6837\u672c\u6a21\u5f0f\u5931\u8d25\uff0cClaude Sonnet 4\u5728\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u63d0\u793a\u4e0b\u5bf9\u57fa\u7840\u903b\u8f91\u6a21\u5757\u8fbe\u5230\u5b8c\u5168\u6210\u529f\uff0c\u63a7\u5236\u6a21\u5757\u6210\u529f\u738783%\uff0c\u5f00\u53d1\u65f6\u95f4\u51cf\u5c1140-60%\u3002", "motivation": "Modelica\u4f5c\u4e3a\u5e7f\u6cdb\u4f7f\u7528\u7684\u57fa\u4e8e\u65b9\u7a0b\u7684\u8bed\u8a00\uff0c\u5f00\u53d1\u63a7\u5236\u6a21\u5757\u52b3\u52a8\u5bc6\u96c6\u4e14\u9700\u8981\u4e13\u4e1a\u77e5\u8bc6\uff0c\u9700\u8981\u81ea\u52a8\u5316\u751f\u6210\u65b9\u6cd5\u6765\u63d0\u9ad8\u6548\u7387\u3002", "method": "\u5f00\u53d1\u7ed3\u6784\u5316\u5de5\u4f5c\u6d41\u7a0b\uff0c\u5305\u62ec\u6807\u51c6\u5316\u63d0\u793a\u652f\u67b6\u3001\u5e93\u611f\u77e5\u63a5\u5730\u3001OpenModelica\u81ea\u52a8\u7f16\u8bd1\u548c\u4eba\u5de5\u5faa\u73af\u8bc4\u4f30\uff0c\u5728\u57fa\u7840\u903b\u8f91\u4efb\u52a1\u548c\u63a7\u5236\u6a21\u5757\u4e0a\u8fdb\u884c\u5b9e\u9a8c\u3002", "result": "GPT-4o\u96f6\u6837\u672c\u6a21\u5f0f\u65e0\u6cd5\u751f\u6210\u53ef\u6267\u884c\u4ee3\u7801\uff0cClaude Sonnet 4\u5728\u57fa\u7840\u903b\u8f91\u5757\u4e0a\u8fbe\u5230\u5b8c\u5168\u6210\u529f\uff0c\u63a7\u5236\u6a21\u5757\u6210\u529f\u738783%\uff0c\u5931\u8d25\u8f93\u51fa\u9700\u8981\u4e2d\u7b49\u7a0b\u5ea6\u4eba\u5de5\u4fee\u590d\uff081-8\u5c0f\u65f6\uff09\uff0c\u5f00\u53d1\u65f6\u95f4\u4ece10-20\u5c0f\u65f6\u51cf\u5c11\u52304-6\u5c0f\u65f6\u3002", "conclusion": "LLM\u8f85\u52a9\u5de5\u4f5c\u6d41\u7a0b\u663e\u793a\u51fa\u6f5c\u529b\u4f46\u5b58\u5728\u5c40\u9650\uff0c\u9700\u8981\u672a\u6765\u7814\u7a76\u5173\u6ce8\u9884\u6a21\u62df\u9a8c\u8bc1\u3001\u66f4\u5f3a\u63a5\u5730\u548c\u95ed\u73af\u8bc4\u4f30\u3002"}}
{"id": "2509.14635", "pdf": "https://arxiv.org/pdf/2509.14635", "abs": "https://arxiv.org/abs/2509.14635", "authors": ["Weihan Peng", "Yuling Shi", "Yuhang Wang", "Xinyun Zhang", "Beijun Shen", "Xiaodong Gu"], "title": "SWE-QA: Can Language Models Answer Repository-level Code Questions?", "categories": ["cs.CL", "cs.PL", "cs.SE"], "comment": "Code and data available at\n  https://github.com/peng-weihan/SWE-QA-Bench", "summary": "Understanding and reasoning about entire software repositories is an\nessential capability for intelligent software engineering tools. While existing\nbenchmarks such as CoSQA and CodeQA have advanced the field, they predominantly\nfocus on small, self-contained code snippets. These setups fail to capture the\ncomplexity of real-world repositories, where effective understanding and\nreasoning often require navigating multiple files, understanding software\narchitecture, and grounding answers in long-range code dependencies. In this\npaper, we present SWE-QA, a repository-level code question answering (QA)\nbenchmark designed to facilitate research on automated QA systems in realistic\ncode environments. SWE-QA involves 576 high-quality question-answer pairs\nspanning diverse categories, including intention understanding, cross-file\nreasoning, and multi-hop dependency analysis. To construct SWE-QA, we first\ncrawled 77,100 GitHub issues from 11 popular repositories. Based on an analysis\nof naturally occurring developer questions extracted from these issues, we\ndeveloped a two-level taxonomy of repository-level questions and constructed a\nset of seed questions for each category. For each category, we manually curated\nand validated questions and collected their corresponding answers. As a\nprototype application, we further develop SWE-QA-Agent, an agentic framework in\nwhich LLM agents reason and act to find answers automatically. We evaluate six\nadvanced LLMs on SWE-QA under various context augmentation strategies.\nExperimental results highlight the promise of LLMs, particularly our\nSWE-QA-Agent framework, in addressing repository-level QA, while also revealing\nopen challenges and pointing to future research directions.", "AI": {"tldr": "SWE-QA\u662f\u4e00\u4e2a\u4ed3\u5e93\u7ea7\u4ee3\u7801\u95ee\u7b54\u57fa\u51c6\u6570\u636e\u96c6\uff0c\u5305\u542b576\u4e2a\u9ad8\u8d28\u91cf\u95ee\u7b54\u5bf9\uff0c\u6db5\u76d6\u591a\u6587\u4ef6\u63a8\u7406\u548c\u4f9d\u8d56\u5206\u6790\u7b49\u590d\u6742\u573a\u666f\uff0c\u65e8\u5728\u63a8\u52a8\u771f\u5b9e\u4ee3\u7801\u73af\u5883\u4e2d\u7684\u81ea\u52a8\u5316\u95ee\u7b54\u7cfb\u7edf\u7814\u7a76\u3002", "motivation": "\u73b0\u6709\u57fa\u51c6\u5982CoSQA\u548cCodeQA\u4e3b\u8981\u5173\u6ce8\u5c0f\u578b\u81ea\u5305\u542b\u4ee3\u7801\u7247\u6bb5\uff0c\u65e0\u6cd5\u6355\u6349\u771f\u5b9e\u8f6f\u4ef6\u4ed3\u5e93\u7684\u590d\u6742\u6027\uff0c\u9700\u8981\u7406\u89e3\u591a\u6587\u4ef6\u3001\u8f6f\u4ef6\u67b6\u6784\u548c\u957f\u8ddd\u79bb\u4ee3\u7801\u4f9d\u8d56\u3002", "method": "\u4ece11\u4e2a\u6d41\u884c\u4ed3\u5e93\u768477,100\u4e2aGitHub\u95ee\u9898\u4e2d\u63d0\u53d6\u5f00\u53d1\u8005\u95ee\u9898\uff0c\u5efa\u7acb\u4e24\u7ea7\u5206\u7c7b\u6cd5\uff0c\u4e3a\u6bcf\u4e2a\u7c7b\u522b\u624b\u52a8\u6784\u5efa\u548c\u9a8c\u8bc1\u95ee\u7b54\u5bf9\uff0c\u5e76\u5f00\u53d1SWE-QA-Agent\u4ee3\u7406\u6846\u67b6\u8fdb\u884c\u81ea\u52a8\u63a8\u7406\u3002", "result": "\u8bc4\u4f30\u4e866\u4e2a\u5148\u8fdbLLM\u5728\u4e0d\u540c\u4e0a\u4e0b\u6587\u589e\u5f3a\u7b56\u7565\u4e0b\u7684\u8868\u73b0\uff0c\u7ed3\u679c\u663e\u793aLLMs\u7279\u522b\u662fSWE-QA-Agent\u6846\u67b6\u5728\u4ed3\u5e93\u7ea7\u95ee\u7b54\u65b9\u9762\u5177\u6709\u6f5c\u529b\u3002", "conclusion": "SWE-QA\u4e3a\u4ed3\u5e93\u7ea7\u4ee3\u7801\u95ee\u7b54\u7814\u7a76\u63d0\u4f9b\u4e86\u91cd\u8981\u57fa\u51c6\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u6311\u6218\u5e76\u6307\u660e\u4e86\u672a\u6765\u7814\u7a76\u65b9\u5411\uff0cLLM\u4ee3\u7406\u6846\u67b6\u5c55\u73b0\u51fa\u89e3\u51b3\u590d\u6742\u4ee3\u7801\u63a8\u7406\u95ee\u9898\u7684\u524d\u666f\u3002"}}
{"id": "2509.14646", "pdf": "https://arxiv.org/pdf/2509.14646", "abs": "https://arxiv.org/abs/2509.14646", "authors": ["Yongpan Wang", "Xin Xu", "Xiaojie Zhu", "Xiaodong Gu", "Beijun Shen"], "title": "SALT4Decompile: Inferring Source-level Abstract Logic Tree for LLM-Based Binary Decompilation", "categories": ["cs.SE", "cs.PL"], "comment": "13 pages, 7 figures", "summary": "Decompilation is widely used in reverse engineering to recover high-level\nlanguage code from binary executables. While recent approaches leveraging Large\nLanguage Models (LLMs) have shown promising progress, they typically treat\nassembly code as a linear sequence of instructions, overlooking arbitrary jump\npatterns and isolated data segments inherent to binary files. This limitation\nsignificantly hinders their ability to correctly infer source code semantics\nfrom assembly code. To address this limitation, we propose \\saltm, a novel\nbinary decompilation method that abstracts stable logical features shared\nbetween binary and source code. The core idea of \\saltm is to abstract selected\nbinary-level operations, such as specific jumps, into a high-level logic\nframework that better guides LLMs in semantic recovery. Given a binary\nfunction, \\saltm constructs a Source-level Abstract Logic Tree (\\salt) from\nassembly code to approximate the logic structure of high-level language. It\nthen fine-tunes an LLM using the reconstructed \\salt to generate decompiled\ncode. Finally, the output is refined through error correction and symbol\nrecovery to improve readability and correctness. We compare \\saltm to three\ncategories of baselines (general-purpose LLMs, commercial decompilers, and\ndecompilation methods) using three well-known datasets (Decompile-Eval, MBPP,\nExebench). Our experimental results demonstrate that \\saltm is highly effective\nin recovering the logic of the source code, significantly outperforming\nstate-of-the-art methods (e.g., 70.4\\% TCP rate on Decompile-Eval with a 10.6\\%\nimprovement). The results further validate its robustness against four commonly\nused obfuscation techniques. Additionally, analyses of real-world software and\na user study confirm that our decompiled output offers superior assistance to\nhuman analysts in comprehending binary functions.", "AI": {"tldr": "SALTM\u662f\u4e00\u79cd\u65b0\u9896\u7684\u4e8c\u8fdb\u5236\u53cd\u7f16\u8bd1\u65b9\u6cd5\uff0c\u901a\u8fc7\u62bd\u8c61\u4e8c\u8fdb\u5236\u548c\u6e90\u4ee3\u7801\u4e4b\u95f4\u7684\u7a33\u5b9a\u903b\u8f91\u7279\u5f81\uff0c\u6784\u5efa\u6e90\u7ea7\u62bd\u8c61\u903b\u8f91\u6811\u6765\u6307\u5bfcLLM\u8fdb\u884c\u8bed\u4e49\u6062\u590d\uff0c\u663e\u8457\u4f18\u4e8e\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8eLLM\u7684\u53cd\u7f16\u8bd1\u65b9\u6cd5\u5c06\u6c47\u7f16\u4ee3\u7801\u89c6\u4e3a\u7ebf\u6027\u6307\u4ee4\u5e8f\u5217\uff0c\u5ffd\u7565\u4e86\u4e8c\u8fdb\u5236\u6587\u4ef6\u56fa\u6709\u7684\u4efb\u610f\u8df3\u8f6c\u6a21\u5f0f\u548c\u5b64\u7acb\u6570\u636e\u6bb5\uff0c\u8fd9\u4e25\u91cd\u963b\u788d\u4e86\u4ece\u6c47\u7f16\u4ee3\u7801\u6b63\u786e\u63a8\u65ad\u6e90\u4ee3\u7801\u8bed\u4e49\u7684\u80fd\u529b\u3002", "method": "SALTM\u65b9\u6cd5\uff1a1\uff09\u4ece\u6c47\u7f16\u4ee3\u7801\u6784\u5efa\u6e90\u7ea7\u62bd\u8c61\u903b\u8f91\u6811(SALT)\u6765\u8fd1\u4f3c\u9ad8\u7ea7\u8bed\u8a00\u7684\u903b\u8f91\u7ed3\u6784\uff1b2\uff09\u4f7f\u7528\u91cd\u6784\u7684SALT\u5fae\u8c03LLM\u751f\u6210\u53cd\u7f16\u8bd1\u4ee3\u7801\uff1b3\uff09\u901a\u8fc7\u9519\u8bef\u6821\u6b63\u548c\u7b26\u53f7\u6062\u590d\u6765\u4f18\u5316\u8f93\u51fa\u53ef\u8bfb\u6027\u548c\u6b63\u786e\u6027\u3002", "result": "\u5728\u4e09\u4e2a\u77e5\u540d\u6570\u636e\u96c6\u4e0a\u7684\u5b9e\u9a8c\u8868\u660e\uff0cSALTM\u5728\u6062\u590d\u6e90\u4ee3\u7801\u903b\u8f91\u65b9\u9762\u975e\u5e38\u6709\u6548\uff0c\u663e\u8457\u4f18\u4e8e\u6700\u5148\u8fdb\u65b9\u6cd5\uff08\u5982\u5728Decompile-Eval\u4e0a\u8fbe\u523070.4%\u7684TCP\u7387\uff0c\u63d0\u534710.6%\uff09\uff0c\u5bf9\u56db\u79cd\u5e38\u7528\u6df7\u6dc6\u6280\u672f\u5177\u6709\u9c81\u68d2\u6027\u3002", "conclusion": "SALTM\u901a\u8fc7\u62bd\u8c61\u4e8c\u8fdb\u5236\u7ea7\u64cd\u4f5c\u4e3a\u9ad8\u7ea7\u903b\u8f91\u6846\u67b6\uff0c\u6709\u6548\u6307\u5bfcLLM\u8fdb\u884c\u8bed\u4e49\u6062\u590d\uff0c\u4e3a\u4eba\u7c7b\u5206\u6790\u4eba\u5458\u7406\u89e3\u4e8c\u8fdb\u5236\u51fd\u6570\u63d0\u4f9b\u4e86\u4f18\u8d8a\u7684\u5e2e\u52a9\uff0c\u9a8c\u8bc1\u4e86\u8be5\u65b9\u6cd5\u5728\u4e8c\u8fdb\u5236\u53cd\u7f16\u8bd1\u9886\u57df\u7684\u6709\u6548\u6027\u3002"}}
{"id": "2509.15015", "pdf": "https://arxiv.org/pdf/2509.15015", "abs": "https://arxiv.org/abs/2509.15015", "authors": ["Harrison Oates", "Hyeonggeun Yun", "Nikhila Gurusinghe"], "title": "Theorem Provers: One Size Fits All?", "categories": ["cs.LO", "cs.PL"], "comment": null, "summary": "Theorem provers are important tools for people working in formal\nverification. There are a myriad of interactive systems available today, with\nvarying features and approaches motivating their development. These design\nchoices impact their usability, alongside the problem domain in which they are\nemployed. We test-drive two such provers, Coq and Idris2, by proving the\ncorrectness of insertion sort, before providing a qualitative evaluation of\ntheir performance. We then compare their community and library support. This\nwork helps users to make an informed choice of system, and highlight approaches\nin other systems that developers might find useful.", "AI": {"tldr": "\u901a\u8fc7\u5bf9\u6bd4Coq\u548cIdris2\u4e24\u79cd\u5b9a\u7406\u8bc1\u660e\u5668\u5728\u63d2\u5165\u6392\u5e8f\u6b63\u786e\u6027\u8bc1\u660e\u4e2d\u7684\u8868\u73b0\uff0c\u4e3a\u7528\u6237\u9009\u62e9\u9002\u5408\u7684\u5f62\u5f0f\u9a8c\u8bc1\u5de5\u5177\u63d0\u4f9b\u6307\u5bfc", "motivation": "\u4e0d\u540c\u7684\u4ea4\u4e92\u5f0f\u5b9a\u7406\u8bc1\u660e\u7cfb\u7edf\u5177\u6709\u4e0d\u540c\u7684\u8bbe\u8ba1\u7279\u6027\u548c\u4f7f\u7528\u4f53\u9a8c\uff0c\u9700\u8981\u901a\u8fc7\u5b9e\u9645\u6848\u4f8b\u5bf9\u6bd4\u6765\u5e2e\u52a9\u7528\u6237\u505a\u51fa\u660e\u667a\u9009\u62e9", "method": "\u4f7f\u7528Coq\u548cIdris2\u4e24\u79cd\u5b9a\u7406\u8bc1\u660e\u5668\u5b9e\u73b0\u63d2\u5165\u6392\u5e8f\u7b97\u6cd5\u7684\u6b63\u786e\u6027\u8bc1\u660e\uff0c\u5e76\u8fdb\u884c\u8d28\u6027\u8bc4\u4f30\u548c\u793e\u533a\u5e93\u652f\u6301\u5bf9\u6bd4", "result": "\u83b7\u5f97\u4e86\u4e24\u79cd\u5de5\u5177\u5728\u5b9e\u9645\u8bc1\u660e\u4efb\u52a1\u4e2d\u7684\u6027\u80fd\u8868\u73b0\u6570\u636e\uff0c\u4ee5\u53ca\u5b83\u4eec\u7684\u793e\u533a\u6d3b\u8dc3\u5ea6\u548c\u5e93\u8d44\u6e90\u60c5\u51b5", "conclusion": "\u8be5\u7814\u7a76\u4e3a\u5f62\u5f0f\u9a8c\u8bc1\u5de5\u4f5c\u8005\u9009\u62e9\u9002\u5408\u7684\u5b9a\u7406\u8bc1\u660e\u5668\u63d0\u4f9b\u4e86\u5b9e\u8df5\u6307\u5357\uff0c\u540c\u65f6\u4e3a\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u53ef\u501f\u9274\u7684\u8bbe\u8ba1\u601d\u8def"}}
{"id": "2509.15074", "pdf": "https://arxiv.org/pdf/2509.15074", "abs": "https://arxiv.org/abs/2509.15074", "authors": ["Dominik Gei\u00dfler", "Tobias Winkler"], "title": "Weighted Automata for Exact Inference in Discrete Probabilistic Programs", "categories": ["cs.FL", "cs.PL"], "comment": null, "summary": "In probabilistic programming, the inference problem asks to determine a\nprogram's posterior distribution conditioned on its \"observe\" instructions.\nInference is challenging, especially when exact rather than approximate results\nare required. Inspired by recent work on probability generating functions\n(PGFs), we propose encoding distributions on $\\mathbb{N}^k$ as weighted\nautomata over a commutative alphabet with $k$ symbols. Based on this, we map\nthe semantics of various imperative programming statements to\nautomata-theoretic constructions. For a rich class of programs, this results in\nan effective translation from prior to posterior distribution, both encoded as\nautomata. We prove that our approach is sound with respect to a standard\noperational program semantics.", "AI": {"tldr": "\u5c06\u6982\u7387\u7f16\u7a0b\u4e2d\u7684\u63a8\u7406\u95ee\u9898\u8f6c\u5316\u4e3a\u52a0\u6743\u81ea\u52a8\u673a\u6784\u9020\uff0c\u901a\u8fc7\u6982\u7387\u751f\u6210\u51fd\u6570\u7f16\u7801\u5206\u5e03\uff0c\u5b9e\u73b0\u4ece\u5148\u9a8c\u5230\u540e\u9a8c\u5206\u5e03\u7684\u6709\u6548\u8f6c\u6362", "motivation": "\u6982\u7387\u7f16\u7a0b\u4e2d\u7684\u63a8\u7406\u95ee\u9898\u9700\u8981\u786e\u5b9a\u7a0b\u5e8f\u5728\u89c2\u5bdf\u6307\u4ee4\u6761\u4ef6\u4e0b\u7684\u540e\u9a8c\u5206\u5e03\uff0c\u7cbe\u786e\u63a8\u7406\u5177\u6709\u6311\u6218\u6027", "method": "\u5c06N^k\u4e0a\u7684\u5206\u5e03\u7f16\u7801\u4e3a\u5177\u6709k\u4e2a\u7b26\u53f7\u7684\u4ea4\u6362\u5b57\u6bcd\u8868\u4e0a\u7684\u52a0\u6743\u81ea\u52a8\u673a\uff0c\u5c06\u5404\u79cd\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8bed\u53e5\u7684\u8bed\u4e49\u6620\u5c04\u5230\u81ea\u52a8\u673a\u7406\u8bba\u6784\u9020", "result": "\u5bf9\u4e8e\u4e30\u5bcc\u7684\u7a0b\u5e8f\u7c7b\uff0c\u5b9e\u73b0\u4e86\u4ece\u5148\u9a8c\u5230\u540e\u9a8c\u5206\u5e03\u7684\u6709\u6548\u8f6c\u6362\uff0c\u4e24\u8005\u90fd\u7f16\u7801\u4e3a\u81ea\u52a8\u673a", "conclusion": "\u8be5\u65b9\u6cd5\u76f8\u5bf9\u4e8e\u6807\u51c6\u64cd\u4f5c\u7a0b\u5e8f\u8bed\u4e49\u662f\u53ef\u9760\u7684\uff0c\u4e3a\u7cbe\u786e\u6982\u7387\u63a8\u7406\u63d0\u4f9b\u4e86\u81ea\u52a8\u673a\u7406\u8bba\u57fa\u7840"}}
{"id": "2509.15150", "pdf": "https://arxiv.org/pdf/2509.15150", "abs": "https://arxiv.org/abs/2509.15150", "authors": ["Federico Bruzzone", "Walter Cazzola", "Luca Favalli"], "title": "Code Less to Code More: Streamlining Language Server Protocol and Type System Development for Language Families", "categories": ["cs.SE", "cs.PL", "D.2.6; D.3.3; D.2.3; D.2.5; D.2.13"], "comment": "34 pages, 10 figures, Journal of Systems and Software, June 2025, for\n  the replication package, see https://doi.org/10.5281/zenodo.15276991", "summary": "Developing editing support for $L$ languages in $E$ editors is complex and\ntime-consuming. Some languages do not provide dedicated editors, while others\noffer a single native editor. The $\\textit{language server protocol}$ (LSP)\nreduces the language-editor combinations $L \\times E$ to $L + E$, where a\nsingle language server communicates with editors via LSP plugins. However,\noverlapping implementations of linguistic components remain an issue. Existing\nlanguage workbenches struggle with modularity, reusability, and leveraging type\nsystems for language server generation. In this work, we propose: (i) Typelang,\na family of domain-specific languages for modular, composable, and reusable\ntype system implementation, (ii) a modular language server generation process,\nproducing servers for languages built in a modular workbench, (iii) the\nvariant-oriented programming paradigm and a cross-artifact coordination layer\nto manage interdependent software variants, and (iv) an LSP plugin generator,\nreducing $E$ to $1$ by automating plugin creation for multiple editors. To\nsimplify editing support for language families, each language artifact\nintegrates its own Typelang variant, used to generate language servers. This\nreduces combinations to $T \\times 1$, where $T = L$ represents the number of\ntype systems. Further reuse of language artifacts across languages lowers this\nto $N \\times 1$, where $N << T$, representing unique type systems. We implement\nTypelang in Neverlang, generating language servers for each artifact and LSP\nplugins for three editors. Empirical evaluation shows a 93.48% reduction in\ncharacters needed for type system implementation and 100% automation of LSP\nplugin generation, significantly lowering effort for editing support in\nlanguage families, especially when artifacts are reused.", "AI": {"tldr": "\u8fd9\u7bc7\u8bba\u6587\u63d0\u51fa\u4e86Typelang\u8bed\u8a00\u5bb6\u65cf\u548c\u6a21\u5757\u5316\u8bed\u8a00\u670d\u52a1\u5668\u751f\u6210\u65b9\u6848\uff0c\u901a\u8fc7\u7c7b\u578b\u7cfb\u7edf\u91cd\u7528\u548c\u81ea\u52a8\u5316\u63d2\u4ef6\u751f\u6210\uff0c\u5927\u5e45\u51cf\u5c11\u7f16\u8f91\u652f\u6301\u7684\u5f00\u53d1\u5de5\u4f5c\u91cf", "motivation": "\u89e3\u51b3\u591a\u8bed\u8a00\u591a\u7f16\u8f91\u5668\u652f\u6301\u7684\u590d\u6742\u6027\u95ee\u9898\uff0cLSP\u534f\u8bae\u5df2\u7b80\u5316\u4e86\u8bed\u8a00-\u7f16\u8f91\u5668\u7ec4\u5408\uff0c\u4f46\u8bed\u8a00\u7ec4\u4ef6\u7684\u91cd\u590d\u5b9e\u73b0\u4ecd\u662f\u6311\u6218\uff0c\u73b0\u6709\u8bed\u8a00\u5de5\u4f5c\u53f0\u5728\u6a21\u5757\u5316\u3001\u53ef\u91cd\u7528\u6027\u548c\u5229\u7528\u7c7b\u578b\u7cfb\u7edf\u751f\u6210\u8bed\u8a00\u670d\u52a1\u5668\u65b9\u9762\u5b58\u5728\u4e0d\u8db3", "method": "\u63d0\u51fa(i)Typelang\u57df\u7279\u5b9a\u8bed\u8a00\u5bb6\u65cf\u7528\u4e8e\u6a21\u5757\u5316\u3001\u53ef\u7ec4\u5408\u3001\u53ef\u91cd\u7528\u7684\u7c7b\u578b\u7cfb\u7edf\u5b9e\u73b0\uff1b(ii)\u6a21\u5757\u5316\u8bed\u8a00\u670d\u52a1\u5668\u751f\u6210\u8fc7\u7a0b\uff1b(iii)\u53d8\u4f53\u5bfc\u5411\u7f16\u7a0b\u8303\u5f0f\u548c\u8de8\u4ea7\u7269\u534f\u8c03\u5c42\uff1b(iv)LSP\u63d2\u4ef6\u751f\u6210\u5668\u81ea\u52a8\u5316\u591a\u7f16\u8f91\u5668\u63d2\u4ef6\u521b\u5efa", "result": "\u5728Neverlang\u4e2d\u5b9e\u73b0Typelang\uff0c\u4e3a\u6bcf\u4e2a\u4ea7\u7269\u751f\u6210\u8bed\u8a00\u670d\u52a1\u5668\u5e76\u4e3a\u4e09\u4e2a\u7f16\u8f91\u5668\u751f\u6210LSP\u63d2\u4ef6\u3002\u7ecf\u9a8c\u8bc4\u4f30\u663e\u793a\uff1a\u7c7b\u578b\u7cfb\u7edf\u5b9e\u73b0\u9700\u8981\u7684\u5b57\u7b26\u6570\u51cf\u5c1193.48%\uff0cLSP\u63d2\u4ef6\u751f\u6210\u5b8c\u5168\u81ea\u52a8\u5316(100%)\uff0c\u663e\u8457\u964d\u4f4e\u4e86\u8bed\u8a00\u5bb6\u65cf\u7f16\u8f91\u652f\u6301\u7684\u5f00\u53d1\u5de5\u4f5c\u91cf", "conclusion": "\u8be5\u65b9\u6cd5\u901a\u8fc7\u6a21\u5757\u5316\u7c7b\u578b\u7cfb\u7edf\u5b9e\u73b0\u548c\u81ea\u52a8\u5316\u8bed\u8a00\u670d\u52a1\u5668\u751f\u6210\uff0c\u6700\u7ec8\u5c06\u8bed\u8a00-\u7f16\u8f91\u5668\u7ec4\u5408\u4eceL\u00d7E\u7b80\u5316\u4e3aN\u00d71(N\u8fdc\u5c0f\u4e8eT)\uff0c\u4e3a\u8bed\u8a00\u5bb6\u65cf\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u7f16\u8f91\u652f\u6301\u89e3\u51b3\u65b9\u6848"}}
