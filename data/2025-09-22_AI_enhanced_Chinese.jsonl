{"id": "2509.15834", "pdf": "https://arxiv.org/pdf/2509.15834", "abs": "https://arxiv.org/abs/2509.15834", "authors": ["Shardul Chiplunkar", "Cl\u00e9ment Pit-Claudel"], "title": "Automatic layout of railroad diagrams", "categories": ["cs.PL"], "comment": "24 pages (+2 appendix, +3 references); 22 figures (+4 appendix); 3\n  tables", "summary": "Railroad diagrams (also called \"syntax diagrams\") are a common, intuitive\nvisualization of grammars, but limited tooling and a lack of formal attention\nto their layout mostly confines them to hand-drawn documentation. We present\nthe first formal treatment of railroad diagram layout along with a principled,\npractical implementation. We characterize the problem as compiling a *diagram\nlanguage* (specifying conceptual components and how they connect and compose)\nto a *layout language* (specifying basic graphical shapes and their sizes and\npositions). We then implement a compiler that performs *line wrapping* to meet\na target width, as well as vertical *alignment* and horizontal *justification*\nper user-specified policies. We frame line wrapping as an optimization problem,\nwhere we describe principled dimensions of optimality and implement\ncorresponding heuristics. For front-end evaluation, we show that our diagram\nlanguage is well-suited for common applications by describing how regular\nexpressions and Backus-Naur form can be compiled to it. For back-end\nevaluation, we argue that our compiler is practical by comparing its output to\ndiagrams laid out by hand and by other tools.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u94c1\u8def\u56fe\u5e03\u5c40\u7684\u7b2c\u4e00\u4e2a\u5f62\u5f0f\u5316\u5904\u7406\u65b9\u6cd5\uff0c\u5305\u62ec\u4e00\u4e2a\u539f\u5219\u6027\u7684\u5b9e\u7528\u5b9e\u73b0\uff0c\u901a\u8fc7\u7f16\u8bd1\u56fe\u8868\u8bed\u8a00\u5230\u5e03\u5c40\u8bed\u8a00\uff0c\u652f\u6301\u81ea\u52a8\u6362\u884c\u3001\u5bf9\u9f50\u548c\u8c03\u6574\u7b49\u5e03\u5c40\u7b56\u7565\u3002", "motivation": "\u94c1\u8def\u56fe\u662f\u4e00\u79cd\u5e38\u89c1\u7684\u8bed\u6cd5\u53ef\u89c6\u5316\u65b9\u6cd5\uff0c\u4f46\u7531\u4e8e\u5de5\u5177\u652f\u6301\u6709\u9650\u4e14\u7f3a\u4e4f\u5f62\u5f0f\u5316\u5e03\u5c40\u5173\u6ce8\uff0c\u4e3b\u8981\u5c40\u9650\u4e8e\u624b\u7ed8\u6587\u6863\u3002", "method": "\u5c06\u95ee\u9898\u63cf\u8ff0\u4e3a\u4ece\u56fe\u8868\u8bed\u8a00\uff08\u6307\u5b9a\u6982\u5ff5\u7ec4\u4ef6\u53ca\u5176\u8fde\u63a5\u548c\u7ec4\u5408\u65b9\u5f0f\uff09\u7f16\u8bd1\u5230\u5e03\u5c40\u8bed\u8a00\uff08\u6307\u5b9a\u57fa\u672c\u56fe\u5f62\u5f62\u72b6\u53ca\u5176\u5927\u5c0f\u548c\u4f4d\u7f6e\uff09\uff0c\u5b9e\u73b0\u6267\u884c\u81ea\u52a8\u6362\u884c\u3001\u5782\u76f4\u5bf9\u9f50\u548c\u6c34\u5e73\u8c03\u6574\u7684\u7f16\u8bd1\u5668\u3002", "result": "\u901a\u8fc7\u5c06\u6b63\u5219\u8868\u8fbe\u5f0f\u548c\u5df4\u79d1\u65af\u8303\u5f0f\u7f16\u8bd1\u5230\u56fe\u8868\u8bed\u8a00\u5c55\u793a\u524d\u7aef\u9002\u7528\u6027\uff0c\u5e76\u901a\u8fc7\u4e0e\u624b\u7ed8\u548c\u5176\u4ed6\u5de5\u5177\u8f93\u51fa\u7684\u6bd4\u8f83\u8bc1\u660e\u7f16\u8bd1\u5668\u7684\u5b9e\u7528\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u5f62\u5f0f\u5316\u65b9\u6cd5\u548c\u5b9e\u73b0\u4e3a\u94c1\u8def\u56fe\u5e03\u5c40\u63d0\u4f9b\u4e86\u539f\u5219\u6027\u89e3\u51b3\u65b9\u6848\uff0c\u63d0\u5347\u4e86\u5176\u81ea\u52a8\u751f\u6210\u548c\u5e03\u5c40\u7684\u8d28\u91cf\u4e0e\u6548\u7387\u3002"}}
{"id": "2509.15283", "pdf": "https://arxiv.org/pdf/2509.15283", "abs": "https://arxiv.org/abs/2509.15283", "authors": ["Kadin Matotek", "Heather Cassel", "Md Amiruzzaman", "Linh B. Ngo"], "title": "Evaluating the Limitations of Local LLMs in Solving Complex Programming Challenges", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.PL", "I.2.7; F.2.2; I.2.2"], "comment": "Comments: 16 pages, 3 figures, 8 tables, accepted to CCSC Eastern\n  2025", "summary": "This study examines the performance of today's open-source, locally hosted\nlarge-language models (LLMs) in handling complex competitive programming tasks\nwith extended problem descriptions and contexts. Building on the original\nFramework for AI-driven Code Generation Evaluation (FACE), the authors retrofit\nthe pipeline to work entirely offline through the Ollama runtime, collapsing\nFACE's sprawling per-problem directory tree into a handful of consolidated JSON\nfiles, and adding robust checkpointing so multi-day runs can resume after\nfailures. The enhanced framework generates, submits, and records solutions for\nthe full Kattis corpus of 3,589 problems across eight code-oriented models\nranging from 6.7-9 billion parameters. The submission results show that the\noverall pass@1 accuracy is modest for the local models, with the best models\nperforming at approximately half the acceptance rate of the proprietary models,\nGemini 1.5 and ChatGPT-4. These findings expose a persistent gap between\nprivate, cost-controlled LLM deployments and state-of-the-art proprietary\nservices, yet also highlight the rapid progress of open models and the\npractical benefits of an evaluation workflow that organizations can replicate\non in-house hardware.", "AI": {"tldr": "\u672c\u7814\u7a76\u8bc4\u4f30\u4e86\u5f00\u6e90\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578b\u5728\u5904\u7406\u590d\u6742\u7f16\u7a0b\u7ade\u8d5b\u4efb\u52a1\u65f6\u7684\u6027\u80fd\uff0c\u53d1\u73b0\u5176\u51c6\u786e\u7387\u7ea6\u4e3a\u4e13\u6709\u6a21\u578b\u7684\u4e00\u534a\uff0c\u63ed\u793a\u4e86\u5f00\u6e90\u6a21\u578b\u4e0e\u4e13\u6709\u670d\u52a1\u4e4b\u95f4\u7684\u5dee\u8ddd\uff0c\u4f46\u4e5f\u5c55\u793a\u4e86\u5f00\u6e90\u6a21\u578b\u7684\u5feb\u901f\u8fdb\u6b65\u3002", "motivation": "\u7814\u7a76\u52a8\u673a\u662f\u8bc4\u4f30\u5f53\u524d\u5f00\u6e90\u672c\u5730\u5927\u8bed\u8a00\u6a21\u578b\u5728\u5904\u7406\u5177\u6709\u6269\u5c55\u95ee\u9898\u63cf\u8ff0\u548c\u4e0a\u4e0b\u6587\u7684\u590d\u6742\u7f16\u7a0b\u7ade\u8d5b\u4efb\u52a1\u65f6\u7684\u8868\u73b0\uff0c\u6bd4\u8f83\u5f00\u6e90\u6a21\u578b\u4e0e\u4e13\u6709\u6a21\u578b\u4e4b\u95f4\u7684\u6027\u80fd\u5dee\u8ddd\u3002", "method": "\u57fa\u4e8e\u539f\u6709\u7684FACE\u6846\u67b6\u8fdb\u884c\u6539\u9020\uff0c\u4f7f\u7528Ollama\u8fd0\u884c\u65f6\u5b9e\u73b0\u5b8c\u5168\u79bb\u7ebf\u8fd0\u884c\uff0c\u5c06\u590d\u6742\u7684\u76ee\u5f55\u7ed3\u6784\u6574\u5408\u4e3aJSON\u6587\u4ef6\uff0c\u5e76\u6dfb\u52a0\u68c0\u67e5\u70b9\u529f\u80fd\u3002\u5bf9Kattis\u9898\u5e93\u76843,589\u4e2a\u95ee\u9898\u57288\u4e2a\u4ee3\u7801\u5bfc\u5411\u6a21\u578b\u4e0a\u8fdb\u884c\u6d4b\u8bd5\u3002", "result": "\u7ed3\u679c\u663e\u793a\u672c\u5730\u6a21\u578b\u7684\u6574\u4f53pass@1\u51c6\u786e\u7387\u8f83\u4f4e\uff0c\u6700\u4f73\u6a21\u578b\u7684\u63a5\u53d7\u7387\u7ea6\u4e3a\u4e13\u6709\u6a21\u578b\uff08Gemini 1.5\u548cChatGPT-4\uff09\u7684\u4e00\u534a\u3002", "conclusion": "\u7814\u7a76\u63ed\u793a\u4e86\u79c1\u6709\u6210\u672c\u63a7\u5236LLM\u90e8\u7f72\u4e0e\u6700\u5148\u8fdb\u4e13\u6709\u670d\u52a1\u4e4b\u95f4\u7684\u6301\u7eed\u5dee\u8ddd\uff0c\u4f46\u4e5f\u51f8\u663e\u4e86\u5f00\u6e90\u6a21\u578b\u7684\u5feb\u901f\u8fdb\u6b65\u548c\u5728\u5185\u90e8\u786c\u4ef6\u4e0a\u53ef\u590d\u73b0\u8bc4\u4f30\u5de5\u4f5c\u6d41\u7684\u5b9e\u9645\u4ef7\u503c\u3002"}}
{"id": "2509.15754", "pdf": "https://arxiv.org/pdf/2509.15754", "abs": "https://arxiv.org/abs/2509.15754", "authors": ["Toby Sharp"], "title": "Hornet Node and the Hornet DSL: A Minimal, Executable Specification for Bitcoin Consensus", "categories": ["cs.CR", "cs.PL", "cs.SE"], "comment": null, "summary": "Bitcoin's consensus rules are encoded in the implementation of its reference\nclient: \"The code is the spec.\" Yet this code is unsuitable for formal\nverification due to side effects, mutable state, concurrency, and legacy\ndesign. A standalone formal specification would enable verification both across\nversions of the reference client and against new client implementations,\nstrengthening decentralization by reducing the risk of consensus-splitting\nbugs. Yet such a specification has long been considered intractable given the\ncomplexity of Bitcoin's consensus logic. We demonstrate a compact, executable,\ndeclarative C++ specification of Bitcoin consensus rules that syncs mainnet to\ntip in a few hours on a single thread. We also introduce the Hornet\nDomain-Specific Language (DSL) specifically designed to encode these rules\nunambiguously for execution, enabling formal reasoning, consensus code\ngeneration, and AI-driven adversarial testing. Our spec-driven client Hornet\nNode offers a modern and modular complement to the reference client. Its clear,\nidiomatic style makes it suitable for education, while its performance makes it\nideal for experimentation. We highlight architectural contributions such as its\nlayered design, efficient data structures, and strong separation of concerns,\nsupported by production-quality code examples. We argue that Hornet Node and\nHornet DSL together provide the first credible path toward a pure, formal,\nexecutable specification of Bitcoin consensus.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u7d27\u51d1\u3001\u53ef\u6267\u884c\u7684\u6bd4\u7279\u5e01\u5171\u8bc6\u89c4\u5219C++\u89c4\u8303\uff0c\u5e76\u5f00\u53d1\u4e86Hornet DSL\u8bed\u8a00\u548cHornet Node\u5ba2\u6237\u7aef\uff0c\u4e3a\u6bd4\u7279\u5e01\u5171\u8bc6\u63d0\u4f9b\u9996\u4e2a\u53ef\u4fe1\u7684\u6b63\u5f0f\u53ef\u6267\u884c\u89c4\u8303\u8def\u5f84\u3002", "motivation": "\u6bd4\u7279\u5e01\u7684\u53c2\u8003\u5ba2\u6237\u7aef\u4ee3\u7801\u4e0d\u9002\u5408\u5f62\u5f0f\u5316\u9a8c\u8bc1\uff0c\u9700\u8981\u72ec\u7acb\u7684\u6b63\u5f0f\u89c4\u8303\u6765\u652f\u6301\u8de8\u7248\u672c\u9a8c\u8bc1\u548c\u65b0\u5ba2\u6237\u7aef\u5b9e\u73b0\uff0c\u51cf\u5c11\u5171\u8bc6\u5206\u88c2\u98ce\u9669\u3002", "method": "\u5f00\u53d1\u4e86\u58f0\u660e\u5f0fC++\u89c4\u8303\u548cHornet DSL\u8bed\u8a00\uff0c\u8bbe\u8ba1\u4e86\u5206\u5c42\u67b6\u6784\u3001\u9ad8\u6548\u6570\u636e\u7ed3\u6784\u548c\u5173\u6ce8\u70b9\u5206\u79bb\u7684Hornet Node\u5ba2\u6237\u7aef\u3002", "result": "\u89c4\u8303\u80fd\u5728\u5355\u7ebf\u7a0b\u4e0a\u51e0\u5c0f\u65f6\u5185\u540c\u6b65\u4e3b\u7f51\u5230\u6700\u65b0\u533a\u5757\uff0c\u652f\u6301\u5f62\u5f0f\u63a8\u7406\u3001\u5171\u8bc6\u4ee3\u7801\u751f\u6210\u548cAI\u9a71\u52a8\u7684\u5bf9\u6297\u6d4b\u8bd5\u3002", "conclusion": "Hornet Node\u548cHornet DSL\u5171\u540c\u4e3a\u6bd4\u7279\u5e01\u5171\u8bc6\u63d0\u4f9b\u4e86\u9996\u4e2a\u53ef\u4fe1\u7684\u7eaf\u6b63\u5f0f\u53ef\u6267\u884c\u89c4\u8303\u8def\u5f84\uff0c\u9002\u5408\u6559\u80b2\u548c\u5b9e\u9a8c\u3002"}}
