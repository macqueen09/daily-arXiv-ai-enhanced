{"id": "2509.16246", "pdf": "https://arxiv.org/pdf/2509.16246", "abs": "https://arxiv.org/abs/2509.16246", "authors": ["Juxin Niu", "Yuxin Du", "Dan Niu", "Xi Wang", "Zhe Jiang", "Nan Guan"], "title": "VerilogMonkey: Exploring Parallel Scaling for Automated Verilog Code Generation with LLMs", "categories": ["cs.PL", "cs.AR"], "comment": null, "summary": "We present VerilogMonkey, an empirical study of parallel scaling for the\nunder-explored task of automated Verilog generation. Parallel scaling improves\nLLM performance by sampling many outputs in parallel. Across multiple\nbenchmarks and mainstream LLMs, we find that scaling to hundreds of samples is\ncost-effective in both time and money and, even without any additional\nenhancements such as post-training or agentic methods, surpasses prior results\non LLM-based Verilog generation. We further dissect why parallel scaling\ndelivers these gains and show how output randomness in LLMs affects its\neffectiveness.", "AI": {"tldr": "VerilogMonkey\u662f\u4e00\u4e2a\u5173\u4e8eVerilog\u81ea\u52a8\u751f\u6210\u4efb\u52a1\u4e2d\u5e76\u884c\u6269\u5c55\u7684\u5b9e\u8bc1\u7814\u7a76\uff0c\u53d1\u73b0\u901a\u8fc7\u5e76\u884c\u91c7\u6837\u5927\u91cf\u8f93\u51fa\u53ef\u4ee5\u663e\u8457\u63d0\u5347LLM\u6027\u80fd\uff0c\u4e14\u6210\u672c\u6548\u76ca\u9ad8", "motivation": "\u7814\u7a76\u5e76\u884c\u6269\u5c55\u5728\u81ea\u52a8\u5316Verilog\u751f\u6210\u8fd9\u4e00\u672a\u88ab\u5145\u5206\u63a2\u7d22\u4efb\u52a1\u4e2d\u7684\u5e94\u7528\u6548\u679c", "method": "\u5728\u591a\u4e2a\u57fa\u51c6\u6d4b\u8bd5\u548c\u4e3b\u6d41LLM\u4e0a\uff0c\u901a\u8fc7\u5e76\u884c\u91c7\u6837\u6570\u767e\u4e2a\u8f93\u51fa\u6765\u8bc4\u4f30\u6027\u80fd\u63d0\u5347\uff0c\u5206\u6790\u8f93\u51fa\u968f\u673a\u6027\u5bf9\u6548\u679c\u7684\u5f71\u54cd", "result": "\u5e76\u884c\u6269\u5c55\u5230\u6570\u767e\u4e2a\u6837\u672c\u5728\u65f6\u95f4\u548c\u91d1\u94b1\u4e0a\u90fd\u5177\u6709\u6210\u672c\u6548\u76ca\uff0c\u5373\u4f7f\u6ca1\u6709\u989d\u5916\u589e\u5f3a\u65b9\u6cd5\u4e5f\u80fd\u8d85\u8d8a\u4e4b\u524d\u57fa\u4e8eLLM\u7684Verilog\u751f\u6210\u7ed3\u679c", "conclusion": "\u5e76\u884c\u6269\u5c55\u662f\u63d0\u5347LLM\u5728Verilog\u751f\u6210\u4efb\u52a1\u4e2d\u6027\u80fd\u7684\u6709\u6548\u7b56\u7565\uff0c\u8f93\u51fa\u968f\u673a\u6027\u5f71\u54cd\u5176\u6709\u6548\u6027"}}
{"id": "2509.16248", "pdf": "https://arxiv.org/pdf/2509.16248", "abs": "https://arxiv.org/abs/2509.16248", "authors": ["Savini Kashmira", "Jayanaka Dantanarayana", "Thamirawaran Sathiyalogeswaran", "Yichao Yuan", "Nishil Talati", "Krisztian Flautner", "Lingjia Tang", "Jason Mars"], "title": "GraphMend: Code Transformations for Fixing Graph Breaks in PyTorch 2", "categories": ["cs.PL", "cs.LG", "cs.SE"], "comment": null, "summary": "This paper presents GraphMend, a high-level compiler that eliminates FX graph\nbreaks in PyTorch 2 programs. Although PyTorch 2 introduced TorchDynamo and\nTorchInductor to enable just-in-time graph compilation, unresolved dynamic\ncontrol flow and unsupported Python constructs often fragment models into\nmultiple FX graphs. These fragments force frequent fallbacks to eager mode,\nincur costly CPU-to-GPU synchronizations, and reduce optimization\nopportunities. GraphMend addresses this limitation by analyzing and\ntransforming source code before execution. Built on the Jac compilation\nframework, GraphMend introduces two code transformations that remove graph\nbreaks due to dynamic control flow and Python I/O functions. This design allows\nPyTorch's compilation pipeline to capture larger, uninterrupted FX graphs\nwithout requiring manual refactoring by developers. Evaluation across eight\nHugging Face models shows that GraphMend removes all fixable graph breaks due\nto dynamic control flow and Python I/O functions, driving the break count to 0\nin 6 models and reducing it from 5 to 2 in another model. On NVIDIA RTX 3090\nand A40 GPUs, GraphMend achieves up to 75% latency reductions and up to 8%\nhigher end-to-end throughput. These results demonstrate that high-level code\ntransformation is an effective complement to PyTorch's dynamic JIT compilation\npipeline, substantially improving both usability and performance.", "AI": {"tldr": "GraphMend\u662f\u4e00\u4e2a\u9ad8\u7ea7\u7f16\u8bd1\u5668\uff0c\u901a\u8fc7\u4ee3\u7801\u8f6c\u6362\u6d88\u9664PyTorch 2\u7a0b\u5e8f\u4e2d\u7684FX\u56fe\u65ad\u70b9\uff0c\u63d0\u5347\u7f16\u8bd1\u6548\u7387\u548c\u6027\u80fd", "motivation": "PyTorch 2\u7684TorchDynamo\u548cTorchInductor\u867d\u7136\u652f\u6301\u5373\u65f6\u56fe\u7f16\u8bd1\uff0c\u4f46\u52a8\u6001\u63a7\u5236\u6d41\u548c\u4e0d\u652f\u6301\u7684Python\u6784\u9020\u4f1a\u5bfc\u81f4\u6a21\u578b\u88ab\u5206\u5272\u6210\u591a\u4e2aFX\u56fe\uff0c\u9020\u6210\u9891\u7e41\u56de\u9000\u5230eager\u6a21\u5f0f\u3001CPU-GPU\u540c\u6b65\u5f00\u9500\u548c\u4f18\u5316\u673a\u4f1a\u51cf\u5c11", "method": "\u57fa\u4e8eJac\u7f16\u8bd1\u6846\u67b6\uff0cGraphMend\u5f15\u5165\u4e24\u79cd\u4ee3\u7801\u8f6c\u6362\u6280\u672f\uff1a\u6d88\u9664\u52a8\u6001\u63a7\u5236\u6d41\u5bfc\u81f4\u7684\u56fe\u65ad\u70b9\u548c\u6d88\u9664Python I/O\u51fd\u6570\u5bfc\u81f4\u7684\u56fe\u65ad\u70b9\uff0c\u5728\u4ee3\u7801\u6267\u884c\u524d\u8fdb\u884c\u5206\u6790\u548c\u8f6c\u6362", "result": "\u57288\u4e2aHugging Face\u6a21\u578b\u4e0a\u8bc4\u4f30\uff0cGraphMend\u6d88\u9664\u4e86\u6240\u6709\u53ef\u4fee\u590d\u7684\u56fe\u65ad\u70b9\uff0c6\u4e2a\u6a21\u578b\u65ad\u70b9\u964d\u4e3a0\uff0c\u53e6\u4e00\u4e2a\u4ece5\u964d\u52302\u3002\u5728RTX 3090\u548cA40 GPU\u4e0a\u5b9e\u73b0\u6700\u9ad875%\u5ef6\u8fdf\u964d\u4f4e\u548c8%\u7aef\u5230\u7aef\u541e\u5410\u91cf\u63d0\u5347", "conclusion": "\u9ad8\u7ea7\u4ee3\u7801\u8f6c\u6362\u662fPyTorch\u52a8\u6001JIT\u7f16\u8bd1\u7ba1\u9053\u7684\u6709\u6548\u8865\u5145\uff0c\u663e\u8457\u63d0\u5347\u4e86\u53ef\u7528\u6027\u548c\u6027\u80fd"}}
{"id": "2509.17795", "pdf": "https://arxiv.org/pdf/2509.17795", "abs": "https://arxiv.org/abs/2509.17795", "authors": ["Parosh Aziz Abdulla", "Samuel Grahn", "Bengt Jonsson", "Shankaranarayanan Krishna", "Om Swostik Mishra"], "title": "Efficient Linearizability Monitoring", "categories": ["cs.PL"], "comment": null, "summary": "This paper revisits the fundamental problem of monitoring the linearizability\nof concurrent stacks, queues, sets, and multisets. Given a history of a library\nimplementing one of these abstract data types, the monitoring problem is to\nanswer whether the given history is linearizable. For stacks, queues, and\n(multi)sets, we present monitoring algorithms with complexities\n$\\mathcal{O}(n^2)$, $\\mathcal{O}(n\\; log\\, n)$, and $\\mathcal{O}{(n)}$,\nrespectively, where $n$ is the number of operations in the input history. For\nstacks and queues, our results hold under the standard assumption of {\\it\ndata-independence}, i.e., the behavior of the library is not sensitive to the\nactual values stored in the data structure. Past works to solve the same\nproblems have cubic time complexity and (more seriously) have correctness\nissues: they either (i) lack correctness proofs or (ii) the suggested\ncorrectness proofs are erroneous (we present counter-examples), or (iii) have\nincorrect algorithms. Our improved complexity results rely on substantially\ndifferent algorithms for which we provide detailed proofs of correctness. We\nhave implemented our stack and queue algorithms in LiMo (Linearizability\nMonitor). We evaluate LiMo and compare it with the state-of-the-art tool Violin\n-- whose correctness proofs we have found errors in -- which checks for\nlinearizability violations. Our experimental evaluation confirms that LiMo\noutperforms Violin regarding both efficiency and scalability.", "AI": {"tldr": "\u672c\u6587\u91cd\u65b0\u5ba1\u89c6\u4e86\u76d1\u63a7\u5e76\u53d1\u6808\u3001\u961f\u5217\u3001\u96c6\u5408\u548c\u591a\u96c6\u7684\u7ebf\u6027\u5316\u95ee\u9898\uff0c\u63d0\u51fa\u4e86\u66f4\u9ad8\u6548\u7684\u76d1\u63a7\u7b97\u6cd5\uff0c\u5e76\u53d1\u73b0\u4e86\u73b0\u6709\u5de5\u5177\u7684\u8bc1\u660e\u9519\u8bef\u3002", "motivation": "\u73b0\u6709\u7684\u7ebf\u6027\u5316\u76d1\u63a7\u7b97\u6cd5\u5b58\u5728\u65f6\u95f4\u590d\u6742\u5ea6\u9ad8\uff08\u7acb\u65b9\u7ea7\uff09\u548c\u6b63\u786e\u6027\u95ee\u9898\uff08\u7f3a\u4e4f\u8bc1\u660e\u3001\u8bc1\u660e\u9519\u8bef\u6216\u7b97\u6cd5\u9519\u8bef\uff09\uff0c\u9700\u8981\u5f00\u53d1\u66f4\u9ad8\u6548\u4e14\u6b63\u786e\u6027\u53ef\u8bc1\u660e\u7684\u7b97\u6cd5\u3002", "method": "\u9488\u5bf9\u6808\u3001\u961f\u5217\u548c\uff08\u591a\uff09\u96c6\u5408\u5206\u522b\u8bbe\u8ba1\u4e86\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n\u00b2)\u3001O(n log n)\u548cO(n)\u7684\u76d1\u63a7\u7b97\u6cd5\uff0c\u5176\u4e2dn\u662f\u64cd\u4f5c\u6570\u91cf\u3002\u5bf9\u4e8e\u6808\u548c\u961f\u5217\uff0c\u7b97\u6cd5\u57fa\u4e8e\u6570\u636e\u72ec\u7acb\u6027\u5047\u8bbe\u3002", "result": "\u5b9e\u73b0\u4e86\u6808\u548c\u961f\u5217\u7b97\u6cd5\u7684\u5de5\u5177LiMo\uff0c\u5b9e\u9a8c\u8bc4\u4f30\u8868\u660eLiMo\u5728\u6548\u7387\u548c\u53ef\u6269\u5c55\u6027\u65b9\u9762\u4f18\u4e8e\u73b0\u6709\u5de5\u5177Violin\u3002", "conclusion": "\u672c\u6587\u63d0\u51fa\u7684\u65b0\u7b97\u6cd5\u5728\u4fdd\u8bc1\u6b63\u786e\u6027\u7684\u540c\u65f6\u663e\u8457\u63d0\u9ad8\u4e86\u7ebf\u6027\u5316\u76d1\u63a7\u7684\u6548\u7387\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u4e2d\u7684\u6b63\u786e\u6027\u95ee\u9898\u3002"}}
{"id": "2509.16205", "pdf": "https://arxiv.org/pdf/2509.16205", "abs": "https://arxiv.org/abs/2509.16205", "authors": ["Juhani Merilehto"], "title": "A 200-Line Python Micro-Benchmark Suite for NISQ Circuit Compilers", "categories": ["cs.ET", "cs.PL"], "comment": "9 pages, 1 figure. Includes reproducibility instructions and code\n  artifacts. Companion repository:\n  https://github.com/juhanimerilehto/microbench", "summary": "We present microbench.py, a compact (approx. 200 lines) Python script that\nautomates the collection of key compiler metrics, i.e., gate depth,\ntwo-qubit-gate count, wall-clock compilation time, and memory footprint, across\nmultiple open-source quantum circuit transpilers. The suite ships with six\ndidactic circuits (3 to 8 qubits) implementing fundamental quantum algorithms\nand supports Qiskit, tket, Cirq, and the Qiskit-Braket provider; in this paper\nwe showcase results for Qiskit 0.46 and Braket 1.16. The entire run completes\nin under three minutes on a laptop, emits a single CSV plus publisheable plot,\nand reproduces the figure here with one command. We release the code under the\nMIT licence to serve as a quick-start regression harness for NISQ compiler\nresearch.", "AI": {"tldr": "microbench.py\u662f\u4e00\u4e2a\u7ea6200\u884c\u7684Python\u811a\u672c\uff0c\u7528\u4e8e\u81ea\u52a8\u5316\u6536\u96c6\u591a\u4e2a\u5f00\u6e90\u91cf\u5b50\u7535\u8def\u8f6c\u6362\u5668\u7684\u5173\u952e\u7f16\u8bd1\u5668\u6307\u6807\uff0c\u5305\u62ec\u95e8\u6df1\u5ea6\u3001\u53cc\u91cf\u5b50\u6bd4\u7279\u95e8\u8ba1\u6570\u3001\u7f16\u8bd1\u65f6\u95f4\u548c\u5185\u5b58\u5360\u7528\u3002", "motivation": "\u4e3aNISQ\u7f16\u8bd1\u5668\u7814\u7a76\u63d0\u4f9b\u4e00\u4e2a\u5feb\u901f\u542f\u52a8\u7684\u56de\u5f52\u6d4b\u8bd5\u5de5\u5177\uff0c\u81ea\u52a8\u5316\u8bc4\u4f30\u4e0d\u540c\u91cf\u5b50\u7f16\u8bd1\u5668\u7684\u6027\u80fd\u6307\u6807\u3002", "method": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u7d27\u51d1\u7684Python\u811a\u672c\uff0c\u5305\u542b6\u4e2a\u6559\u5b66\u7535\u8def\uff083-8\u91cf\u5b50\u6bd4\u7279\uff09\uff0c\u652f\u6301Qiskit\u3001tket\u3001Cirq\u548cQiskit-Braket\u63d0\u4f9b\u7a0b\u5e8f\uff0c\u81ea\u52a8\u6536\u96c6\u5173\u952e\u7f16\u8bd1\u5668\u6307\u6807\u5e76\u751f\u6210CSV\u6587\u4ef6\u548c\u53ef\u53d1\u5e03\u56fe\u8868\u3002", "result": "\u6574\u4e2a\u8fd0\u884c\u5728\u7b14\u8bb0\u672c\u7535\u8111\u4e0a\u4e0d\u52303\u5206\u949f\u5b8c\u6210\uff0c\u751f\u6210\u4e86\u5355\u4e00CSV\u6587\u4ef6\u548c\u53ef\u53d1\u5e03\u56fe\u8868\uff0c\u80fd\u591f\u901a\u8fc7\u4e00\u6761\u547d\u4ee4\u91cd\u73b0\u8bba\u6587\u4e2d\u7684\u56fe\u8868\u3002", "conclusion": "\u8be5\u5de5\u5177\u4f5c\u4e3aNISQ\u7f16\u8bd1\u5668\u7814\u7a76\u7684\u5feb\u901f\u542f\u52a8\u56de\u5f52\u6d4b\u8bd5\u5de5\u5177\u53d1\u5e03\uff0c\u91c7\u7528MIT\u8bb8\u53ef\u8bc1\u3002"}}
{"id": "2509.16215", "pdf": "https://arxiv.org/pdf/2509.16215", "abs": "https://arxiv.org/abs/2509.16215", "authors": ["Izavan dos S. Correia", "Henrique C. T. Santos", "Tiago A. E. Ferreira"], "title": "Discovering Software Parallelization Points Using Deep Neural Networks", "categories": ["cs.LG", "cs.AI", "cs.DC", "cs.NE", "cs.PL", "cs.SE"], "comment": "17 pages, 10 figures", "summary": "This study proposes a deep learning-based approach for discovering loops in\nprogramming code according to their potential for parallelization. Two genetic\nalgorithm-based code generators were developed to produce two distinct types of\ncode: (i) independent loops, which are parallelizable, and (ii) ambiguous\nloops, whose dependencies are unclear, making them impossible to define if the\nloop is parallelizable or not. The generated code snippets were tokenized and\npreprocessed to ensure a robust dataset. Two deep learning models - a Deep\nNeural Network (DNN) and a Convolutional Neural Network (CNN) - were\nimplemented to perform the classification. Based on 30 independent runs, a\nrobust statistical analysis was employed to verify the expected performance of\nboth models, DNN and CNN. The CNN showed a slightly higher mean performance,\nbut the two models had a similar variability. Experiments with varying dataset\nsizes highlighted the importance of data diversity for model performance. These\nresults demonstrate the feasibility of using deep learning to automate the\nidentification of parallelizable structures in code, offering a promising tool\nfor software optimization and performance improvement.", "AI": {"tldr": "\u672c\u7814\u7a76\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u6df1\u5ea6\u5b66\u4e60\u7684\u65b9\u6cd5\uff0c\u7528\u4e8e\u53d1\u73b0\u7f16\u7a0b\u4ee3\u7801\u4e2d\u5177\u6709\u5e76\u884c\u5316\u6f5c\u529b\u7684\u5faa\u73af\u7ed3\u6784\u3002\u901a\u8fc7\u9057\u4f20\u7b97\u6cd5\u751f\u6210\u4e24\u79cd\u7c7b\u578b\u7684\u4ee3\u7801\uff08\u53ef\u5e76\u884c\u5316\u7684\u72ec\u7acb\u5faa\u73af\u548c\u4f9d\u8d56\u5173\u7cfb\u4e0d\u660e\u786e\u7684\u6a21\u7cca\u5faa\u73af\uff09\uff0c\u5e76\u4f7f\u7528DNN\u548cCNN\u6a21\u578b\u8fdb\u884c\u5206\u7c7b\u3002", "motivation": "\u81ea\u52a8\u5316\u8bc6\u522b\u4ee3\u7801\u4e2d\u53ef\u5e76\u884c\u5316\u7684\u5faa\u73af\u7ed3\u6784\uff0c\u4e3a\u8f6f\u4ef6\u4f18\u5316\u548c\u6027\u80fd\u63d0\u5347\u63d0\u4f9b\u5de5\u5177\u652f\u6301\u3002", "method": "\u5f00\u53d1\u4e24\u79cd\u9057\u4f20\u7b97\u6cd5\u4ee3\u7801\u751f\u6210\u5668\u751f\u6210\u8bad\u7ec3\u6570\u636e\uff0c\u4f7f\u7528DNN\u548cCNN\u6df1\u5ea6\u5b66\u4e60\u6a21\u578b\u8fdb\u884c\u5206\u7c7b\uff0c\u5e76\u8fdb\u884c30\u6b21\u72ec\u7acb\u8fd0\u884c\u7684\u7edf\u8ba1\u5206\u6790\u3002", "result": "CNN\u6a21\u578b\u8868\u73b0\u51fa\u7565\u9ad8\u7684\u5e73\u5747\u6027\u80fd\uff0c\u4e24\u79cd\u6a21\u578b\u5177\u6709\u76f8\u4f3c\u7684\u53d8\u5f02\u6027\u3002\u6570\u636e\u591a\u6837\u6027\u5bf9\u6a21\u578b\u6027\u80fd\u81f3\u5173\u91cd\u8981\u3002", "conclusion": "\u6df1\u5ea6\u5b66\u4e60\u53ef\u7528\u4e8e\u81ea\u52a8\u5316\u8bc6\u522b\u4ee3\u7801\u4e2d\u7684\u5e76\u884c\u5316\u7ed3\u6784\uff0c\u4e3a\u8f6f\u4ef6\u4f18\u5316\u63d0\u4f9b\u4e86\u6709\u524d\u666f\u7684\u5de5\u5177\u3002"}}
{"id": "2509.16239", "pdf": "https://arxiv.org/pdf/2509.16239", "abs": "https://arxiv.org/abs/2509.16239", "authors": ["Jhet Chan"], "title": "G\u00f6del Mirror: A Formal System For Contradiction-Driven Recursion", "categories": ["cs.LO", "cs.PL", "03B70, 68Q42", "F.4.1; F.4.2; F.4.3; D.3.1"], "comment": "10 pages. Preprint submitted to Logical Methods in Computer Science\n  (LMCS)", "summary": "We introduce the G\\\"odel Mirror, a formal system defined in Lean 4 that\ntreats contradiction as a control signal for recursive structural evolution.\n  Inspired by G\\\"odelian self-reference, our system's operational semantics\nencode symbolic paradoxes as deterministic transitions. Unlike systems designed\nto guarantee normalization, the G\\\"odel Mirror is a minimal and verifiable\narchitecture that leverages a controlled, non-terminating loop as a productive\nfeature.\n  Our Lean 4 mechanization proves that self-referential paradoxes are\ndeterministically encapsulated and resolved into new structures without leading\nto logical explosion, yielding a paraconsistent inference loop: Paradox ->\nEncapsulate -> Reenter -> Node\n  We argue that this calculus opens a new class of symbolic systems in which\ncontradiction is metabolized into structure, providing a formal basis for\nagents capable of resolving internal inconsistencies.", "AI": {"tldr": "G\u00f6del Mirror\u662f\u4e00\u4e2a\u5728Lean 4\u4e2d\u5b9a\u4e49\u7684\u5f62\u5f0f\u7cfb\u7edf\uff0c\u5c06\u77db\u76fe\u4f5c\u4e3a\u9012\u5f52\u7ed3\u6784\u6f14\u5316\u7684\u63a7\u5236\u4fe1\u53f7\uff0c\u5229\u7528\u81ea\u6307\u6096\u8bba\u4f5c\u4e3a\u786e\u5b9a\u6027\u8f6c\u6362\uff0c\u5b9e\u73b0\u6096\u8bba\u7684\u5c01\u88c5\u548c\u89e3\u6790\u3002", "motivation": "\u53d7\u54e5\u5fb7\u5c14\u81ea\u6307\u542f\u53d1\uff0c\u65e8\u5728\u6784\u5efa\u80fd\u591f\u5c06\u77db\u76fe\u8f6c\u5316\u4e3a\u7ed3\u6784\u7684\u5f62\u5f0f\u7cfb\u7edf\uff0c\u4e3a\u80fd\u591f\u89e3\u51b3\u5185\u90e8\u4e0d\u4e00\u81f4\u6027\u7684\u667a\u80fd\u4f53\u63d0\u4f9b\u5f62\u5f0f\u57fa\u7840\u3002", "method": "\u5728Lean 4\u4e2d\u5b9e\u73b0\u7684\u64cd\u4f5c\u8bed\u4e49\uff0c\u5c06\u7b26\u53f7\u6096\u8bba\u7f16\u7801\u4e3a\u786e\u5b9a\u6027\u8f6c\u6362\uff0c\u901a\u8fc7\u53d7\u63a7\u7684\u975e\u7ec8\u6b62\u5faa\u73af\u4f5c\u4e3a\u751f\u4ea7\u6027\u7279\u5f81\u3002", "result": "\u8bc1\u660e\u81ea\u6307\u6096\u8bba\u53ef\u4ee5\u88ab\u786e\u5b9a\u6027\u5c01\u88c5\u5e76\u89e3\u6790\u4e3a\u65b0\u7ed3\u6784\uff0c\u4e0d\u4f1a\u5bfc\u81f4\u903b\u8f91\u7206\u70b8\uff0c\u5f62\u6210\u51c6\u4e00\u81f4\u6027\u63a8\u7406\u5faa\u73af\uff1a\u6096\u8bba->\u5c01\u88c5->\u91cd\u65b0\u8fdb\u5165->\u8282\u70b9\u3002", "conclusion": "\u8be5\u6f14\u7b97\u5f00\u542f\u4e86\u4e00\u7c7b\u65b0\u7684\u7b26\u53f7\u7cfb\u7edf\uff0c\u5176\u4e2d\u77db\u76fe\u88ab\u4ee3\u8c22\u4e3a\u7ed3\u6784\uff0c\u4e3a\u80fd\u591f\u89e3\u51b3\u5185\u90e8\u4e0d\u4e00\u81f4\u6027\u7684\u667a\u80fd\u4f53\u63d0\u4f9b\u4e86\u5f62\u5f0f\u57fa\u7840\u3002"}}
{"id": "2509.16241", "pdf": "https://arxiv.org/pdf/2509.16241", "abs": "https://arxiv.org/abs/2509.16241", "authors": ["Eishkaran Singh", "Tanav Singh Bajaj", "Siddharth Nayak"], "title": "REAMS: Reasoning Enhanced Algorithm for Maths Solving", "categories": ["cs.CL", "cs.AI", "cs.PL"], "comment": null, "summary": "The challenges of solving complex university-level mathematics problems,\nparticularly those from MIT, and Columbia University courses, and selected\ntasks from the MATH dataset, remain a significant obstacle in the field of\nartificial intelligence. Conventional methods have consistently fallen short in\nthis domain, highlighting the need for more advanced approaches. In this paper,\nwe introduce a language-based solution that leverages zero-shot learning and\nmathematical reasoning to effectively solve, explain, and generate solutions\nfor these advanced math problems. By integrating program synthesis, our method\nreduces reliance on large-scale training data while significantly improving\nproblem-solving accuracy. Our approach achieves an accuracy of 90.15%,\nrepresenting a substantial improvement over the previous benchmark of 81% and\nsetting a new standard in automated mathematical problem-solving. These\nfindings highlight the significant potential of advanced AI methodologies to\naddress and overcome the challenges presented by some of the most complex\nmathematical courses and datasets.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u8bed\u8a00\u7684\u65b9\u6cd5\uff0c\u7ed3\u5408\u96f6\u6837\u672c\u5b66\u4e60\u548c\u6570\u5b66\u63a8\u7406\uff0c\u7528\u4e8e\u89e3\u51b3\u5927\u5b66\u7ea7\u522b\u7684\u590d\u6742\u6570\u5b66\u95ee\u9898\uff0c\u5728MIT\u3001\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u8bfe\u7a0b\u548cMATH\u6570\u636e\u96c6\u4e0a\u53d6\u5f97\u4e8690.15%\u7684\u51c6\u786e\u7387\uff0c\u663e\u8457\u8d85\u8d8a\u4e86\u4e4b\u524d81%\u7684\u57fa\u51c6\u3002", "motivation": "\u89e3\u51b3\u5927\u5b66\u7ea7\u522b\u590d\u6742\u6570\u5b66\u95ee\u9898\uff08\u7279\u522b\u662fMIT\u3001\u54e5\u4f26\u6bd4\u4e9a\u5927\u5b66\u8bfe\u7a0b\u548cMATH\u6570\u636e\u96c6\u4e2d\u7684\u95ee\u9898\uff09\u4e00\u76f4\u662f\u4eba\u5de5\u667a\u80fd\u9886\u57df\u7684\u91cd\u5927\u6311\u6218\uff0c\u4f20\u7edf\u65b9\u6cd5\u5728\u6b64\u9886\u57df\u8868\u73b0\u4e0d\u4f73\uff0c\u9700\u8981\u66f4\u5148\u8fdb\u7684\u89e3\u51b3\u65b9\u6848\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u8bed\u8a00\u7684\u65b9\u6cd5\uff0c\u7ed3\u5408\u96f6\u6837\u672c\u5b66\u4e60\u548c\u6570\u5b66\u63a8\u7406\uff0c\u901a\u8fc7\u96c6\u6210\u7a0b\u5e8f\u5408\u6210\u6280\u672f\u6765\u51cf\u5c11\u5bf9\u5927\u89c4\u6a21\u8bad\u7ec3\u6570\u636e\u7684\u4f9d\u8d56\uff0c\u540c\u65f6\u63d0\u9ad8\u95ee\u9898\u89e3\u51b3\u7684\u51c6\u786e\u6027\u3002", "result": "\u8be5\u65b9\u6cd5\u5728\u590d\u6742\u6570\u5b66\u95ee\u9898\u89e3\u51b3\u4e0a\u8fbe\u5230\u4e8690.15%\u7684\u51c6\u786e\u7387\uff0c\u76f8\u6bd4\u4e4b\u524d81%\u7684\u57fa\u51c6\u6709\u663e\u8457\u63d0\u5347\uff0c\u4e3a\u81ea\u52a8\u5316\u6570\u5b66\u95ee\u9898\u89e3\u51b3\u8bbe\u7acb\u4e86\u65b0\u7684\u6807\u51c6\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u8868\u660e\uff0c\u5148\u8fdb\u7684AI\u65b9\u6cd5\u5728\u5e94\u5bf9\u590d\u6742\u6570\u5b66\u8bfe\u7a0b\u548c\u6570\u636e\u96c6\u6311\u6218\u65b9\u9762\u5177\u6709\u5de8\u5927\u6f5c\u529b\uff0c\u80fd\u591f\u6709\u6548\u89e3\u51b3\u3001\u89e3\u91ca\u548c\u751f\u6210\u9ad8\u7ea7\u6570\u5b66\u95ee\u9898\u7684\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2509.16443", "pdf": "https://arxiv.org/pdf/2509.16443", "abs": "https://arxiv.org/abs/2509.16443", "authors": ["Ryan Tomich", "Zhizhen Zhong", "Dirk Englund"], "title": "LightCode: Compiling LLM Inference for Photonic-Electronic Systems", "categories": ["physics.app-ph", "cs.AI", "cs.PL"], "comment": "9 pages, 8 figures", "summary": "The growing demand for low-latency, energy-efficient inference in large\nlanguage models (LLMs) has catalyzed interest in heterogeneous architectures.\nWhile GPUs remain dominant, they are poorly suited for integration with\nemerging domain-specific accelerators like the Photonic Tensor Units (PTUs),\nwhich offer low-power, high-throughput linear computation. This motivates\nhybrid compilation strategies that combine photonic and electronic resources.\nWe present LightCode, a compiler framework and simulator for mapping LLM\ninference workloads across hybrid photonic-electronic systems. LightCode\nintroduces the Stacked Graph, an intermediate representation that encodes\nmultiple hardware-specific realizations of each tensor operation. Hardware\nassignment is formulated as a constrained subgraph selection problem optimized\nfor latency or energy under parametric cost models. We evaluate LightCode on\nthe prefill stage of GPT-2 and Llama-7B showing that under our workload and\nhardware assumptions, (i) Photonic hardware reduced energy by up to 50% in our\nsimulated workloads at maximum sequence length; (ii) multiplexing and\nassignment strategy yielded latency improvements exceeding 10x; and (iii)\nOptimizing for latency or energy resulted in distinct hardware mappings in our\nsimulations. LightCode offers a module, foundational framework and simulator\nfor compiling LLMs to emerging photonic accelerators.", "AI": {"tldr": "LightCode\u662f\u4e00\u4e2a\u9488\u5bf9\u6df7\u5408\u5149\u7535\u7cfb\u7edf\u7684LLM\u63a8\u7406\u7f16\u8bd1\u5668\u6846\u67b6\u548c\u6a21\u62df\u5668\uff0c\u901a\u8fc7\u5806\u53e0\u56fe\u4e2d\u95f4\u8868\u793a\u548c\u7ea6\u675f\u5b50\u56fe\u9009\u62e9\u4f18\u5316\uff0c\u5728GPT-2\u548cLlama-7B\u4e0a\u5b9e\u73b0\u4e86\u6700\u9ad850%\u7684\u80fd\u8017\u964d\u4f4e\u548c10\u500d\u4ee5\u4e0a\u7684\u5ef6\u8fdf\u6539\u8fdb\u3002", "motivation": "\u968f\u7740\u5bf9\u4f4e\u5ef6\u8fdf\u3001\u9ad8\u80fd\u6548LLM\u63a8\u7406\u9700\u6c42\u7684\u589e\u957f\uff0c\u9700\u8981\u7ed3\u5408GPU\u548c\u65b0\u5174\u5149\u7535\u5f20\u91cf\u5355\u5143(PTU)\u7b49\u4e13\u7528\u52a0\u901f\u5668\u7684\u5f02\u6784\u67b6\u6784\uff0c\u4f46\u73b0\u6709GPU\u96be\u4ee5\u4e0e\u5149\u7535\u52a0\u901f\u5668\u96c6\u6210\uff0c\u56e0\u6b64\u9700\u8981\u6df7\u5408\u7f16\u8bd1\u7b56\u7565\u3002", "method": "\u63d0\u51faLightCode\u7f16\u8bd1\u5668\u6846\u67b6\uff0c\u5f15\u5165\u5806\u53e0\u56fe\u4e2d\u95f4\u8868\u793a\u7f16\u7801\u5f20\u91cf\u64cd\u4f5c\u7684\u591a\u79cd\u786c\u4ef6\u7279\u5b9a\u5b9e\u73b0\uff0c\u5c06\u786c\u4ef6\u5206\u914d\u5efa\u6a21\u4e3a\u7ea6\u675f\u5b50\u56fe\u9009\u62e9\u95ee\u9898\uff0c\u57fa\u4e8e\u53c2\u6570\u5316\u6210\u672c\u6a21\u578b\u4f18\u5316\u5ef6\u8fdf\u6216\u80fd\u8017\u3002", "result": "\u5728GPT-2\u548cLlama-7B\u9884\u586b\u5145\u9636\u6bb5\u8bc4\u4f30\u663e\u793a\uff1a\u5149\u7535\u786c\u4ef6\u5728\u6700\u5927\u5e8f\u5217\u957f\u5ea6\u4e0b\u53ef\u964d\u4f4e50%\u80fd\u8017\uff1b\u590d\u7528\u548c\u5206\u914d\u7b56\u7565\u5e26\u6765\u8d85\u8fc710\u500d\u7684\u5ef6\u8fdf\u6539\u8fdb\uff1b\u5ef6\u8fdf\u548c\u80fd\u8017\u4f18\u5316\u4ea7\u751f\u4e0d\u540c\u7684\u786c\u4ef6\u6620\u5c04\u3002", "conclusion": "LightCode\u4e3a\u5c06LLM\u7f16\u8bd1\u5230\u65b0\u5174\u5149\u7535\u52a0\u901f\u5668\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6a21\u5757\u5316\u3001\u57fa\u7840\u6027\u7684\u6846\u67b6\u548c\u6a21\u62df\u5668\u3002"}}
{"id": "2509.16497", "pdf": "https://arxiv.org/pdf/2509.16497", "abs": "https://arxiv.org/abs/2509.16497", "authors": ["Ange-Thierry Ishimwe", "Raghuveer Shivakumar", "Heewoo Kim", "Tamara Lehman", "Joseph Izraelevitz"], "title": "PrediPrune: Reducing Verification Overhead in Souper with Machine Learning Driven Pruning", "categories": ["cs.ET", "cs.PL", "cs.SE"], "comment": null, "summary": "Souper is a powerful enumerative superoptimizer that enhances the runtime\nperformance of programs by optimizing LLVM intermediate representation (IR)\ncode. However, its verification process, which relies on a computationally\nexpensive SMT solver to validate optimization candidates, must explore a large\nsearch space. This large search space makes the verification process\nparticularly expensive, increasing the burden to incorporate Souper into\ncompilation tools. We propose PrediPrune, a stochastic candidate pruning\nstrategy that effectively reduces the number of invalid candidates passed to\nthe SMT solver. By utilizing machine learning techniques to predict the\nvalidity of candidates based on features extracted from the code, PrediPrune\nprunes unlikely candidates early, decreasing the verification workload. When\ncombined with the state-of-the-art approach (Dataflow), PrediPrune decreases\ncompilation time by 51% compared to the Baseline and by 12% compared to using\nonly Dataflow, emphasizing the effectiveness of the combined approach that\nintegrates a purely ML-based method (PrediPrune) with a purely non-ML based\n(Dataflow) method. Additionally, PrediPrune offers a flexible interface to\ntrade-off compilation time and optimization opportunities, allowing end users\nto adjust the balance according to their needs.", "AI": {"tldr": "PrediPrune\u662f\u4e00\u79cd\u968f\u673a\u5019\u9009\u526a\u679d\u7b56\u7565\uff0c\u901a\u8fc7\u673a\u5668\u5b66\u4e60\u9884\u6d4bLLVM IR\u4f18\u5316\u5019\u9009\u7684\u6709\u6548\u6027\uff0c\u51cf\u5c11SMT\u6c42\u89e3\u5668\u7684\u9a8c\u8bc1\u8d1f\u62c5\uff0c\u663e\u8457\u964d\u4f4e\u7f16\u8bd1\u65f6\u95f4\u3002", "motivation": "Souper\u8d85\u7ea7\u4f18\u5316\u5668\u7684\u9a8c\u8bc1\u8fc7\u7a0b\u4f9d\u8d56\u8ba1\u7b97\u6602\u8d35\u7684SMT\u6c42\u89e3\u5668\uff0c\u9700\u8981\u63a2\u7d22\u5927\u91cf\u641c\u7d22\u7a7a\u95f4\uff0c\u589e\u52a0\u4e86\u7f16\u8bd1\u5de5\u5177\u96c6\u6210\u8d1f\u62c5\u3002", "method": "\u4f7f\u7528\u673a\u5668\u5b66\u4e60\u6280\u672f\u57fa\u4e8e\u4ee3\u7801\u7279\u5f81\u9884\u6d4b\u5019\u9009\u6709\u6548\u6027\uff0c\u65e9\u671f\u526a\u679d\u4e0d\u592a\u53ef\u80fd\u7684\u5019\u9009\uff0c\u7ed3\u5408Dataflow\u65b9\u6cd5\u5f62\u6210\u6df7\u5408\u7b56\u7565\u3002", "result": "\u4e0e\u57fa\u7ebf\u76f8\u6bd4\u51cf\u5c1151%\u7f16\u8bd1\u65f6\u95f4\uff0c\u4e0e\u4ec5\u4f7f\u7528Dataflow\u76f8\u6bd4\u51cf\u5c1112%\u7f16\u8bd1\u65f6\u95f4\uff0c\u5c55\u793a\u4e86ML\u4e0e\u975eML\u65b9\u6cd5\u7ed3\u5408\u7684\u6709\u6548\u6027\u3002", "conclusion": "PrediPrune\u63d0\u4f9b\u7075\u6d3b\u63a5\u53e3\u5728\u7f16\u8bd1\u65f6\u95f4\u548c\u4f18\u5316\u673a\u4f1a\u4e4b\u95f4\u6743\u8861\uff0c\u4e3a\u7f16\u8bd1\u5668\u4f18\u5316\u63d0\u4f9b\u4e86\u9ad8\u6548\u7684\u9a8c\u8bc1\u52a0\u901f\u65b9\u6848\u3002"}}
{"id": "2509.17343", "pdf": "https://arxiv.org/pdf/2509.17343", "abs": "https://arxiv.org/abs/2509.17343", "authors": ["Liyi Li", "Federico Zahariev", "Chandeepa Dissanayake", "Jae Swanepoel", "Amr Sabry", "Mark S. Gordon"], "title": "Quantum Simulation Programming via Typing", "categories": ["quant-ph", "cs.PL"], "comment": "Paper accepted to the Quantum Programming Languages (QPL) 2025\n  conference; available from: https://qpl2025.github.io/accepted/", "summary": "Quantum simulations are designed to model quantum systems, and many\ncompilation frameworks have been developed for executing such simulations on\nquantum computers. Most compilers leverage the capabilities of digital and\nanalog quantum computers by representing quantum particle systems with Pauli\nstrings or digital quantum circuits, making it challenging for users in\nphysics, chemistry, and biology to program simulations effectively. QBLUE is\nproposed as the first programming language for describing the behaviors of\nquantum systems in terms of second quantization Hamiltonians. Within QBLUE, a\nnovel type system is proposed to clearly define states across different quantum\nsystems and treat quantum computers as quantum particle systems of specific\ntypes. The type system is compatible with the compilation of quantum\nsimulations expressed in QBLUE for digital and analog quantum computers. With\nQBLUE, users can specify the desired quantum particle system and model the\nsystem on quantum computers.", "AI": {"tldr": "QBLUE\u662f\u7b2c\u4e00\u4e2a\u7528\u4e8e\u4ee5\u4e8c\u6b21\u91cf\u5b50\u5316\u54c8\u5bc6\u987f\u91cf\u63cf\u8ff0\u91cf\u5b50\u7cfb\u7edf\u884c\u4e3a\u7684\u7f16\u7a0b\u8bed\u8a00\uff0c\u901a\u8fc7\u65b0\u9896\u7684\u7c7b\u578b\u7cfb\u7edf\u660e\u786e\u5b9a\u4e49\u4e0d\u540c\u91cf\u5b50\u7cfb\u7edf\u72b6\u6001\uff0c\u5c06\u91cf\u5b50\u8ba1\u7b97\u673a\u89c6\u4e3a\u7279\u5b9a\u7c7b\u578b\u7684\u91cf\u5b50\u7c92\u5b50\u7cfb\u7edf\u3002", "motivation": "\u73b0\u6709\u91cf\u5b50\u6a21\u62df\u7f16\u8bd1\u5668\u5927\u591a\u4f7f\u7528Pauli\u5b57\u7b26\u4e32\u6216\u6570\u5b57\u91cf\u5b50\u7535\u8def\u8868\u793a\u91cf\u5b50\u7c92\u5b50\u7cfb\u7edf\uff0c\u8fd9\u4f7f\u5f97\u7269\u7406\u3001\u5316\u5b66\u548c\u751f\u7269\u5b66\u9886\u57df\u7684\u7528\u6237\u96be\u4ee5\u6709\u6548\u7f16\u7a0b\u91cf\u5b50\u6a21\u62df\u3002", "method": "\u63d0\u51faQBLUE\u7f16\u7a0b\u8bed\u8a00\uff0c\u5305\u542b\u65b0\u578b\u7c7b\u578b\u7cfb\u7edf\u6765\u5b9a\u4e49\u91cf\u5b50\u7cfb\u7edf\u72b6\u6001\uff0c\u5c06\u91cf\u5b50\u8ba1\u7b97\u673a\u89c6\u4e3a\u91cf\u5b50\u7c92\u5b50\u7cfb\u7edf\uff0c\u652f\u6301\u6570\u5b57\u548c\u6a21\u62df\u91cf\u5b50\u8ba1\u7b97\u673a\u7684\u7f16\u8bd1\u3002", "result": "QBLUE\u5141\u8bb8\u7528\u6237\u6307\u5b9a\u6240\u9700\u7684\u91cf\u5b50\u7c92\u5b50\u7cfb\u7edf\u5e76\u5728\u91cf\u5b50\u8ba1\u7b97\u673a\u4e0a\u5efa\u6a21\u7cfb\u7edf\uff0c\u7c7b\u578b\u7cfb\u7edf\u4e0e\u91cf\u5b50\u6a21\u62df\u7f16\u8bd1\u517c\u5bb9\u3002", "conclusion": "QBLUE\u4e3a\u89e3\u51b3\u91cf\u5b50\u6a21\u62df\u7f16\u7a0b\u96be\u9898\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\uff0c\u4f7f\u975e\u4e13\u4e1a\u7528\u6237\u80fd\u591f\u66f4\u8f7b\u677e\u5730\u8fdb\u884c\u91cf\u5b50\u7cfb\u7edf\u5efa\u6a21\u3002"}}
