{"id": "2509.21629", "pdf": "https://arxiv.org/pdf/2509.21629", "abs": "https://arxiv.org/abs/2509.21629", "authors": ["Anjiang Wei", "Tarun Suresh", "Tianran Sun", "Haoze Wu", "Ke Wang", "Alex Aiken"], "title": "InvBench: Can LLMs Accelerate Program Verification with Invariant Synthesis?", "categories": ["cs.PL", "cs.AI", "cs.CL", "cs.LG"], "comment": null, "summary": "Program verification relies on loop invariants, yet automatically discovering\nstrong invariants remains a long-standing challenge. We introduce a principled\nframework for evaluating LLMs on invariant synthesis. Our approach uses a\nverifier-based decision procedure with a formal soundness guarantee and\nassesses not only correctness but also the speedup that invariants provide in\nverification. We evaluate 7 state-of-the-art LLMs, and existing LLM-based\nverifiers against the traditional solver UAutomizer. While LLM-based verifiers\nrepresent a promising direction, they do not yet offer a significant advantage\nover UAutomizer. Model capability also proves critical, as shown by sharp\ndifferences in speedups across models, and our benchmark remains an open\nchallenge for current LLMs. Finally, we show that supervised fine-tuning and\nBest-of-N sampling can improve performance: fine-tuning on 3589 instances\nraises the percentage of speedup cases for Qwen3-Coder-480B from 8% to 29.2%,\nand Best-of-N sampling with N=16 improves Claude-sonnet-4 from 8.8% to 22.1%."}
{"id": "2509.21793", "pdf": "https://arxiv.org/pdf/2509.21793", "abs": "https://arxiv.org/abs/2509.21793", "authors": ["Jianhong Zhao", "Everett Hildenbrandt", "Juan Conejero", "Yongwang Zhao"], "title": "Compiling by Proving: Language-Agnostic Automatic Optimization from Formal Semantics", "categories": ["cs.PL", "cs.CL"], "comment": null, "summary": "Verification proofs encode complete program behavior, yet we discard them\nafter checking correctness. We present compiling by proving, a paradigm that\ntransforms these proofs into optimized execution rules. By constructing\nAll-Path Reachability Proofs through symbolic execution and compiling their\ngraph structure, we consolidate many semantic rewrites into single rules while\npreserving correctness by construction. We implement this as a\nlanguage-agnostic extension to the K framework. Evaluation demonstrates\nperformance improvements across different compilation scopes: opcode-level\noptimizations show consistent speedups, while whole-program compilation\nachieves orders of magnitude greater performance gains."}
{"id": "2509.22614", "pdf": "https://arxiv.org/pdf/2509.22614", "abs": "https://arxiv.org/abs/2509.22614", "authors": ["Dmitri Volkov", "Yafei Yang", "Chung-chieh Shan"], "title": "Committing to the bit: Relational programming with semiring arrays and SAT solving", "categories": ["cs.PL", "D.3.1; F.3.2; D.3.2; D.3.3"], "comment": "12 pages, for associated repo see\n  https://github.com/sporkl/semiringkanren", "summary": "We propose semiringKanren, a relational programming language where each\nrelation expression denotes a semiring array. We formalize a type system that\nrestricts the arrays to finite size. We then define a semantics that is\nparameterized by the semiring that the arrays draw their elements from. We\ncompile semiringKanren types to bitstring representations. For the Boolean\nsemiring, this compilation enables us to use an SAT solver to run\nsemiringKanren programs efficiently. We compare the performance of\nsemiringKanren and faster miniKanren for solving Sudoku puzzles. Our experiment\nshows that semiringKanren can be a more efficient variant of miniKanren."}
{"id": "2509.21499", "pdf": "https://arxiv.org/pdf/2509.21499", "abs": "https://arxiv.org/abs/2509.21499", "authors": ["Abdul Waheed", "Zhen Wu", "Carolyn Ros√©", "Daphne Ippolito"], "title": "On Code-Induced Reasoning in LLMs", "categories": ["cs.CL", "cs.PL"], "comment": null, "summary": "Code data has been shown to enhance the reasoning capabilities of large\nlanguage models (LLMs), but it remains unclear which aspects of code are most\nresponsible. We investigate this question with a systematic, data-centric\nframework. We construct parallel instruction datasets in ten programming\nlanguages and apply controlled perturbations that selectively disrupt\nstructural or semantic properties of code. We then finetune LLMs from five\nmodel families and eight scales on each variant and evaluate their performance\non natural language, math, and code tasks. Across 3,331 experiments, our\nresults show that LLMs are more vulnerable to structural perturbations than\nsemantic ones, particularly on math and code tasks. Appropriate abstractions\nlike pseudocode and flowcharts can be as effective as code, while encoding the\nsame information with fewer tokens without adhering to original syntax can\noften retain or even improve performance. Remarkably, even corrupted code with\nmisleading signals remains competitive when surface-level regularities persist.\nFinally, syntactic styles also shape task-specific gains with Python favoring\nnatural language reasoning and lower-level languages such as Java and Rust\nfavoring math. Through our systematic framework, we aim to provide insight into\nhow different properties of code influence reasoning and inform the design of\ntraining data for enhancing LLM reasoning capabilities."}
{"id": "2509.21550", "pdf": "https://arxiv.org/pdf/2509.21550", "abs": "https://arxiv.org/abs/2509.21550", "authors": ["Pedro Mizuno", "Kimiya Mohammadtaheri", "Linfan Qian", "Joshua Johnson", "Danny Akbarzadeh", "Chris Neely", "Mario Baldi", "Nacihket Kapre", "Mina Tahmasbi Arashloo"], "title": "A Target-Agnostic Protocol-Independent Interface for the Transport Layer", "categories": ["cs.NI", "cs.OS", "cs.PL", "C.2.2; C.2.3; D.3.3"], "comment": null, "summary": "Transport protocols are fundamental to network communications, continuously\nevolving to meet the demands of new applications, workloads, and network\narchitectures while running in a wide range of execution environments (a.k.a\ntargets). We argue that this diversity across protocols and targets calls for a\nhigh-level, target-agnostic programming abstraction for the transport layer.\nSpecifically, we propose to specify transport protocols as high-level programs\nthat take an event and flow state as input, and using constrained C-like\nconstructs, produce the updated state along with target-agnostic instructions\nfor key transport operations such as data reassembly, packet generation and\nscheduling, and timer manipulations.\n  We show the benefits of our high-level transport programs by developing\nmultiple transport protocols in our programming framework called TINF,\ndeveloping two TINF- compliant backends, one in DPDK and one in Linux eXpress\nDataPath, and deploying TINF programs for multiple protocols across both\nbackends. Inspired by the benefits unlocked by L2/L3 packet-processing\nlanguages like P4, we believe target-agnostic transport programs can reduce the\ndevelopment effort for transport protocols, enable automated analysis and\nformal verification of the transport layer, and further research in\nprogrammable targets for transport protocols."}
