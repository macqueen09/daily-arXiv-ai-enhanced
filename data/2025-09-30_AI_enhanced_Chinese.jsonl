{"id": "2509.22982", "pdf": "https://arxiv.org/pdf/2509.22982", "abs": "https://arxiv.org/abs/2509.22982", "authors": ["David M Kahn", "Jan Hoffmann", "Thomas Reps", "Jessie Grosen"], "title": "Efficient Cost Bounds with Linear Maps", "categories": ["cs.PL"], "comment": null, "summary": "The Automatic Amortized Resource Analysis (AARA) derives program-execution\ncost bounds using types. To do so, AARA often makes use of cost-free types,\nwhich are critical for the composition of types and cost bounds. However,\ninferring cost-free types using the current state-of-the-art algorithm is\nexpensive due to recursive dependence on additional cost-free types.\nFurthermore, that algorithm uses a heuristic only applicable to polynomial cost\nbounds, and not, e.g., exponential bounds. This paper presents a new approach\nto these problems by representing the cost-free types of a function in a new\nway: with a linear map, which can stand for infinitely many cost-free types.\nSuch maps enable an algebraic flavor of reasoning about cost bounds (including\nnon-polynomial bounds) via matrix inequalities. These inequalities can be\nsolved with off-the-shelf linear-programming tools for many programs, so that\ntypes can always be efficiently checked and often be efficiently inferred. An\nexperimental evaluation with a prototype implementation shows that-when it is\napplicable-the inference of linear maps is exponentially more efficient than\nthe state-of-the-art algorithm.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u4f7f\u7528\u7ebf\u6027\u6620\u5c04\u8868\u793a\u6210\u672c\u65e0\u5173\u7c7b\u578b\u7684\u65b0\u65b9\u6cd5\uff0c\u901a\u8fc7\u77e9\u9635\u4e0d\u7b49\u5f0f\u89e3\u51b3\u6210\u672c\u8fb9\u754c\u63a8\u7406\u95ee\u9898\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u7c7b\u578b\u63a8\u65ad\u6548\u7387", "motivation": "\u4f20\u7edfAARA\u65b9\u6cd5\u4e2d\u6210\u672c\u65e0\u5173\u7c7b\u578b\u63a8\u65ad\u6548\u7387\u4f4e\u4e0b\uff0c\u4e14\u73b0\u6709\u542f\u53d1\u5f0f\u65b9\u6cd5\u4ec5\u9002\u7528\u4e8e\u591a\u9879\u5f0f\u6210\u672c\u8fb9\u754c\uff0c\u65e0\u6cd5\u5904\u7406\u6307\u6570\u8fb9\u754c\u7b49\u95ee\u9898", "method": "\u4f7f\u7528\u7ebf\u6027\u6620\u5c04\u8868\u793a\u6210\u672c\u65e0\u5173\u7c7b\u578b\uff0c\u901a\u8fc7\u77e9\u9635\u4e0d\u7b49\u5f0f\u8fdb\u884c\u4ee3\u6570\u63a8\u7406\uff0c\u5229\u7528\u73b0\u6210\u7684\u7ebf\u6027\u89c4\u5212\u5de5\u5177\u6c42\u89e3", "result": "\u539f\u578b\u5b9e\u73b0\u8868\u660e\uff0c\u7ebf\u6027\u6620\u5c04\u63a8\u65ad\u6bd4\u73b0\u6709\u6700\u4f18\u7b97\u6cd5\u6548\u7387\u5448\u6307\u6570\u7ea7\u63d0\u5347", "conclusion": "\u7ebf\u6027\u6620\u5c04\u65b9\u6cd5\u4e3a\u6210\u672c\u8fb9\u754c\u5206\u6790\u63d0\u4f9b\u4e86\u9ad8\u6548\u4e14\u901a\u7528\u7684\u89e3\u51b3\u65b9\u6848\uff0c\u7279\u522b\u9002\u7528\u4e8e\u975e\u591a\u9879\u5f0f\u6210\u672c\u8fb9\u754c"}}
{"id": "2509.23061", "pdf": "https://arxiv.org/pdf/2509.23061", "abs": "https://arxiv.org/abs/2509.23061", "authors": ["Xu Xu", "Xin Li", "Xingwei Qu", "Jie Fu", "Binhang Yuan"], "title": "Local Success Does Not Compose: Benchmarking Large Language Models for Compositional Formal Verification", "categories": ["cs.PL", "cs.AI"], "comment": null, "summary": "We introduce DafnyCOMP, a benchmark for evaluating large language models\n(LLMs) on compositional specification generation in Dafny. Unlike prior\nbenchmarks that focus on single-function tasks, DafnyCOMP targets programs\ncomposed of multiple interacting functions with data dependencies, requiring\nreasoning across component boundaries. The benchmark consists of 300\nautomatically synthesized multi-function programs. We evaluate several\nstate-of-the-art LLM families and find that, while they perform well on\nsingle-function verification, their performance drops sharply on compositional\ntasks. Analysis reveals systematic failures in cross-functional reasoning,\nincluding fragile specifications, misalignment between implementations and\nproofs, and unstable reasoning. DafnyCOMP thus provides a diagnostic tool for\nmeasuring progress toward reliable, verifiable, and compositional code\ngeneration with LLMs.", "AI": {"tldr": "DafnyCOMP\u662f\u4e00\u4e2a\u7528\u4e8e\u8bc4\u4f30\u5927\u578b\u8bed\u8a00\u6a21\u578b\u5728Dafny\u7ec4\u5408\u5f0f\u89c4\u8303\u751f\u6210\u80fd\u529b\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b300\u4e2a\u81ea\u52a8\u5408\u6210\u7684\u591a\u51fd\u6570\u7a0b\u5e8f\uff0c\u663e\u793aLLM\u5728\u7ec4\u5408\u4efb\u52a1\u4e0a\u8868\u73b0\u663e\u8457\u4e0b\u964d\u3002", "motivation": "\u73b0\u6709\u57fa\u51c6\u6d4b\u8bd5\u4e3b\u8981\u5173\u6ce8\u5355\u51fd\u6570\u4efb\u52a1\uff0c\u7f3a\u4e4f\u5bf9\u591a\u51fd\u6570\u4ea4\u4e92\u548c\u6570\u636e\u4f9d\u8d56\u7684\u7ec4\u5408\u5f0f\u89c4\u8303\u751f\u6210\u7684\u8bc4\u4f30\uff0c\u9700\u8981\u8de8\u7ec4\u4ef6\u8fb9\u754c\u7684\u63a8\u7406\u80fd\u529b\u3002", "method": "\u6784\u5efa\u5305\u542b300\u4e2a\u81ea\u52a8\u5408\u6210\u7684\u591a\u51fd\u6570\u7a0b\u5e8f\u7684\u57fa\u51c6\u6d4b\u8bd5DafnyCOMP\uff0c\u8bc4\u4f30\u591a\u4e2a\u6700\u5148\u8fdb\u7684LLM\u5bb6\u65cf\u5728\u7ec4\u5408\u5f0f\u89c4\u8303\u751f\u6210\u4efb\u52a1\u4e0a\u7684\u8868\u73b0\u3002", "result": "LLM\u5728\u5355\u51fd\u6570\u9a8c\u8bc1\u4e0a\u8868\u73b0\u826f\u597d\uff0c\u4f46\u5728\u7ec4\u5408\u4efb\u52a1\u4e0a\u6027\u80fd\u6025\u5267\u4e0b\u964d\uff0c\u5206\u6790\u663e\u793a\u5b58\u5728\u8de8\u51fd\u6570\u63a8\u7406\u7684\u7cfb\u7edf\u6027\u5931\u8d25\uff0c\u5305\u62ec\u8106\u5f31\u89c4\u8303\u3001\u5b9e\u73b0\u4e0e\u8bc1\u660e\u4e0d\u5bf9\u9f50\u548c\u4e0d\u7a33\u5b9a\u63a8\u7406\u3002", "conclusion": "DafnyCOMP\u63d0\u4f9b\u4e86\u4e00\u4e2a\u8bca\u65ad\u5de5\u5177\uff0c\u7528\u4e8e\u8861\u91cfLLM\u5728\u53ef\u9760\u3001\u53ef\u9a8c\u8bc1\u548c\u7ec4\u5408\u5f0f\u4ee3\u7801\u751f\u6210\u65b9\u9762\u7684\u8fdb\u5c55\u3002"}}
{"id": "2509.23229", "pdf": "https://arxiv.org/pdf/2509.23229", "abs": "https://arxiv.org/abs/2509.23229", "authors": ["Yawen Guan", "Cl\u00e9ment Pit-Claudel"], "title": "Fine-Grained Reasoning About Container-Internal Pointers with Logical Pinning", "categories": ["cs.PL", "D.2.4; F.3.1"], "comment": null, "summary": "Most separation logics hide container-internal pointers for modularity. This\nmakes it difficult to specify container APIs that temporarily expose those\npointers to the outside, and to verify programs that use these APIs. We present\nlogical pinning, a lightweight borrowing model for sequential programs that\nallows users to selectively track container-internal pointers at the logical\nlevel. Our model generalizes the magic-wand operator, making it easy to write\nand prove precise specifications, including pointer-stability properties.\nBecause it only changes how representation predicates and specifications are\nwritten, our approach is compatible with most separation logic variants. We\ndemonstrate the practicality of logical pinning by verifying small but\nrepresentative pointer-manipulating programs, and deriving more precise\nversions of common container specifications. In doing so, we show that our\napproach subsumes some well-known proof patterns, simplifies some complex\nproofs, and enables reasoning about program patterns not supported by\ntraditional specifications. All of our results are mechanized in the Rocq proof\nassistant, using the CFML library.", "AI": {"tldr": "\u63d0\u51fa\u903b\u8f91\u56fa\u5b9a\uff08logical pinning\uff09\u65b9\u6cd5\uff0c\u5141\u8bb8\u5728\u5206\u79bb\u903b\u8f91\u4e2d\u8ddf\u8e2a\u5bb9\u5668\u5185\u90e8\u6307\u9488\uff0c\u89e3\u51b3\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u9a8c\u8bc1\u66b4\u9732\u5185\u90e8\u6307\u9488\u7684\u5bb9\u5668API\u7684\u95ee\u9898\u3002", "motivation": "\u4f20\u7edf\u5206\u79bb\u903b\u8f91\u9690\u85cf\u5bb9\u5668\u5185\u90e8\u6307\u9488\u4ee5\u5b9e\u73b0\u6a21\u5757\u5316\uff0c\u4f46\u8fd9\u4f7f\u5f97\u96be\u4ee5\u6307\u5b9a\u548c\u9a8c\u8bc1\u90a3\u4e9b\u4e34\u65f6\u66b4\u9732\u5185\u90e8\u6307\u9488\u7684\u5bb9\u5668API\u3002", "method": "\u57fa\u4e8e\u8f7b\u91cf\u7ea7\u501f\u7528\u6a21\u578b\uff0c\u63a8\u5e7f\u9b54\u672f\u68d2\u64cd\u4f5c\u7b26\uff0c\u5141\u8bb8\u5728\u903b\u8f91\u5c42\u9762\u9009\u62e9\u6027\u8ddf\u8e2a\u5bb9\u5668\u5185\u90e8\u6307\u9488\uff0c\u4ec5\u6539\u53d8\u8868\u793a\u8c13\u8bcd\u548c\u89c4\u8303\u7684\u7f16\u5199\u65b9\u5f0f\u3002", "result": "\u9a8c\u8bc1\u4e86\u5177\u6709\u4ee3\u8868\u6027\u7684\u6307\u9488\u64cd\u4f5c\u7a0b\u5e8f\uff0c\u63a8\u5bfc\u51fa\u66f4\u7cbe\u786e\u7684\u5bb9\u5668\u89c4\u8303\uff0c\u80fd\u591f\u6db5\u76d6\u5df2\u77e5\u8bc1\u660e\u6a21\u5f0f\u3001\u7b80\u5316\u590d\u6742\u8bc1\u660e\uff0c\u5e76\u652f\u6301\u4f20\u7edf\u89c4\u8303\u65e0\u6cd5\u5904\u7406\u7684\u7a0b\u5e8f\u6a21\u5f0f\u3002", "conclusion": "\u903b\u8f91\u56fa\u5b9a\u65b9\u6cd5\u5b9e\u7528\u4e14\u517c\u5bb9\u5927\u591a\u6570\u5206\u79bb\u903b\u8f91\u53d8\u4f53\uff0c\u5728Rocq\u8bc1\u660e\u52a9\u624b\u4e2d\u901a\u8fc7CFML\u5e93\u8fdb\u884c\u4e86\u673a\u68b0\u5316\u9a8c\u8bc1\u3002"}}
{"id": "2509.25114", "pdf": "https://arxiv.org/pdf/2509.25114", "abs": "https://arxiv.org/abs/2509.25114", "authors": ["Erdenebayar Bayarmagnai", "Fatemeh Mohammadi", "R\u00e9mi Pr\u00e9bet"], "title": "From Affine to Polynomial: Synthesizing Loops with Branches via Algebraic Geometry", "categories": ["cs.PL", "cs.SC", "math.AG"], "comment": null, "summary": "Ensuring software correctness remains a fundamental challenge in formal\nprogram verification. One promising approach relies on finding polynomial\ninvariants for loops. Polynomial invariants are properties of a program loop\nthat hold before and after each iteration. Generating such invariants is a\ncrucial task in loop analysis, but it is undecidable in the general case.\nRecently, an alternative approach to this problem has emerged, focusing on\nsynthesizing loops from invariants. However, existing methods only synthesize\naffine loops without guard conditions from polynomial invariants. In this\npaper, we address a more general problem, allowing loops to have polynomial\nupdate maps with a given structure, inequations in the guard condition, and\npolynomial invariants of arbitrary form.\n  We use algebraic geometry tools to design and implement an algorithm that\ncomputes a finite set of polynomial equations whose solutions correspond to all\nnondeterministic branching loops satisfying the given invariants. Furthermore,\nwe introduce a new class of invariants for which we present a significantly\nmore efficient algorithm. In other words, we reduce the problem of synthesizing\nloops to find solutions of multivariate polynomial systems with rational\nentries. This final step is handled in our software using an SMT solver.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u4ece\u591a\u9879\u5f0f\u4e0d\u53d8\u91cf\u5408\u6210\u5faa\u73af\u7a0b\u5e8f\u7684\u65b0\u65b9\u6cd5\uff0c\u652f\u6301\u5177\u6709\u591a\u9879\u5f0f\u66f4\u65b0\u6620\u5c04\u3001\u4e0d\u7b49\u5f0f\u5b88\u536b\u6761\u4ef6\u548c\u4efb\u610f\u5f62\u5f0f\u591a\u9879\u5f0f\u4e0d\u53d8\u91cf\u7684\u5faa\u73af\u3002", "motivation": "\u73b0\u6709\u65b9\u6cd5\u53ea\u80fd\u4ece\u591a\u9879\u5f0f\u4e0d\u53d8\u91cf\u5408\u6210\u65e0\u5b88\u536b\u6761\u4ef6\u7684\u4eff\u5c04\u5faa\u73af\uff0c\u800c\u5b9e\u9645\u7a0b\u5e8f\u901a\u5e38\u5305\u542b\u66f4\u590d\u6742\u7684\u5faa\u73af\u7ed3\u6784\uff0c\u56e0\u6b64\u9700\u8981\u66f4\u901a\u7528\u7684\u5408\u6210\u65b9\u6cd5\u3002", "method": "\u4f7f\u7528\u4ee3\u6570\u51e0\u4f55\u5de5\u5177\u8bbe\u8ba1\u7b97\u6cd5\uff0c\u751f\u6210\u591a\u9879\u5f0f\u65b9\u7a0b\u7ec4\uff0c\u5176\u89e3\u5bf9\u5e94\u6ee1\u8db3\u7ed9\u5b9a\u4e0d\u53d8\u91cf\u7684\u6240\u6709\u975e\u786e\u5b9a\u6027\u5206\u652f\u5faa\u73af\u3002\u5bf9\u4e8e\u7279\u5b9a\u4e0d\u53d8\u91cf\u7c7b\uff0c\u63d0\u51fa\u4e86\u66f4\u9ad8\u6548\u7684\u7b97\u6cd5\u3002", "result": "\u5b9e\u73b0\u4e86\u5c06\u5faa\u73af\u5408\u6210\u95ee\u9898\u8f6c\u5316\u4e3a\u6709\u7406\u6570\u57df\u4e0a\u591a\u5143\u591a\u9879\u5f0f\u7cfb\u7edf\u6c42\u89e3\u95ee\u9898\uff0c\u5e76\u901a\u8fc7SMT\u6c42\u89e3\u5668\u5904\u7406\u6700\u7ec8\u6c42\u89e3\u6b65\u9aa4\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u6269\u5c55\u4e86\u5faa\u73af\u5408\u6210\u7684\u9002\u7528\u8303\u56f4\uff0c\u80fd\u591f\u5904\u7406\u66f4\u590d\u6742\u7684\u5faa\u73af\u7ed3\u6784\uff0c\u4e3a\u7a0b\u5e8f\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u66f4\u5f3a\u5927\u7684\u5de5\u5177\u3002"}}
{"id": "2509.22908", "pdf": "https://arxiv.org/pdf/2509.22908", "abs": "https://arxiv.org/abs/2509.22908", "authors": ["Sergiu Bursuc", "Theodore Ehrenborg", "Shaowei Lin", "Lacramioara Astefanoaei", "Ionel Emilian Chiosa", "Jure Kukovec", "Alok Singh", "Oliver Butterley", "Adem Bizid", "Quinn Dougherty", "Miranda Zhao", "Max Tan", "Max Tegmark"], "title": "A benchmark for vericoding: formally verified program synthesis", "categories": ["cs.SE", "cs.LG", "cs.PL"], "comment": "25 pages, 1 figure; data available at\n  https://github.com/Beneficial-AI-Foundation/vericoding-benchmark", "summary": "We present and test the largest benchmark for vericoding, LLM-generation of\nformally verified code from formal specifications - in contrast to vibe coding,\nwhich generates potentially buggy code from a natural language description. Our\nbenchmark contains 12,504 formal specifications, with 3,029 in Dafny, 2,334 in\nVerus/Rust and 7,141 in Lean. Of these, 6,174 are new unseen problems. We find\nvericoding success rates of 27% in Lean, 44% in Verus/Rust and 82% in Dafny\nusing off-the-shelf LLMs. Adding natural-language descriptions does not\nsignificantly improve performance. We also find that LLM progress has improved\nprogress on pure Dafny verification from 68% to 96% over the past year. The\nbenchmark and vericoding results are shared at\nhttps://github.com/Beneficial-AI-Foundation/vericoding-benchmark", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u6700\u5927\u7684\u9a8c\u8bc1\u7f16\u7801\u57fa\u51c6\u6d4b\u8bd5\uff0c\u5305\u542b12,504\u4e2a\u5f62\u5f0f\u89c4\u8303\uff0c\u5728Dafny\u3001Verus/Rust\u548cLean\u4e09\u79cd\u8bed\u8a00\u4e2d\u6d4b\u8bd5LLM\u751f\u6210\u5f62\u5f0f\u9a8c\u8bc1\u4ee3\u7801\u7684\u80fd\u529b\u3002", "motivation": "\u4e3a\u4e86\u89e3\u51b3\u4f20\u7edf\u81ea\u7136\u8bed\u8a00\u7f16\u7a0b\u53ef\u80fd\u4ea7\u751f\u9519\u8bef\u4ee3\u7801\u7684\u95ee\u9898\uff0c\u5efa\u7acb\u5f62\u5f0f\u5316\u9a8c\u8bc1\u4ee3\u7801\u751f\u6210\u7684\u57fa\u51c6\u6d4b\u8bd5\u3002", "method": "\u4f7f\u752812,504\u4e2a\u5f62\u5f0f\u89c4\u8303\uff08\u5176\u4e2d6,174\u4e2a\u662f\u65b0\u95ee\u9898\uff09\uff0c\u5728Dafny\u3001Verus/Rust\u548cLean\u4e09\u79cd\u8bed\u8a00\u4e2d\u6d4b\u8bd5\u73b0\u6210LLM\u7684\u9a8c\u8bc1\u7f16\u7801\u80fd\u529b\u3002", "result": "\u9a8c\u8bc1\u7f16\u7801\u6210\u529f\u7387\uff1aLean 27%\u3001Verus/Rust 44%\u3001Dafny 82%\u3002\u6dfb\u52a0\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u4e0d\u4f1a\u663e\u8457\u63d0\u5347\u6027\u80fd\u3002Dafny\u9a8c\u8bc1\u5728\u4e00\u5e74\u5185\u4ece68%\u63d0\u5347\u523096%\u3002", "conclusion": "\u9a8c\u8bc1\u7f16\u7801\u662f\u53ef\u884c\u7684\uff0c\u4e0d\u540c\u8bed\u8a00\u8868\u73b0\u5dee\u5f02\u663e\u8457\uff0cDafny\u8868\u73b0\u6700\u4f73\uff0cLLM\u5728\u5f62\u5f0f\u9a8c\u8bc1\u65b9\u9762\u8fdb\u6b65\u8fc5\u901f\u3002"}}
{"id": "2509.23686", "pdf": "https://arxiv.org/pdf/2509.23686", "abs": "https://arxiv.org/abs/2509.23686", "authors": ["Yifeng He", "Luning Yang", "Christopher Castro Gaw Gonzalo", "Hao Chen"], "title": "TF-Bench: Evaluating Program Semantics Reasoning with Type Inference in System F", "categories": ["cs.CL", "cs.PL", "cs.SE"], "comment": "NeurIPS '25, package released at:\n  https://github.com/SecurityLab-UCD/TF-Bench", "summary": "Large Language Models (LLMs) are increasingly integrated into the software\nengineering ecosystem. Their test-time compute (TTC) reasoning capabilities\nshow significant potential for understanding program logic and semantics beyond\nmere token recognition. However, current benchmarks for code reasoning lack a\nformal, program-centric deductive framework to ensure sound evaluation, and are\nincapable of assessing whether models genuinely reason about program semantics\nor merely exploit superficial associations between natural language and code\ntokens. To bridge this gap, we introduce TF-Bench, a benchmark designed to\nevaluate LLM reasoning based on type inference in System F, a task we refer to\nas program semantics reasoning. By employing verified transformations to remove\nsemantically irrelevant natural language, we construct TF-Bench_pure, a purely\nsemantics-driven variant of TF-Bench. Our analysis reveals substantial\nlimitations in state-of-the-art LLMs, with the best-performing LLM\n(Claude-3.7-sonnet) achieving only 55.85% accuracy on TF-Bench_pure.\nAdditionally, we propose two novel metrics to assess robustness and the\neffectiveness of test-time reasoning, underscoring critical limitations in\ncurrent LLM capabilities and highlighting essential directions for future\nresearch.", "AI": {"tldr": "TF-Bench\u662f\u4e00\u4e2a\u57fa\u4e8eSystem F\u7c7b\u578b\u63a8\u65ad\u7684\u57fa\u51c6\u6d4b\u8bd5\uff0c\u7528\u4e8e\u8bc4\u4f30LLM\u7684\u7a0b\u5e8f\u8bed\u4e49\u63a8\u7406\u80fd\u529b\uff0c\u901a\u8fc7\u53bb\u9664\u8bed\u4e49\u65e0\u5173\u7684\u81ea\u7136\u8bed\u8a00\u6784\u5efa\u7eaf\u8bed\u4e49\u7248\u672cTF-Bench_pure\uff0c\u63ed\u793a\u4e86\u5f53\u524d\u6700\u5148\u8fdbLLM\u5728\u7a0b\u5e8f\u8bed\u4e49\u63a8\u7406\u65b9\u9762\u7684\u4e25\u91cd\u5c40\u9650\u6027\u3002", "motivation": "\u5f53\u524d\u4ee3\u7801\u63a8\u7406\u57fa\u51c6\u7f3a\u4e4f\u6b63\u5f0f\u7684\u7a0b\u5e8f\u4e2d\u5fc3\u6f14\u7ece\u6846\u67b6\uff0c\u65e0\u6cd5\u8bc4\u4f30\u6a21\u578b\u662f\u5426\u771f\u6b63\u7406\u89e3\u7a0b\u5e8f\u8bed\u4e49\u8fd8\u662f\u4ec5\u5229\u7528\u81ea\u7136\u8bed\u8a00\u548c\u4ee3\u7801\u6807\u8bb0\u4e4b\u95f4\u7684\u8868\u9762\u5173\u8054\u3002", "method": "\u57fa\u4e8eSystem F\u7c7b\u578b\u63a8\u65ad\u6784\u5efaTF-Bench\u57fa\u51c6\uff0c\u901a\u8fc7\u9a8c\u8bc1\u8f6c\u6362\u53bb\u9664\u8bed\u4e49\u65e0\u5173\u7684\u81ea\u7136\u8bed\u8a00\u521b\u5efaTF-Bench_pure\u7eaf\u8bed\u4e49\u7248\u672c\uff0c\u5e76\u63d0\u51fa\u4e24\u4e2a\u65b0\u6307\u6807\u8bc4\u4f30\u9c81\u68d2\u6027\u548c\u6d4b\u8bd5\u65f6\u63a8\u7406\u6548\u679c\u3002", "result": "\u6700\u5148\u8fdb\u7684LLM\uff08Claude-3.7-sonnet\uff09\u5728TF-Bench_pure\u4e0a\u4ec5\u8fbe\u523055.85%\u7684\u51c6\u786e\u7387\uff0c\u663e\u793a\u51fa\u4e25\u91cd\u7684\u80fd\u529b\u9650\u5236\u3002", "conclusion": "\u5f53\u524dLLM\u5728\u7a0b\u5e8f\u8bed\u4e49\u63a8\u7406\u65b9\u9762\u5b58\u5728\u91cd\u5927\u7f3a\u9677\uff0c\u9700\u8981\u672a\u6765\u7814\u7a76\u91cd\u70b9\u5173\u6ce8\u548c\u6539\u8fdb\u3002"}}
{"id": "2509.24515", "pdf": "https://arxiv.org/pdf/2509.24515", "abs": "https://arxiv.org/abs/2509.24515", "authors": ["Yu-Fu Fu", "Meng Xu", "Taesoo Kim"], "title": "Agentic Specification Generator for Move Programs", "categories": ["cs.SE", "cs.AI", "cs.CR", "cs.PL"], "comment": "18 pages; Extended version of ASE'25 paper with extra appendices", "summary": "While LLM-based specification generation is gaining traction, existing tools\nprimarily focus on mainstream programming languages like C, Java, and even\nSolidity, leaving emerging and yet verification-oriented languages like Move\nunderexplored. In this paper, we introduce MSG, an automated specification\ngeneration tool designed for Move smart contracts. MSG aims to highlight key\ninsights that uniquely present when applying LLM-based specification generation\nto a new ecosystem. Specifically, MSG demonstrates that LLMs exhibit robust\ncode comprehension and generation capabilities even for non-mainstream\nlanguages. MSG successfully generates verifiable specifications for 84% of\ntested Move functions and even identifies clauses previously overlooked by\nexperts. Additionally, MSG shows that explicitly leveraging specification\nlanguage features through an agentic, modular design improves specification\nquality substantially (generating 57% more verifiable clauses than conventional\ndesigns). Incorporating feedback from the verification toolchain further\nenhances the effectiveness of MSG, leading to a 30% increase in generated\nverifiable specifications.", "AI": {"tldr": "MSG\u662f\u4e00\u4e2a\u4e3aMove\u667a\u80fd\u5408\u7ea6\u8bbe\u8ba1\u7684\u81ea\u52a8\u5316\u89c4\u8303\u751f\u6210\u5de5\u5177\uff0c\u5c55\u793a\u4e86LLM\u5728\u975e\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\u4e2d\u7684\u5f3a\u5927\u4ee3\u7801\u7406\u89e3\u548c\u751f\u6210\u80fd\u529b\uff0c\u80fd\u591f\u4e3a84%\u7684\u6d4b\u8bd5\u51fd\u6570\u751f\u6210\u53ef\u9a8c\u8bc1\u89c4\u8303\uff0c\u5e76\u901a\u8fc7\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u9a8c\u8bc1\u5de5\u5177\u94fe\u53cd\u9988\u663e\u8457\u63d0\u5347\u89c4\u8303\u8d28\u91cf\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8eLLM\u7684\u89c4\u8303\u751f\u6210\u5de5\u5177\u4e3b\u8981\u5173\u6ce8\u4e3b\u6d41\u7f16\u7a0b\u8bed\u8a00\uff08\u5982C\u3001Java\u3001Solidity\uff09\uff0c\u800c\u5ffd\u7565\u4e86\u65b0\u5174\u4e14\u9762\u5411\u9a8c\u8bc1\u7684\u8bed\u8a00\u5982Move\u3002MSG\u65e8\u5728\u63a2\u7d22\u5c06LLM\u5e94\u7528\u4e8e\u65b0\u751f\u6001\u7cfb\u7edf\u65f6\u7684\u72ec\u7279\u89c1\u89e3\u3002", "method": "\u91c7\u7528\u57fa\u4e8e\u4ee3\u7406\u7684\u6a21\u5757\u5316\u8bbe\u8ba1\uff0c\u660e\u786e\u5229\u7528\u89c4\u8303\u8bed\u8a00\u7279\u6027\uff0c\u5e76\u6574\u5408\u9a8c\u8bc1\u5de5\u5177\u94fe\u7684\u53cd\u9988\u673a\u5236\u3002", "result": "MSG\u6210\u529f\u4e3a84%\u7684\u6d4b\u8bd5Move\u51fd\u6570\u751f\u6210\u53ef\u9a8c\u8bc1\u89c4\u8303\uff0c\u751a\u81f3\u53d1\u73b0\u4e86\u4e13\u5bb6\u5ffd\u7565\u7684\u6761\u6b3e\u3002\u6a21\u5757\u5316\u8bbe\u8ba1\u6bd4\u4f20\u7edf\u8bbe\u8ba1\u591a\u751f\u621057%\u7684\u53ef\u9a8c\u8bc1\u6761\u6b3e\uff0c\u6574\u5408\u9a8c\u8bc1\u5de5\u5177\u94fe\u53cd\u9988\u540e\u4f7f\u53ef\u9a8c\u8bc1\u89c4\u8303\u6570\u91cf\u589e\u52a030%\u3002", "conclusion": "LLM\u5728\u975e\u4e3b\u6d41\u8bed\u8a00\u4e2d\u4ecd\u8868\u73b0\u51fa\u5f3a\u5927\u7684\u4ee3\u7801\u7406\u89e3\u548c\u751f\u6210\u80fd\u529b\uff0c\u901a\u8fc7\u6a21\u5757\u5316\u8bbe\u8ba1\u548c\u9a8c\u8bc1\u5de5\u5177\u94fe\u53cd\u9988\u53ef\u4ee5\u663e\u8457\u63d0\u5347\u89c4\u8303\u751f\u6210\u8d28\u91cf\uff0c\u4e3a\u65b0\u5174\u7f16\u7a0b\u8bed\u8a00\u7684\u89c4\u8303\u751f\u6210\u63d0\u4f9b\u4e86\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
