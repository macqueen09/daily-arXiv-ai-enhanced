{"id": "2509.25196", "pdf": "https://arxiv.org/pdf/2509.25196", "abs": "https://arxiv.org/abs/2509.25196", "authors": ["Hua Zhong", "Shan Jiang", "Sarfraz Khurshid"], "title": "APRIL: API Synthesis with Automatic Prompt Optimization and Reinforcement Learning", "categories": ["cs.SE", "cs.AI", "cs.LG", "cs.PL"], "comment": null, "summary": "APIs are central to modern software development, yet composing new APIs from\nlarge libraries is difficult due to the exponential search space; traditional\ncomponent-based synthesis relies on costly exploration and hand-crafted\nspecifications. While large language models (LLMs) can generate implementations\nfrom natural language, hallucinations and limited access to up-to-date\ncontextual information often yield incorrect code. In this paper, we present\nAPRIL, an approach that combines LLM-based synthesis with Automatic Prompt\nOptimization (APO) and Reinforcement Learning from Verifiable Rewards (RLVR):\nAPO iteratively refines prompts for a frozen model, while RLVR fine-tunes the\npolicy toward functional correctness, producing an efficient synthesis\npipeline. Evaluated on 81 real-world APIs from widely used scientific Python\nlibraries and benchmarked against instruction-tuned but unfine-tuned LLMs\nguided by expert prompts, APRIL achieves substantial improvements. These\nresults indicate that integrating APO and RLVR provides a robust, scalable path\nfor component-based API synthesis in large libraries."}
{"id": "2509.25197", "pdf": "https://arxiv.org/pdf/2509.25197", "abs": "https://arxiv.org/abs/2509.25197", "authors": ["Si Cheng Zhong", "Xujie Si"], "title": "Towards Repository-Level Program Verification with Large Language Models", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": "Accepted to LMPL 2025", "summary": "Recent advancements in large language models (LLMs) suggest great promises in\ncode and proof generations. However, scaling automated formal verification to\nreal-world projects requires resolving cross-module dependencies and global\ncontexts, which are crucial challenges overlooked by existing LLM-based methods\nwith a special focus on targeting isolated, function-level verification tasks.\nTo systematically explore and address the significant challenges of verifying\nentire software repositories, we introduce RVBench, the first verification\nbenchmark explicitly designed for repository-level evaluation, constructed from\nfour diverse and complex open-source Verus projects.\n  We further introduce RagVerus, an extensible framework that synergizes\nretrieval-augmented generation with context-aware prompting to automate proof\nsynthesis for multi-module repositories. RagVerus triples proof pass rates on\nexisting benchmarks under constrained model inference budgets, and achieves a\n27% relative improvement on the more challenging RVBench benchmark,\ndemonstrating a scalable and sample-efficient verification solution."}
{"id": "2509.25248", "pdf": "https://arxiv.org/pdf/2509.25248", "abs": "https://arxiv.org/abs/2509.25248", "authors": ["Zehua Zhang", "Ati Priya Bajaj", "Divij Handa", "Siyu Liu", "Arvind S Raj", "Hongkai Chen", "Hulin Wang", "Yibo Liu", "Zion Leonahenahe Basque", "Souradip Nath", "Vishal Juneja", "Nikhil Chapre", "Yan Shoshitaishvili", "Adam Doupé", "Chitta Baral", "Ruoyu Wang"], "title": "BuildBench: Benchmarking LLM Agents on Compiling Real-World Open-Source Software", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": null, "summary": "Automatically compiling open-source software (OSS) projects is a vital,\nlabor-intensive, and complex task, which makes it a good challenge for LLM\nAgents. Existing methods rely on manually curated rules and workflows, which\ncannot adapt to OSS that requires customized configuration or environment\nsetup. Recent attempts using Large Language Models (LLMs) used selective\nevaluation on a subset of highly rated OSS, a practice that underestimates the\nrealistic challenges of OSS compilation. In practice, compilation instructions\nare often absent, dependencies are undocumented, and successful builds may even\nrequire patching source files or modifying build scripts. We propose a more\nchallenging and realistic benchmark, BUILD-BENCH, comprising OSS that are more\ndiverse in quality, scale, and characteristics. Furthermore, we propose a\nstrong baseline LLM-based agent, OSS-BUILD-AGENT, an effective system with\nenhanced build instruction retrieval module that achieves state-of-the-art\nperformance on BUILD-BENCH and is adaptable to heterogeneous OSS\ncharacteristics. We also provide detailed analysis regarding different\ncompilation method design choices and their influence to the whole task,\noffering insights to guide future advances. We believe performance on\nBUILD-BENCH can faithfully reflect an agent's ability to tackle compilation as\na complex software engineering tasks, and, as such, our benchmark will spur\ninnovation with a significant impact on downstream applications in the fields\nof software development and software security."}
{"id": "2509.25873", "pdf": "https://arxiv.org/pdf/2509.25873", "abs": "https://arxiv.org/abs/2509.25873", "authors": ["Hankun Dai", "Maoquan Wang", "Mengnan Qi", "Yikai Zhang", "Zijian Jin", "Yongqiang Yao", "Yufan Huang", "Shengyu Fu", "Elsie Nallipogu"], "title": "Lita: Light Agent Uncovers the Agentic Coding Capabilities of LLMs", "categories": ["cs.AI", "cs.CL", "cs.LG", "cs.PL", "cs.SE"], "comment": null, "summary": "Large language models (LLMs) are increasingly being applied to programming\ntasks, ranging from single-turn code completion to autonomous agents. Current\ncode agent designs frequently depend on complex, hand-crafted workflows and\ntool sets. However, this reliance on elaborate scaffolding presents several\nchallenges: agent performance becomes overly dependent on prompt tuning and\ncustom design choices, heavy human intervention obscures a model's true\nunderlying capabilities, and intricate pipelines are costly to build and\nmaintain. Furthermore, optimizing complex task prompts increases the risk of\ndata leakage. Currently, when introducing new models, LLM providers like OpenAI\nand Anthropic often publish benchmark scores to demonstrate their models'\ncoding proficiency, but keep their proprietary evaluation frameworks\nconfidential. To address these limitations, we introduce Lita (Lite Agent),\nwhich operationalizes liteness, a principle of minimizing manual design while\nretaining the essential elements of a fully autonomous agent. Lita enables a\nmore faithful and unified evaluation without elaborate scaffolding. Experiments\non the Aider Polyglot and SWE-Bench with frontier models demonstrate that Lita\nachieves competitive or superior performance compared to workflow-based and\nagentic baselines. Crucially, Lita also consumes fewer tokens and requires\nsignificantly less design effort. Our results suggest that Lita is sufficient\nto reveal the underlying coding competence of modern LLMs. Finally, we propose\nthe Agent Complexity Law: the performance gap between agents of varying\ncomplexity, from simple to sophisticated designs, will shrink as the core model\nimproves, ultimately converging to a negligible difference."}
{"id": "2509.25879", "pdf": "https://arxiv.org/pdf/2509.25879", "abs": "https://arxiv.org/abs/2509.25879", "authors": ["Michele De Pascalis", "Tarmo Uustalu", "Niccolò Veltrì"], "title": "Monoid Structures on Indexed Containers", "categories": ["cs.LO", "cs.PL"], "comment": "In Proceedings LSFA 2025, arXiv:2509.23739", "summary": "Containers represent a wide class of type constructions relevant for\nfunctional programming and (co)inductive reasoning. Indexed containers\ngeneralize this notion to better fit the scope of dependently typed\nprogramming. When interpreting types to be sets, a container describes an\nendofunctor on the category of sets while an I-indexed container describes an\nendofunctor on the category Set^I of I-indexed families of sets.\n  We consider the monoidal structure on the category of I-indexed containers\nwhose tensor product of containers describes the composition of the respective\ninduced endofunctors. We then give a combinatorial characterization of monoids\nin this monoidal category, and we show how these monoids correspond precisely\nto monads on the induced endofunctors on Set^I. Lastly, we conclude by\npresenting some examples of monads on Set^I that fall under our\ncharacterization, including the product of two monads, indexed variants of the\nstate and the writer monads and an example of a free monad. The technical\nresults of this work are accompanied by a formalization in the proof assistant\nCubical Agda."}
{"id": "2509.26616", "pdf": "https://arxiv.org/pdf/2509.26616", "abs": "https://arxiv.org/abs/2509.26616", "authors": ["Mohammad Rifat Arefin", "Shanto Rahman", "Christoph Csallner"], "title": "Black-box Context-free Grammar Inference for Readable & Natural Grammars", "categories": ["cs.SE", "cs.FL", "cs.PL", "68Q42, 68Q45 (Primary), 68T50 (Secondary)", "D.2.5; F.4.2"], "comment": "20 pages", "summary": "Black-box context-free grammar inference is crucial for program analysis,\nreverse engineering, and security, yet existing tools such as Arvada, TreeVada,\nand Kedavra struggle with scalability, readability, and accuracy on large,\ncomplex languages. We present NatGI, a novel LLM-guided grammar inference\nframework that extends TreeVada's parse tree recovery with three key\ninnovations: bracket-guided bubble exploration, LLM-driven bubble generation\nand non-terminal labeling, and hierarchical delta debugging (HDD) for\nsystematic tree simplification. Bracket-guided exploration leverages syntactic\ncues such as parentheses to propose well-structured grammar fragments, while\nLLM guidance produces meaningful non-terminal names and selects more promising\nmerges. Finally, HDD incrementally reduces unnecessary rules, which makes the\ngrammars both compact and interpretable. In our experiments, we evaluate NatGI\non a comprehensive benchmark suite ranging from small languages to larger ones\nsuch as lua, c, and mysql. Our results show that NatGI consistently outperforms\nstrong baselines in terms of F1 score. On average, NatGI achieves an F1 score\nof 0.57, which is 25pp (percentage points) higher than the best-performing\nbaseline, TreeVada. In the case of interpretability, our generated grammars\nperform significantly better than those produced by existing approaches.\nLeveraging LLM-based node renaming and bubble exploration, NatGI produces rules\nwith meaningful non-terminal names and compact structures that align more\nclosely with human intuition. As a result, developers and researchers can\nachieve higher accuracy while still being able to easily inspect, verify, and\nreason about the structure and semantics of the induced grammars."}
