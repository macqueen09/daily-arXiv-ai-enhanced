{"id": "2510.02579", "pdf": "https://arxiv.org/pdf/2510.02579", "abs": "https://arxiv.org/abs/2510.02579", "authors": ["Santiago Cu\u00e9llar", "Naomi Spargo", "Jonathan Daugherty", "David Darais"], "title": "Designing Walrus: Relational Programming with Rich Types, On-Demand Laziness, and Structured Traces", "categories": ["cs.PL"], "comment": "20 pages, miniKanren 2025", "summary": "We present Walrus, a functional relational programming language embedded in\nHaskell that extends the miniKanren model with type-polymorphic unification,\non-demand laziness, and a range of usability features aimed at practical\ndevelopment. These include use of Haskell Generics for boilerplate reduction,\nstructured debugging traces, and ergonomic support for product types. We\ndescribe the design and implementation of Walrus through the lens of our\nexperience developing bidirectional compilers, and reflect on key design\ndecisions and recurring usability challenges encountered in practice.", "AI": {"tldr": "Walrus\u662f\u4e00\u4e2a\u5d4c\u5165\u5728Haskell\u4e2d\u7684\u51fd\u6570\u5f0f\u5173\u7cfb\u7f16\u7a0b\u8bed\u8a00\uff0c\u6269\u5c55\u4e86miniKanren\u6a21\u578b\uff0c\u5177\u6709\u7c7b\u578b\u591a\u6001\u7edf\u4e00\u3001\u6309\u9700\u60f0\u6027\u548c\u5b9e\u7528\u5f00\u53d1\u529f\u80fd\u3002", "motivation": "\u4e3a\u5b9e\u9645\u5f00\u53d1\u63d0\u4f9b\u66f4\u597d\u7684\u5173\u7cfb\u7f16\u7a0b\u4f53\u9a8c\uff0c\u89e3\u51b3\u53cc\u5411\u7f16\u8bd1\u5668\u5f00\u53d1\u4e2d\u9047\u5230\u7684\u53ef\u7528\u6027\u6311\u6218\u3002", "method": "\u5728miniKanren\u57fa\u7840\u4e0a\u6dfb\u52a0\u7c7b\u578b\u591a\u6001\u7edf\u4e00\u3001\u6309\u9700\u60f0\u6027\u6c42\u503c\uff0c\u5229\u7528Haskell\u6cdb\u578b\u51cf\u5c11\u6837\u677f\u4ee3\u7801\uff0c\u63d0\u4f9b\u7ed3\u6784\u5316\u8c03\u8bd5\u8ddf\u8e2a\u548c\u4ea7\u54c1\u7c7b\u578b\u652f\u6301\u3002", "result": "\u6210\u529f\u5b9e\u73b0\u4e86\u529f\u80fd\u4e30\u5bcc\u7684\u5d4c\u5165\u5f0f\u5173\u7cfb\u7f16\u7a0b\u8bed\u8a00\uff0c\u652f\u6301\u5b9e\u9645\u5f00\u53d1\u9700\u6c42\u3002", "conclusion": "Walrus\u901a\u8fc7\u7cbe\u5fc3\u8bbe\u8ba1\u7684\u529f\u80fd\u96c6\u63d0\u5347\u4e86\u5173\u7cfb\u7f16\u7a0b\u7684\u5b9e\u7528\u6027\uff0c\u4e3a\u590d\u6742\u5e94\u7528\u5f00\u53d1\u63d0\u4f9b\u4e86\u6709\u6548\u5de5\u5177\u3002"}}
{"id": "2510.03170", "pdf": "https://arxiv.org/pdf/2510.03170", "abs": "https://arxiv.org/abs/2510.03170", "authors": ["Rafaello Sanna", "William E. Byrd", "Nada Amin"], "title": "Beyond Cons: Purely Relational Data Structures", "categories": ["cs.PL"], "comment": "17 pages, 6 figures, Source code available at\n  https://www.github.com/rvs314/faster-clpset-minikanren . To be published in\n  the 7th Workshop on miniKanren and Relational Programming (miniKanren'25)", "summary": "We present {Kanren} (read: set-Kanren), an extension to miniKanren with\nconstraints for reasoning about sets and association lists. {Kanren} includes\nfirst-class set objects, a functionally complete family of set-theoretic\nconstraints (including membership, union, and disjointedness), and new\nconstraints for reasoning about association lists with shadowing and scoped\nlookup. These additions allow programmers to describe collections declaratively\nand lazily, without relying on structural encodings and eager search over\nrepresentation spaces. The result is improved expressiveness and operational\nbehavior in programs that manipulate abstract data -- particularly interpreters\n-- by supporting set equality based on contents, enabling finite failure. We\ndescribe the design and implementation of {Kanren} in a constraint-enabled\nminiKanren system and illustrate its use in representative examples.", "AI": {"tldr": "Kanren\u662fminiKanren\u7684\u6269\u5c55\uff0c\u589e\u52a0\u4e86\u96c6\u5408\u548c\u5173\u8054\u5217\u8868\u7684\u7ea6\u675f\u63a8\u7406\u529f\u80fd\uff0c\u652f\u6301\u58f0\u660e\u5f0f\u63cf\u8ff0\u96c6\u5408\u64cd\u4f5c\uff0c\u6539\u5584\u4e86\u89e3\u91ca\u5668\u7b49\u62bd\u8c61\u6570\u636e\u64cd\u4f5c\u7a0b\u5e8f\u7684\u8868\u8fbe\u80fd\u529b\u3002", "motivation": "\u4e3a\u4e86\u89e3\u51b3\u5728miniKanren\u4e2d\u63cf\u8ff0\u96c6\u5408\u548c\u5173\u8054\u5217\u8868\u65f6\u9700\u8981\u4f9d\u8d56\u7ed3\u6784\u7f16\u7801\u548c\u6025\u5207\u641c\u7d22\u7684\u95ee\u9898\uff0c\u63d0\u4f9b\u66f4\u81ea\u7136\u7684\u96c6\u5408\u64cd\u4f5c\u652f\u6301\u3002", "method": "\u6269\u5c55miniKanren\u7cfb\u7edf\uff0c\u5f15\u5165\u4e00\u7b49\u96c6\u5408\u5bf9\u8c61\u3001\u5b8c\u6574\u7684\u96c6\u5408\u8bba\u7ea6\u675f\u5bb6\u65cf\uff08\u5305\u62ec\u6210\u5458\u5173\u7cfb\u3001\u5e76\u96c6\u3001\u4e0d\u76f8\u4ea4\u6027\uff09\u4ee5\u53ca\u652f\u6301\u906e\u853d\u548c\u4f5c\u7528\u57df\u67e5\u627e\u7684\u5173\u8054\u5217\u8868\u65b0\u7ea6\u675f\u3002", "result": "\u5b9e\u73b0\u4e86\u57fa\u4e8e\u5185\u5bb9\u7684\u96c6\u5408\u76f8\u7b49\u6027\uff0c\u652f\u6301\u6709\u9650\u5931\u8d25\uff0c\u63d0\u9ad8\u4e86\u64cd\u4f5c\u62bd\u8c61\u6570\u636e\uff08\u7279\u522b\u662f\u89e3\u91ca\u5668\uff09\u7684\u8868\u8fbe\u80fd\u529b\u548c\u8fd0\u884c\u884c\u4e3a\u3002", "conclusion": "Kanren\u901a\u8fc7\u5f15\u5165\u96c6\u5408\u548c\u5173\u8054\u5217\u8868\u7ea6\u675f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u58f0\u660e\u5f0f\u7f16\u7a0b\u5728\u5904\u7406\u62bd\u8c61\u6570\u636e\u65f6\u7684\u8868\u8fbe\u529b\u548c\u64cd\u4f5c\u6548\u7387\u3002"}}
