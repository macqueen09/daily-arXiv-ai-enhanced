{"id": "2510.05115", "pdf": "https://arxiv.org/pdf/2510.05115", "abs": "https://arxiv.org/abs/2510.05115", "authors": ["Yansen Zhang", "Qingcan Kang", "Yujie Chen", "Yufei Wang", "Xiongwei Han", "Tao Zhong", "Mingxuan Yuan", "Chen Ma"], "title": "Optimization Modeling via Semantic Anchored Alignment", "categories": ["cs.AI", "cs.CL", "cs.PL"], "comment": null, "summary": "Large language models (LLMs) have opened new paradigms in optimization\nmodeling by enabling the generation of executable solver code from natural\nlanguage descriptions. Despite this promise, existing approaches typically\nremain solver-driven: they rely on single-pass forward generation and apply\nlimited post-hoc fixes based on solver error messages, leaving undetected\nsemantic errors that silently produce syntactically correct but logically\nflawed models. To address this challenge, we propose SAC-Opt, a backward-guided\ncorrection framework that grounds optimization modeling in problem semantics\nrather than solver feedback. At each step, SAC-Opt aligns the original semantic\nanchors with those reconstructed from the generated code and selectively\ncorrects only the mismatched components, driving convergence toward a\nsemantically faithful model. This anchor-driven correction enables fine-grained\nrefinement of constraint and objective logic, enhancing both fidelity and\nrobustness without requiring additional training or supervision. Empirical\nresults on seven public datasets demonstrate that SAC-Opt improves average\nmodeling accuracy by 7.8\\%, with gains of up to 21.9\\% on the ComplexLP\ndataset. These findings highlight the importance of semantic-anchored\ncorrection in LLM-based optimization workflows to ensure faithful translation\nfrom problem intent to solver-executable code."}
{"id": "2510.05376", "pdf": "https://arxiv.org/pdf/2510.05376", "abs": "https://arxiv.org/abs/2510.05376", "authors": ["Yahya Hassanzadeh-Nazarabadi", "Sanaz Taheri-Boshrooyeh"], "title": "Constraint-Level Design of zkEVMs: Architectures, Trade-offs, and Evolution", "categories": ["cs.CR", "cs.PL"], "comment": null, "summary": "Zero-knowledge Ethereum Virtual Machines (zkEVMs) must reconcile a\nfundamental contradiction: the Ethereum Virtual Machine was designed for\ntransparent sequential execution, while zero-knowledge proofs require algebraic\ncircuit representations. This survey provides the first systematic analysis of\nhow existing major production zkEVM implementations resolve this tension\nthrough distinct constraint engineering strategies. We develop a comparative\nframework that maps the design space across three architectural dimensions.\nFirst, arithmetization schemes reveal stark trade-offs: R1CS requires\ncompositional gadget libraries, PLONKish achieves elegance through custom gates\nthat capture complex EVM opcodes in single constraints, while the homogeneous\nstructure of AIR fundamentally mismatches the irregular instruction set of EVM.\nSecond, dispatch mechanisms determine constraint activation patterns:\nselector-based systems waste trace width on inactive constraints, while\nROM-based approaches trade memory lookups for execution flexibility. Third, the\nType 1-4 spectrum quantifies an inescapable trade-off: the bit-level EVM\ncompatibility of Type 1 demands significantly higher constraint complexity than\nthe custom instruction sets of Type 4. Beyond cataloging implementations, we\nidentify critical open problems across multiple domains: performance barriers\npreventing sub-second proving, absence of formal verification for\nconstraint-to-EVM semantic equivalence, lack of standardized benchmarking\nframeworks, and architectural gaps in hybrid zkEVM/zkVM designs, decentralized\nprover coordination, privacy preservation, and interoperability."}
