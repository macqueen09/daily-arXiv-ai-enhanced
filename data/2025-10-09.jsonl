{"id": "2510.06296", "pdf": "https://arxiv.org/pdf/2510.06296", "abs": "https://arxiv.org/abs/2510.06296", "authors": ["Lingfei Zeng", "Fengdi Che", "Xuhan Huang", "Fei Ye", "Xu Xu", "Binhang Yuan", "Jie Fu"], "title": "VeriEquivBench: An Equivalence Score for Ground-Truth-Free Evaluation of Formally Verifiable Code", "categories": ["cs.PL", "cs.AI"], "comment": null, "summary": "Formal verification is the next frontier for ensuring the correctness of code\ngenerated by Large Language Models (LLMs). While methods that co-generate code\nand formal specifications in formal languages, like Dafny, can, in principle,\nprove alignment with user intent, progress is bottlenecked by specification\nquality evaluation. Current benchmarks rely on matching against ground-truth\nspecifications, a manual and expertise-intensive process that has limited\nexisting datasets to a few hundred simple problems and also suffers from a\nreliability issue. To address this, we introduce VeriEquivBench, a new\nbenchmark with $2,389$ complex algorithmic problems that probe the limitations\nof current models in both code generation and formal reasoning. Our evaluation\nframework replaces ground-truth matching with a formally grounded metric, the\nequivalence score, and rigorously verifies the quality of generated\nspecifications and code. Our results show that generating formally verifiable\ncode remains a profound challenge for state-of-the-art LLMs. This underscores\nboth the difficulty of the task and the need for benchmarks like VeriEquivBench\nto drive progress toward scalable and reliable coding agents."}
{"id": "2510.06420", "pdf": "https://arxiv.org/pdf/2510.06420", "abs": "https://arxiv.org/abs/2510.06420", "authors": ["Suresh K. Damodaran", "Paul D. Rowe"], "title": "Automated Repeatable Adversary Threat Emulation with Effects Language (EL)", "categories": ["cs.CR", "cs.PL"], "comment": null, "summary": "The emulation of multi-step attacks attributed to advanced persistent threats\nis valuable for training defenders and evaluating defense tools. In this paper,\nwe discuss the numerous challenges and desired attributes associated with such\nautomation. Additionally, we introduce the use of Effects Language (EL), a\nvisual programming language with graph-based operational semantics, as a\nsolution to address many of these challenges and requirements. We formally\ndefine the execution semantics of EL, and prove important execution properties.\nFurthermore, we showcase the application of EL to codify attacks using an\nexample from one of the publicly available attack scenarios. We also\ndemonstrate how EL can be utilized to provide proof-of-attack of complex\nmulti-step attacks. Our results highlight the improvements in time and resource\nefficiency achieved through the use of EL for repeatable automation."}
{"id": "2510.06663", "pdf": "https://arxiv.org/pdf/2510.06663", "abs": "https://arxiv.org/abs/2510.06663", "authors": ["Qiuyang Mang", "Runyuan He", "Suyang Zhong", "Xiaoxuan Liu", "Huanchen Zhang", "Alvin Cheung"], "title": "Automated Discovery of Test Oracles for Database Management Systems Using LLMs", "categories": ["cs.DB", "cs.PL", "cs.SE"], "comment": null, "summary": "Since 2020, automated testing for Database Management Systems (DBMSs) has\nflourished, uncovering hundreds of bugs in widely-used systems. A cornerstone\nof these techniques is test oracle, which typically implements a mechanism to\ngenerate equivalent query pairs, thereby identifying bugs by checking the\nconsistency between their results. However, while applying these oracles can be\nautomated, their design remains a fundamentally manual endeavor. This paper\nexplores the use of large language models (LLMs) to automate the discovery and\ninstantiation of test oracles, addressing a long-standing bottleneck towards\nfully automated DBMS testing. Although LLMs demonstrate impressive creativity,\nthey are prone to hallucinations that can produce numerous false positive bug\nreports. Furthermore, their significant monetary cost and latency mean that LLM\ninvocations should be limited to ensure that bug detection is efficient and\neconomical.\n  To this end, we introduce Argus, a novel framework built upon the core\nconcept of the Constrained Abstract Query - a SQL skeleton containing\nplaceholders and their associated instantiation conditions (e.g., requiring a\nplaceholder to be filled by a boolean column). Argus uses LLMs to generate\npairs of these skeletons that are asserted to be semantically equivalent. This\nequivalence is then formally proven using a SQL equivalence solver to ensure\nsoundness. Finally, the placeholders within the verified skeletons are\ninstantiated with concrete, reusable SQL snippets that are also synthesized by\nLLMs to efficiently produce complex test cases. We implemented Argus and\nevaluated it on five extensively tested DBMSs, discovering 40 previously\nunknown bugs, 35 of which are logic bugs, with 36 confirmed and 26 already\nfixed by the developers."}
{"id": "2510.06777", "pdf": "https://arxiv.org/pdf/2510.06777", "abs": "https://arxiv.org/abs/2510.06777", "authors": ["Maciej Pir√≥g", "Filip Sieczkowski"], "title": "Strong Dinatural Transformations and Generalised Codensity Monads", "categories": ["cs.LO", "cs.PL", "D.3.1"], "comment": "15 pages", "summary": "We introduce dicodensity monads: a generalisation of pointwise codensity\nmonads generated by functors to monads generated by mixed-variant bifunctors.\nOur construction is based on the notion of strong dinaturality (also known as\nBarr dinaturality), and is inspired by denotational models of certain types in\npolymorphic lambda calculi - in particular, a form of continuation monads with\nuniversally quantified variables, such as the Church encoding of the list monad\nin System F. Extending some previous results on Cayley-style representations,\nwe provide a set of sufficient conditions to establish an isomorphism between a\nmonad and the dicodensity monad for a given bifunctor. Then, we focus on the\nclass of monads obtained by instantiating our construction with hom-functors\nand, more generally, bifunctors given by objects of homomorphisms (that is,\ninternalised hom-sets between Eilenberg--Moore algebras). This gives us, for\nexample, novel presentations of monads generated by different kinds of\nsemirings and other theories used to model ordered nondeterministic\ncomputations."}
{"id": "2510.07051", "pdf": "https://arxiv.org/pdf/2510.07051", "abs": "https://arxiv.org/abs/2510.07051", "authors": ["Gilles Barthe", "Minbo Gao", "Jam Kabeer Ali Khan", "Matthijs Muis", "Ivan Renison", "Keiya Sakabe", "Michael Walter", "Yingte Xu", "Li Zhou"], "title": "A Duality Theorem for Classical-Quantum States with Applications to Complete Relational Program Logics", "categories": ["quant-ph", "cs.LO", "cs.PL"], "comment": "63 pages, 11 figures, 4 tables", "summary": "Duality theorems play a fundamental role in convex optimization. Recently, it\nwas shown how duality theorems for countable probability distributions and\nfinite-dimensional quantum states can be leveraged for building relatively\ncomplete relational program logics for probabilistic and quantum programs,\nrespectively. However, complete relational logics for classical-quantum\nprograms, which combine classical and quantum computations and operate over\nclassical as well as quantum variables, have remained out of reach. The main\ngap is that while prior duality theorems could readily be derived using optimal\ntransport and semidefinite programming methods, respectively, the combined\nsetting falls out of the scope of these methods and requires new ideas. In this\npaper, we overcome this gap and establish the desired duality theorem for\nclassical-quantum states. Our argument relies critically on a novel\ndimension-independent analysis of the convex optimization problem underlying\nthe finite-dimensional quantum setting, which, in particular, allows us to take\nthe limit where the classical state space becomes infinite. Using the resulting\nduality theorem, we establish soundness and completeness of a new relational\nprogram logic, called $\\mathsf{cqOTL}$, for classical-quantum programs. In\naddition, we lift prior restrictions on the completeness of two existing\nprogram logics: $\\mathsf{eRHL}$ for probabilistic programs (Avanzini et al.,\nPOPL 2025) and $\\mathsf{qOTL}$ for quantum programs (Barthe et al., LICS 2025)."}
