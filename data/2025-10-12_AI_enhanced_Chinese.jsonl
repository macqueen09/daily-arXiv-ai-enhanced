{"id": "2510.07582", "pdf": "https://arxiv.org/pdf/2510.07582", "abs": "https://arxiv.org/abs/2510.07582", "authors": ["Yuyan Bao", "Tiark Rompf"], "title": "Type, Ability, and Effect Systems: Perspectives on Purity, Semantics, and Expressiveness", "categories": ["cs.PL"], "comment": null, "summary": "Programming benefits from a clear separation between pure, mathematical\ncomputation and impure, effectful interaction with the world. Existing\napproaches to enforce this separation include monads, type-and-effect systems,\nand capability systems. All share a tension between precision and usability,\nand each one has non-obvious strengths and weaknesses.\n  This paper aims to raise the bar in assessing such systems. First, we propose\na semantic definition of purity, inspired by contextual equivalence, as a\nbaseline independent of any specific typing discipline. Second, we propose that\nexpressiveness should be measured by the degree of completeness, i.e., how many\nsemantically pure terms can be typed as pure. Using this measure, we focus on\nminimal meaningful effect and capability systems and show that they are\nincomparable, i.e., neither subsumes the other in terms of expressiveness.\n  Based on this result, we propose a synthesis and show that type, ability, and\neffect systems combine their respective strengths while avoiding their\nweaknesses. As part of our formal model, we provide a logical relation to\nfacilitate proofs of purity and other properties for a variety of effect typing\ndisciplines.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u8bc4\u4f30\u7f16\u7a0b\u8bed\u8a00\u7eaf\u5ea6\u7cfb\u7edf\u7684\u8bed\u4e49\u57fa\u51c6\uff0c\u6bd4\u8f83\u4e86\u4e0d\u540c\u7c7b\u578b\u7cfb\u7edf\u7684\u8868\u8fbe\u80fd\u529b\uff0c\u5e76\u5c55\u793a\u4e86\u7c7b\u578b\u3001\u80fd\u529b\u548c\u6548\u679c\u7cfb\u7edf\u7684\u7ec4\u5408\u4f18\u52bf\u3002", "motivation": "\u73b0\u6709\u5f3a\u5236\u7eaf\u5ea6\u548c\u6548\u679c\u5206\u79bb\u7684\u65b9\u6cd5\uff08\u5982\u5355\u5b50\u3001\u7c7b\u578b\u6548\u679c\u7cfb\u7edf\u3001\u80fd\u529b\u7cfb\u7edf\uff09\u5728\u7cbe\u5ea6\u548c\u53ef\u7528\u6027\u4e4b\u95f4\u5b58\u5728\u5f20\u529b\uff0c\u5404\u6709\u4f18\u7f3a\u70b9\uff0c\u9700\u8981\u66f4\u597d\u7684\u8bc4\u4f30\u6807\u51c6\u3002", "method": "1. \u57fa\u4e8e\u4e0a\u4e0b\u6587\u7b49\u4ef7\u6027\u63d0\u51fa\u7eaf\u5ea6\u7684\u8bed\u4e49\u5b9a\u4e49\uff1b2. \u7528\u5b8c\u6574\u6027\u7a0b\u5ea6\u8861\u91cf\u8868\u8fbe\u80fd\u529b\uff1b3. \u6bd4\u8f83\u6700\u5c0f\u6709\u610f\u4e49\u7684\u6548\u679c\u548c\u80fd\u529b\u7cfb\u7edf\uff1b4. \u63d0\u51fa\u7c7b\u578b\u3001\u80fd\u529b\u548c\u6548\u679c\u7cfb\u7edf\u7684\u7efc\u5408\u65b9\u6848\u3002", "result": "\u53d1\u73b0\u6700\u5c0f\u6709\u610f\u4e49\u7684\u6548\u679c\u7cfb\u7edf\u548c\u80fd\u529b\u7cfb\u7edf\u5728\u8868\u8fbe\u80fd\u529b\u4e0a\u662f\u4e0d\u53ef\u6bd4\u8f83\u7684\uff0c\u5373\u4e24\u8005\u4e92\u4e0d\u5305\u542b\uff1b\u63d0\u51fa\u7684\u7efc\u5408\u7cfb\u7edf\u80fd\u7ed3\u5408\u5404\u81ea\u4f18\u52bf\u5e76\u907f\u514d\u5f31\u70b9\u3002", "conclusion": "\u901a\u8fc7\u8bed\u4e49\u57fa\u51c6\u548c\u8868\u8fbe\u80fd\u529b\u6d4b\u91cf\uff0c\u8bc1\u660e\u4e86\u4e0d\u540c\u7c7b\u578b\u7cfb\u7edf\u7684\u4e92\u8865\u6027\uff0c\u63d0\u51fa\u7684\u7efc\u5408\u65b9\u6cd5\u4e3a\u6548\u679c\u7c7b\u578b\u7cfb\u7edf\u63d0\u4f9b\u4e86\u66f4\u597d\u7684\u7406\u8bba\u57fa\u7840\u548c\u8bc1\u660e\u5de5\u5177\u3002"}}
{"id": "2510.07851", "pdf": "https://arxiv.org/pdf/2510.07851", "abs": "https://arxiv.org/abs/2510.07851", "authors": ["Willem Heijltjes"], "title": "The Functional Machine Calculus III: Control", "categories": ["cs.PL", "cs.LO"], "comment": null, "summary": "The Functional Machine Calculus (Heijltjes 2022) is a new approach to\nunifying the imperative and functional programming paradigms. It extends the\nlambda-calculus, preserving the key features of confluent reduction and typed\ntermination, to embed computational effects, evaluation strategies, and control\nflow operations. The first instalment modelled sequential higher-order\ncomputation with global store, input/output, probabilities, and\nnon-determinism, and embedded both the call-by-name and call-by-value\nlambda-calculus, as well as Moggi's computational metalanguage and Levy's\ncall-by-push-value. The present paper extends the calculus from sequential to\nbranching and looping control flow. This allows the faithful embedding of a\nminimal but complete imperative language, including conditionals, exception\nhandling, and iteration, as well as constants and algebraic data types.\n  The calculus is defined through a simple operational semantics, extending the\n(simplified) Krivine machine for the lambda-calculus with multiple operand\nstacks to model effects and a continuation stack to model sequential,\nbranching, and looping computation. It features a confluent reduction relation\nand a system of simple types that guarantees termination of the machine and\nstrong normalization of reduction (in the absence of iteration). These\nproperties carry over to the embedded imperative language, providing a unified\nfunctional-imperative model of computation that supports simple types, a direct\nand intuitive operational semantics, and a confluent reduction semantics.", "AI": {"tldr": "Functional Machine Calculus\u4ece\u987a\u5e8f\u8ba1\u7b97\u6269\u5c55\u5230\u5206\u652f\u548c\u5faa\u73af\u63a7\u5236\u6d41\uff0c\u80fd\u591f\u5fe0\u5b9e\u5d4c\u5165\u5305\u542b\u6761\u4ef6\u3001\u5f02\u5e38\u5904\u7406\u3001\u8fed\u4ee3\u7b49\u7684\u6700\u5c0f\u4f46\u5b8c\u6574\u7684\u547d\u4ee4\u5f0f\u8bed\u8a00\uff0c\u540c\u65f6\u4fdd\u6301\u6c47\u5408\u5f52\u7ea6\u548c\u7c7b\u578b\u7ec8\u6b62\u7b49\u5173\u952e\u7279\u6027\u3002", "motivation": "\u7edf\u4e00\u51fd\u6570\u5f0f\u548c\u547d\u4ee4\u5f0f\u7f16\u7a0b\u8303\u5f0f\uff0c\u5728\u4fdd\u6301lambda\u6f14\u7b97\u6838\u5fc3\u7279\u6027\u7684\u57fa\u7840\u4e0a\u5d4c\u5165\u8ba1\u7b97\u6548\u5e94\u3001\u6c42\u503c\u7b56\u7565\u548c\u63a7\u5236\u6d41\u64cd\u4f5c\uff0c\u4ece\u987a\u5e8f\u8ba1\u7b97\u6269\u5c55\u5230\u5206\u652f\u5faa\u73af\u63a7\u5236\u6d41\u3002", "method": "\u901a\u8fc7\u6269\u5c55\u7b80\u5316\u7684Krivine\u673a\u5668\uff0c\u4f7f\u7528\u591a\u4e2a\u64cd\u4f5c\u6570\u6808\u5efa\u6a21\u6548\u5e94\uff0c\u4f7f\u7528\u5ef6\u7eed\u6808\u5efa\u6a21\u987a\u5e8f\u3001\u5206\u652f\u548c\u5faa\u73af\u8ba1\u7b97\uff0c\u5b9a\u4e49\u7b80\u5355\u7684\u64cd\u4f5c\u8bed\u4e49\u3002", "result": "\u5b9e\u73b0\u4e86\u6c47\u5408\u5f52\u7ea6\u5173\u7cfb\u548c\u7b80\u5355\u7c7b\u578b\u7cfb\u7edf\uff0c\u4fdd\u8bc1\u673a\u5668\u7ec8\u6b62\u548c\u5f3a\u89c4\u8303\u5316\uff08\u65e0\u8fed\u4ee3\u65f6\uff09\uff0c\u8fd9\u4e9b\u7279\u6027\u53ef\u4f20\u9012\u5230\u5d4c\u5165\u7684\u547d\u4ee4\u5f0f\u8bed\u8a00\u4e2d\u3002", "conclusion": "\u63d0\u4f9b\u4e86\u4e00\u4e2a\u652f\u6301\u7b80\u5355\u7c7b\u578b\u3001\u76f4\u89c2\u64cd\u4f5c\u8bed\u4e49\u548c\u6c47\u5408\u5f52\u7ea6\u8bed\u4e49\u7684\u7edf\u4e00\u51fd\u6570\u5f0f-\u547d\u4ee4\u5f0f\u8ba1\u7b97\u6a21\u578b\u3002"}}
