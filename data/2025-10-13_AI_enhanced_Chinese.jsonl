{"id": "2510.08726", "pdf": "https://arxiv.org/pdf/2510.08726", "abs": "https://arxiv.org/abs/2510.08726", "authors": ["Yifan Zhao", "Egan Johnson", "Prasanth Chatarasi", "Vikram Adve", "Sasa Misailovic"], "title": "Neptune: Advanced ML Operator Fusion for Locality and Parallelism on GPUs", "categories": ["cs.PL", "cs.LG"], "comment": null, "summary": "Operator fusion has become a key optimization for deep learning, which\ncombines multiple deep learning operators to improve data reuse and reduce\nglobal memory transfers. However, existing tensor compilers struggle to fuse\ncomplex reduction computations involving loop-carried dependencies, such as\nattention mechanisms.\n  The paper introduces Neptune, a tensor compiler for advanced operator fusion\nfor sequences of reduction operators. Neptune presents a new approach for\nadvanced operator fusion, which intentionally breaks some existing dependencies\nand compensates by constructing algebraic correction expressions that allow the\nkernel to produce the correct result.\n  On ten attention-based benchmarks, Neptune, starting from simple attention\ncode and a high-level scheduling template, outperforms existing compilers like\nTriton, TVM, and FlexAttention, including Triton-based implementations of\nFlashAttention. Across four different GPU architectures from NVIDIA and AMD,\nNeptune-generated kernels have average speedup of $1.35\\times$ over the next\nbest alternative, demonstrating its effectiveness for deep learning workloads.", "AI": {"tldr": "Neptune\u662f\u4e00\u4e2a\u5f20\u91cf\u7f16\u8bd1\u5668\uff0c\u901a\u8fc7\u6253\u7834\u5faa\u73af\u4f9d\u8d56\u5e76\u6784\u5efa\u4ee3\u6570\u6821\u6b63\u8868\u8fbe\u5f0f\u6765\u5b9e\u73b0\u590d\u6742\u5f52\u7ea6\u7b97\u5b50\uff08\u5982\u6ce8\u610f\u529b\u673a\u5236\uff09\u7684\u9ad8\u7ea7\u878d\u5408\uff0c\u5728\u591a\u79cdGPU\u67b6\u6784\u4e0a\u5e73\u5747\u63d0\u901f1.35\u500d\u3002", "motivation": "\u73b0\u6709\u5f20\u91cf\u7f16\u8bd1\u5668\u96be\u4ee5\u878d\u5408\u6d89\u53ca\u5faa\u73af\u4f9d\u8d56\u7684\u590d\u6742\u5f52\u7ea6\u8ba1\u7b97\uff0c\u5982\u6ce8\u610f\u529b\u673a\u5236\uff0c\u8fd9\u9650\u5236\u4e86\u6df1\u5ea6\u5b66\u4e60\u7b97\u5b50\u7684\u4f18\u5316\u6548\u679c\u3002", "method": "Neptune\u91c7\u7528\u65b0\u7684\u9ad8\u7ea7\u7b97\u5b50\u878d\u5408\u65b9\u6cd5\uff0c\u6545\u610f\u6253\u7834\u67d0\u4e9b\u73b0\u6709\u4f9d\u8d56\u5173\u7cfb\uff0c\u5e76\u901a\u8fc7\u6784\u5efa\u4ee3\u6570\u6821\u6b63\u8868\u8fbe\u5f0f\u6765\u786e\u4fdd\u5185\u6838\u4ea7\u751f\u6b63\u786e\u7ed3\u679c\u3002", "result": "\u572810\u4e2a\u6ce8\u610f\u529b\u57fa\u51c6\u6d4b\u8bd5\u4e2d\uff0cNeptune\u4ece\u7b80\u5355\u6ce8\u610f\u529b\u4ee3\u7801\u548c\u9ad8\u7ea7\u8c03\u5ea6\u6a21\u677f\u51fa\u53d1\uff0c\u5728NVIDIA\u548cAMD\u76844\u79cdGPU\u67b6\u6784\u4e0a\u5e73\u5747\u6bd4\u6700\u4f73\u66ff\u4ee3\u65b9\u6848\u5feb1.35\u500d\u3002", "conclusion": "Neptune\u8bc1\u660e\u4e86\u5176\u9ad8\u7ea7\u7b97\u5b50\u878d\u5408\u65b9\u6cd5\u5bf9\u6df1\u5ea6\u5b66\u4e60\u5de5\u4f5c\u8d1f\u8f7d\u7684\u6709\u6548\u6027\uff0c\u7279\u522b\u662f\u5728\u5904\u7406\u590d\u6742\u5f52\u7ea6\u8ba1\u7b97\u65b9\u9762\u4f18\u4e8e\u73b0\u6709\u7f16\u8bd1\u5668\u3002"}}
{"id": "2510.08889", "pdf": "https://arxiv.org/pdf/2510.08889", "abs": "https://arxiv.org/abs/2510.08889", "authors": ["Songlin Jia", "Craig Liu", "Siyuan He", "Haotian Deng", "Yuyan Bao", "Tiark Rompf"], "title": "Typestate via Revocable Capabilities", "categories": ["cs.PL"], "comment": null, "summary": "Managing stateful resources safely and expressively is a longstanding\nchallenge in programming languages, especially in the presence of aliasing.\nWhile scope-based constructs such as Java's synchronized blocks offer ease of\nreasoning, they restrict expressiveness and parallelism. Conversely,\nimperative, flow-sensitive management enables fine-grained control but demands\nsophisticated typestate analyses and often burdens programmers with explicit\nstate tracking.\n  In this work, we present a novel approach that unifies the strengths of both\nparadigms by extending flow-insensitive capability mechanisms into\nflow-sensitive typestate tracking. Our system decouples capability lifetimes\nfrom lexical scopes, allowing functions to provide, revoke, and return\ncapabilities in a flow-sensitive manner, based on the existing mechanisms\nexplored for the safety and ergonomics of scoped capability programming.\n  We implement our approach as an extension to the Scala 3 compiler, leveraging\npath-dependent types and implicit resolution to enable concise, statically\nsafe, and expressive typestate programming. Our prototype generically supports\na wide range of stateful patterns, including file operations, advanced locking\nprotocols, DOM construction, and session types. This work demonstrates that\nexpressive and safe typestate management can be achieved with minimal\nextensions to existing capability-based languages, paving the way for more\nrobust and ergonomic stateful programming.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u7edf\u4e00\u8303\u56f4\u57fa\u548c\u6d41\u654f\u611f\u72b6\u6001\u7ba1\u7406\u7684\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06\u6d41\u4e0d\u654f\u611f\u7684\u80fd\u529b\u673a\u5236\u6269\u5c55\u5230\u6d41\u654f\u611f\u7684\u7c7b\u578b\u72b6\u6001\u8ddf\u8e2a\uff0c\u5728Scala 3\u4e2d\u5b9e\u73b0\u8868\u8fbe\u6027\u5f3a\u4e14\u5b89\u5168\u7684\u72b6\u6001\u7ba1\u7406\u3002", "motivation": "\u89e3\u51b3\u72b6\u6001\u8d44\u6e90\u7ba1\u7406\u4e2d\u7684\u5b89\u5168\u6027\u548c\u8868\u8fbe\u6027\u6311\u6218\uff0c\u5e73\u8861\u8303\u56f4\u57fa\u6784\u9020\u7684\u6613\u63a8\u7406\u6027\u548c\u6d41\u654f\u611f\u7ba1\u7406\u7684\u7ec6\u7c92\u5ea6\u63a7\u5236\uff0c\u907f\u514d\u590d\u6742\u7684\u7c7b\u578b\u72b6\u6001\u5206\u6790\u548c\u663e\u5f0f\u72b6\u6001\u8ddf\u8e2a\u8d1f\u62c5\u3002", "method": "\u6269\u5c55\u6d41\u4e0d\u654f\u611f\u80fd\u529b\u673a\u5236\u5230\u6d41\u654f\u611f\u7c7b\u578b\u72b6\u6001\u8ddf\u8e2a\uff0c\u5c06\u80fd\u529b\u751f\u547d\u5468\u671f\u4e0e\u8bcd\u6cd5\u8303\u56f4\u89e3\u8026\uff0c\u5141\u8bb8\u51fd\u6570\u4ee5\u6d41\u654f\u611f\u65b9\u5f0f\u63d0\u4f9b\u3001\u64a4\u9500\u548c\u8fd4\u56de\u80fd\u529b\uff0c\u57fa\u4e8eScala 3\u7684\u8def\u5f84\u4f9d\u8d56\u7c7b\u578b\u548c\u9690\u5f0f\u89e3\u6790\u5b9e\u73b0\u3002", "result": "\u5f00\u53d1\u4e86Scala 3\u7f16\u8bd1\u5668\u6269\u5c55\u539f\u578b\uff0c\u652f\u6301\u6587\u4ef6\u64cd\u4f5c\u3001\u9ad8\u7ea7\u9501\u5b9a\u534f\u8bae\u3001DOM\u6784\u5efa\u548c\u4f1a\u8bdd\u7c7b\u578b\u7b49\u591a\u79cd\u72b6\u6001\u6a21\u5f0f\uff0c\u5b9e\u73b0\u4e86\u7b80\u6d01\u3001\u9759\u6001\u5b89\u5168\u4e14\u8868\u8fbe\u6027\u5f3a\u7684\u7c7b\u578b\u72b6\u6001\u7f16\u7a0b\u3002", "conclusion": "\u8bc1\u660e\u901a\u8fc7\u6700\u5c0f\u5316\u6269\u5c55\u73b0\u6709\u57fa\u4e8e\u80fd\u529b\u7684\u8bed\u8a00\uff0c\u53ef\u4ee5\u5b9e\u73b0\u8868\u8fbe\u6027\u5f3a\u4e14\u5b89\u5168\u7684\u72b6\u6001\u7ba1\u7406\uff0c\u4e3a\u66f4\u5065\u58ee\u548c\u7b26\u5408\u4eba\u4f53\u5de5\u7a0b\u5b66\u7684\u72b6\u6001\u7f16\u7a0b\u94fa\u5e73\u9053\u8def\u3002"}}
{"id": "2510.08939", "pdf": "https://arxiv.org/pdf/2510.08939", "abs": "https://arxiv.org/abs/2510.08939", "authors": ["Haotian Deng", "Siyuan He", "Songlin Jia", "Yuyan Bao", "Tiark Rompf"], "title": "Free to Move: Reachability Types with Flow-Sensitive Effects for Safe Deallocation and Ownership Transfer", "categories": ["cs.PL"], "comment": null, "summary": "We present a flow-sensitive effect system for reachability types that\nsupports explicit memory management, including Rust-style move semantics, in\nhigher-order impure functional languages. Our system refines the existing\nreachability qualifier with polymorphic \\emph{use} and \\emph{kill} effects that\nrecord how references are read, written, transferred, and deallocated. The\neffect discipline tracks operations performed on each resource using\nqualifiers, enabling the type system to express ownership transfer, contextual\nfreshness, and destructive updates without regions or linearity. We formalize\nthe calculus, its typing and effect rules, and a compositional operational\nsemantics that validates use-after-free safety. All metatheoretic results,\nincluding preservation, progress, and effect soundness, are mechanized. The\nsystem models idioms such as reference deallocation, move semantics, reference\nswapping, while exposing precise safety guarantee. Together, these\ncontributions integrate reachability-based reasoning with explicit resource\ncontrol, advancing the state of the art in safe manual memory management for\nhigher-order functional languages.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u4e2a\u57fa\u4e8e\u53ef\u8fbe\u6027\u7c7b\u578b\u7684\u6d41\u654f\u611f\u6548\u5e94\u7cfb\u7edf\uff0c\u652f\u6301\u9ad8\u9636\u4e0d\u7eaf\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u7684\u663e\u5f0f\u5185\u5b58\u7ba1\u7406\uff0c\u5305\u62ecRust\u98ce\u683c\u7684\u79fb\u52a8\u8bed\u4e49\u3002", "motivation": "\u5c06\u57fa\u4e8e\u53ef\u8fbe\u6027\u7684\u63a8\u7406\u4e0e\u663e\u5f0f\u8d44\u6e90\u63a7\u5236\u76f8\u7ed3\u5408\uff0c\u63a8\u8fdb\u9ad8\u9636\u51fd\u6570\u5f0f\u8bed\u8a00\u4e2d\u5b89\u5168\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u7684\u6280\u672f\u6c34\u5e73\u3002", "method": "\u4f7f\u7528\u591a\u6001\u7684use\u548ckill\u6548\u5e94\u6765\u8bb0\u5f55\u5f15\u7528\u5982\u4f55\u88ab\u8bfb\u53d6\u3001\u5199\u5165\u3001\u8f6c\u79fb\u548c\u91ca\u653e\uff0c\u901a\u8fc7\u9650\u5b9a\u7b26\u8ddf\u8e2a\u6bcf\u4e2a\u8d44\u6e90\u7684\u64cd\u4f5c\uff0c\u65e0\u9700\u533a\u57df\u6216\u7ebf\u6027\u6027\u3002", "result": "\u7cfb\u7edf\u80fd\u591f\u8868\u8fbe\u6240\u6709\u6743\u8f6c\u79fb\u3001\u4e0a\u4e0b\u6587\u65b0\u9c9c\u5ea6\u548c\u7834\u574f\u6027\u66f4\u65b0\uff0c\u9a8c\u8bc1\u4e86\u91ca\u653e\u540e\u4f7f\u7528\u5b89\u5168\u6027\uff0c\u6240\u6709\u5143\u7406\u8bba\u7ed3\u679c\u90fd\u5df2\u673a\u68b0\u5316\u8bc1\u660e\u3002", "conclusion": "\u8be5\u8d21\u732e\u6574\u5408\u4e86\u53ef\u8fbe\u6027\u63a8\u7406\u4e0e\u663e\u5f0f\u8d44\u6e90\u63a7\u5236\uff0c\u4e3a\u9ad8\u9636\u51fd\u6570\u5f0f\u8bed\u8a00\u7684\u5b89\u5168\u624b\u52a8\u5185\u5b58\u7ba1\u7406\u63d0\u4f9b\u4e86\u5148\u8fdb\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.08969", "pdf": "https://arxiv.org/pdf/2510.08969", "abs": "https://arxiv.org/abs/2510.08969", "authors": ["Bjarne Stroustrup"], "title": "Concept-Based Generic Programming in C++", "categories": ["cs.PL", "cs.SE"], "comment": null, "summary": "We present programming techniques to illustrate the facilities and principles\nof C++ generic programming using concepts. Concepts are C++'s way to express\nconstraints on generic code. As an initial example, we provide a simple type\nsystem that eliminates narrowing conversions and provides range checking\nwithout unnecessary notational or run-time overheads. Concepts are used\nthroughout to provide user-defined extensions to the type system. The aim is to\nshow their utility and the fundamental ideas behind them, rather than to\nprovide a detailed or complete explanation of C++'s language support for\ngeneric programming or the extensive support provided by the standard library.\nGeneric programming is an integral part of C++, rather than an isolated\nsub-language. In particular, key facilities support general programming as well\nas generic programming (e.g., uniform notation for types, lambdas, variadic\ntemplates, and C++26 static reflection). Finally, we give design rationales and\norigins for key parts of the concept design, including use patterns, the\nrelationship to Object-Oriented Programming, value arguments, notation, concept\ntype-matching, and definition checking.", "AI": {"tldr": "\u4ecb\u7ecdC++\u6982\u5ff5\u7f16\u7a0b\u6280\u672f\uff0c\u5c55\u793a\u5982\u4f55\u901a\u8fc7\u6982\u5ff5\u7ea6\u675f\u6cdb\u578b\u4ee3\u7801\uff0c\u63d0\u4f9b\u7c7b\u578b\u5b89\u5168\u4e14\u9ad8\u6548\u7684\u7f16\u7a0b\u65b9\u6cd5", "motivation": "\u5c55\u793aC++\u6982\u5ff5\u7f16\u7a0b\u7684\u5b9e\u7528\u6027\u548c\u57fa\u672c\u539f\u7406\uff0c\u8bf4\u660e\u6982\u5ff5\u5982\u4f55\u4f5c\u4e3aC++\u6cdb\u578b\u7f16\u7a0b\u7684\u6838\u5fc3\u673a\u5236\uff0c\u63d0\u4f9b\u7c7b\u578b\u7cfb\u7edf\u6269\u5c55\u548c\u7ea6\u675f\u8868\u8fbe", "method": "\u4f7f\u7528\u6982\u5ff5\u7f16\u7a0b\u6280\u672f\uff0c\u6784\u5efa\u7b80\u5355\u7c7b\u578b\u7cfb\u7edf\u6765\u6d88\u9664\u7a84\u5316\u8f6c\u6362\u5e76\u63d0\u4f9b\u8303\u56f4\u68c0\u67e5\uff0c\u901a\u8fc7\u7528\u6237\u5b9a\u4e49\u7684\u6982\u5ff5\u6269\u5c55\u7c7b\u578b\u7cfb\u7edf", "result": "\u5b9e\u73b0\u4e86\u65e0\u989d\u5916\u7b26\u53f7\u6216\u8fd0\u884c\u65f6\u5f00\u9500\u7684\u7c7b\u578b\u5b89\u5168\u7f16\u7a0b\uff0c\u5c55\u793a\u4e86\u6982\u5ff5\u5728C++\u6cdb\u578b\u7f16\u7a0b\u4e2d\u7684\u5b9e\u7528\u4ef7\u503c", "conclusion": "\u6982\u5ff5\u662fC++\u6cdb\u578b\u7f16\u7a0b\u7684\u96c6\u6210\u90e8\u5206\uff0c\u652f\u6301\u901a\u7528\u7f16\u7a0b\u548c\u6cdb\u578b\u7f16\u7a0b\u7684\u7edf\u4e00\u8868\u793a\uff0c\u63d0\u4f9b\u4e86\u5f3a\u5927\u7684\u7c7b\u578b\u7ea6\u675f\u548c\u6269\u5c55\u80fd\u529b"}}
{"id": "2510.09591", "pdf": "https://arxiv.org/pdf/2510.09591", "abs": "https://arxiv.org/abs/2510.09591", "authors": ["Saad Ahmed Bazaz", "Mirza Omer Beg"], "title": "A Multilingual Python Programming Language", "categories": ["cs.PL"], "comment": "For project homepage, see https://universalpython.github.io/", "summary": "All widely used and useful programming languages have a common problem. They\nrestrict entry on the basis of knowledge of the English language. The lack of\nknowledge of English poses a major hurdle to many newcomers who do not have the\nresources, in terms of time and money, to learn the English language. Studies\nshow that people learn better in their own language. Therefore, we propose a\nlanguage transpiler built on top of the Python programming language, called\nUniversalPython, which allows one to write Python in their own human language.\nWe demonstrate the ability to create an \"Urdu Python\" with this transpiler. In\nthe future, we aim to scale the language to encapsulate more human languages to\nincrease the availability of programming. The source code for this transpiler\nis open-source, and available at\nhttps://github.com/universalpython/universalpython", "AI": {"tldr": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u540d\u4e3aUniversalPython\u7684\u8bed\u8a00\u8f6c\u8bd1\u5668\uff0c\u5141\u8bb8\u7528\u6237\u7528\u81ea\u5df1\u7684\u4eba\u7c7b\u8bed\u8a00\u7f16\u5199Python\u4ee3\u7801\uff0c\u89e3\u51b3\u4e86\u7f16\u7a0b\u8bed\u8a00\u5bf9\u82f1\u8bed\u77e5\u8bc6\u7684\u4f9d\u8d56\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u7f16\u7a0b\u8bed\u8a00\u90fd\u8981\u6c42\u82f1\u8bed\u77e5\u8bc6\uff0c\u8fd9\u5bf9\u8bb8\u591a\u6ca1\u6709\u65f6\u95f4\u548c\u91d1\u94b1\u5b66\u4e60\u82f1\u8bed\u7684\u65b0\u624b\u6784\u6210\u4e86\u4e3b\u8981\u969c\u788d\u3002\u7814\u7a76\u8868\u660e\u4eba\u4eec\u7528\u6bcd\u8bed\u5b66\u4e60\u6548\u679c\u66f4\u597d\u3002", "method": "\u5728Python\u7f16\u7a0b\u8bed\u8a00\u4e4b\u4e0a\u6784\u5efa\u8bed\u8a00\u8f6c\u8bd1\u5668\uff0c\u80fd\u591f\u5c06\u5176\u4ed6\u4eba\u7c7b\u8bed\u8a00\u7f16\u5199\u7684\u4ee3\u7801\u8f6c\u6362\u4e3aPython\u4ee3\u7801\uff0c\u5e76\u4ee5\u4e4c\u5c14\u90fd\u8bedPython\u4e3a\u4f8b\u8fdb\u884c\u6f14\u793a\u3002", "result": "\u6210\u529f\u521b\u5efa\u4e86\"\u4e4c\u5c14\u90fd\u8bedPython\"\uff0c\u8bc1\u660e\u4e86\u8be5\u8f6c\u8bd1\u5668\u7684\u53ef\u884c\u6027\u3002\u8f6c\u8bd1\u5668\u6e90\u4ee3\u7801\u5df2\u5f00\u6e90\u3002", "conclusion": "\u8be5\u8f6c\u8bd1\u5668\u6709\u6f5c\u529b\u6269\u5c55\u5230\u66f4\u591a\u4eba\u7c7b\u8bed\u8a00\uff0c\u4ece\u800c\u589e\u52a0\u7f16\u7a0b\u7684\u53ef\u53ca\u6027\uff0c\u964d\u4f4e\u5b66\u4e60\u95e8\u69db\u3002"}}
{"id": "2510.08609", "pdf": "https://arxiv.org/pdf/2510.08609", "abs": "https://arxiv.org/abs/2510.08609", "authors": ["Imranur Rahman", "Jill Marley", "William Enck", "Laurie Williams"], "title": "Which Is Better For Reducing Outdated and Vulnerable Dependencies: Pinning or Floating?", "categories": ["cs.SE", "cs.CR", "cs.LG", "cs.PL"], "comment": "Accepted to ASE 2025", "summary": "Developers consistently use version constraints to specify acceptable\nversions of the dependencies for their project. \\emph{Pinning} dependencies can\nreduce the likelihood of breaking changes, but comes with a cost of manually\nmanaging the replacement of outdated and vulnerable dependencies. On the other\nhand, \\emph{floating} can be used to automatically get bug fixes and security\nfixes, but comes with the risk of breaking changes. Security practitioners\nadvocate \\emph{pinning} dependencies to prevent against software supply chain\nattacks, e.g., malicious package updates. However, since \\emph{pinning} is the\ntightest version constraint, \\emph{pinning} is the most likely to result in\noutdated dependencies. Nevertheless, how the likelihood of becoming outdated or\nvulnerable dependencies changes across version constraint types is unknown. The\ngoal of this study is to aid developers in making an informed dependency\nversion constraint choice by empirically evaluating the likelihood of\ndependencies becoming outdated or vulnerable across version constraint types at\nscale. In this study, we first identify the trends in dependency version\nconstraint usage and the patterns of version constraint type changes made by\ndevelopers in the npm, PyPI, and Cargo ecosystems. We then modeled the\ndependency state transitions using survival analysis and estimated how the\nlikelihood of becoming outdated or vulnerable changes when using \\emph{pinning}\nas opposed to the rest of the version constraint types. We observe that among\noutdated and vulnerable dependencies, the most commonly used version constraint\ntype is \\emph{floating-minor}, with \\emph{pinning} being the next most common.\nWe also find that \\emph{floating-major} is the least likely to result in\noutdated and \\emph{floating-minor} is the least likely to result in vulnerable\ndependencies.", "AI": {"tldr": "\u672c\u7814\u7a76\u901a\u8fc7\u5b9e\u8bc1\u5206\u6790\u8bc4\u4f30\u4e86\u4e0d\u540c\u7248\u672c\u7ea6\u675f\u7c7b\u578b\uff08\u56fa\u5b9a\u7248\u672c\u4e0e\u6d6e\u52a8\u7248\u672c\uff09\u5bf9\u4f9d\u8d56\u5305\u8fc7\u65f6\u548c\u6613\u53d7\u653b\u51fb\u53ef\u80fd\u6027\u7684\u5f71\u54cd\uff0c\u53d1\u73b0\u5728npm\u3001PyPI\u548cCargo\u751f\u6001\u7cfb\u7edf\u4e2d\uff0c\u6d6e\u52a8\u6b21\u8981\u7248\u672c\u662f\u6700\u5e38\u89c1\u7684\u7ea6\u675f\u7c7b\u578b\uff0c\u800c\u6d6e\u52a8\u4e3b\u8981\u7248\u672c\u6700\u4e0d\u5bb9\u6613\u5bfc\u81f4\u4f9d\u8d56\u8fc7\u65f6\uff0c\u6d6e\u52a8\u6b21\u8981\u7248\u672c\u6700\u4e0d\u5bb9\u6613\u5bfc\u81f4\u6613\u53d7\u653b\u51fb\u4f9d\u8d56\u3002", "motivation": "\u5f00\u53d1\u8005\u5728\u4f9d\u8d56\u7ba1\u7406\u65f6\u9700\u8981\u5728\u56fa\u5b9a\u7248\u672c\uff08\u9632\u6b62\u7834\u574f\u6027\u53d8\u66f4\u4f46\u9700\u624b\u52a8\u7ba1\u7406\uff09\u548c\u6d6e\u52a8\u7248\u672c\uff08\u81ea\u52a8\u83b7\u53d6\u4fee\u590d\u4f46\u5b58\u5728\u98ce\u9669\uff09\u4e4b\u95f4\u6743\u8861\u3002\u5b89\u5168\u5b9e\u8df5\u8005\u63a8\u8350\u56fa\u5b9a\u7248\u672c\u4ee5\u9632\u6b62\u4f9b\u5e94\u94fe\u653b\u51fb\uff0c\u4f46\u8fd9\u53ef\u80fd\u5bfc\u81f4\u4f9d\u8d56\u8fc7\u65f6\u3002\u76ee\u524d\u7f3a\u4e4f\u5173\u4e8e\u4e0d\u540c\u7248\u672c\u7ea6\u675f\u7c7b\u578b\u5bf9\u4f9d\u8d56\u72b6\u6001\u5f71\u54cd\u7684\u5b9e\u8bc1\u7814\u7a76\u3002", "method": "\u9996\u5148\u8bc6\u522bnpm\u3001PyPI\u548cCargo\u751f\u6001\u7cfb\u7edf\u4e2d\u4f9d\u8d56\u7248\u672c\u7ea6\u675f\u7684\u4f7f\u7528\u8d8b\u52bf\u548c\u53d8\u66f4\u6a21\u5f0f\uff0c\u7136\u540e\u4f7f\u7528\u751f\u5b58\u5206\u6790\u5bf9\u4f9d\u8d56\u72b6\u6001\u8f6c\u6362\u8fdb\u884c\u5efa\u6a21\uff0c\u8bc4\u4f30\u56fa\u5b9a\u7248\u672c\u4e0e\u5176\u4ed6\u7ea6\u675f\u7c7b\u578b\u76f8\u6bd4\u5bfc\u81f4\u4f9d\u8d56\u8fc7\u65f6\u6216\u6613\u53d7\u653b\u51fb\u7684\u53ef\u80fd\u6027\u3002", "result": "\u5728\u8fc7\u65f6\u548c\u6613\u53d7\u653b\u51fb\u7684\u4f9d\u8d56\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u7248\u672c\u7ea6\u675f\u7c7b\u578b\u662f\u6d6e\u52a8\u6b21\u8981\u7248\u672c\uff0c\u56fa\u5b9a\u7248\u672c\u6b21\u4e4b\u3002\u6d6e\u52a8\u4e3b\u8981\u7248\u672c\u6700\u4e0d\u5bb9\u6613\u5bfc\u81f4\u4f9d\u8d56\u8fc7\u65f6\uff0c\u6d6e\u52a8\u6b21\u8981\u7248\u672c\u6700\u4e0d\u5bb9\u6613\u5bfc\u81f4\u6613\u53d7\u653b\u51fb\u4f9d\u8d56\u3002", "conclusion": "\u7814\u7a76\u7ed3\u679c\u4e3a\u5f00\u53d1\u8005\u9009\u62e9\u4f9d\u8d56\u7248\u672c\u7ea6\u675f\u63d0\u4f9b\u4e86\u5b9e\u8bc1\u4f9d\u636e\uff0c\u5e2e\u52a9\u4ed6\u4eec\u5728\u5b89\u5168\u6027\u548c\u66f4\u65b0\u4fbf\u5229\u6027\u4e4b\u95f4\u505a\u51fa\u66f4\u660e\u667a\u7684\u6743\u8861\u3002"}}
{"id": "2510.09037", "pdf": "https://arxiv.org/pdf/2510.09037", "abs": "https://arxiv.org/abs/2510.09037", "authors": ["Sicheol Sung", "Joonghyuk Hahn", "Yo-Sub Han"], "title": "Repairing Regex Vulnerabilities via Localization-Guided Instructions", "categories": ["cs.AI", "cs.PL", "68T50", "I.2.7"], "comment": "14 pages, 4 figures, 4 tables", "summary": "Regular expressions (regexes) are foundational to modern computing for\ncritical tasks like input validation and data parsing, yet their ubiquity\nexposes systems to regular expression denial of service (ReDoS), a\nvulnerability requiring automated repair methods. Current approaches, however,\nare hampered by a trade-off. Symbolic, rule-based system are precise but fails\nto repair unseen or complex vulnerability patterns. Conversely, large language\nmodels (LLMs) possess the necessary generalizability but are unreliable for\ntasks demanding strict syntactic and semantic correctness. We resolve this\nimpasse by introducing a hybrid framework, localized regex repair (LRR),\ndesigned to harness LLM generalization while enforcing reliability. Our core\ninsight is to decouple problem identification from the repair process. First, a\ndeterministic, symbolic module localizes the precise vulnerable subpattern,\ncreating a constrained and tractable problem space. Then, the LLM invoked to\ngenerate a semantically equivalent fix for this isolated segment. This combined\narchitecture successfully resolves complex repair cases intractable for\nrule-based repair while avoiding the semantic errors of LLM-only approaches.\nOur work provides a validated methodology for solving such problems in\nautomated repair, improving the repair rate by 15.4%p over the\nstate-of-the-art. Our code is available at https://github.com/cdltlehf/LRR.", "AI": {"tldr": "\u63d0\u51fa\u4e86LRR\u6df7\u5408\u6846\u67b6\uff0c\u7ed3\u5408\u7b26\u53f7\u5206\u6790\u548cLLM\u6765\u4fee\u590d\u6b63\u5219\u8868\u8fbe\u5f0fReDoS\u6f0f\u6d1e\uff0c\u89e3\u51b3\u4e86\u73b0\u6709\u65b9\u6cd5\u5728\u7cbe\u5ea6\u548c\u6cdb\u5316\u6027\u4e4b\u95f4\u7684\u6743\u8861\u95ee\u9898", "motivation": "\u6b63\u5219\u8868\u8fbe\u5f0f\u5728\u73b0\u4ee3\u8ba1\u7b97\u4e2d\u5e7f\u6cdb\u5e94\u7528\uff0c\u4f46\u5b58\u5728ReDoS\u6f0f\u6d1e\u3002\u73b0\u6709\u4fee\u590d\u65b9\u6cd5\u9762\u4e34\u4e24\u96be\uff1a\u7b26\u53f7\u65b9\u6cd5\u7cbe\u786e\u4f46\u65e0\u6cd5\u5904\u7406\u590d\u6742\u6a21\u5f0f\uff0cLLM\u6cdb\u5316\u6027\u5f3a\u4f46\u53ef\u9760\u6027\u4e0d\u8db3", "method": "LRR\u6df7\u5408\u6846\u67b6\uff1a\u9996\u5148\u7528\u786e\u5b9a\u6027\u7b26\u53f7\u6a21\u5757\u5b9a\u4f4d\u6613\u53d7\u653b\u51fb\u7684\u5b50\u6a21\u5f0f\uff0c\u7136\u540e\u8c03\u7528LLM\u4e3a\u9694\u79bb\u7247\u6bb5\u751f\u6210\u8bed\u4e49\u7b49\u6548\u7684\u4fee\u590d", "result": "\u6210\u529f\u89e3\u51b3\u4e86\u89c4\u5219\u4fee\u590d\u65e0\u6cd5\u5904\u7406\u7684\u590d\u6742\u6848\u4f8b\uff0c\u907f\u514d\u4e86\u7eafLLM\u65b9\u6cd5\u7684\u8bed\u4e49\u9519\u8bef\uff0c\u4fee\u590d\u7387\u6bd4\u6700\u5148\u8fdb\u65b9\u6cd5\u63d0\u9ad8\u4e8615.4%", "conclusion": "LRR\u63d0\u4f9b\u4e86\u4e00\u79cd\u7ecf\u8fc7\u9a8c\u8bc1\u7684\u81ea\u52a8\u5316\u4fee\u590d\u65b9\u6cd5\u5b66\uff0c\u6709\u6548\u7ed3\u5408\u4e86\u7b26\u53f7\u5206\u6790\u7684\u53ef\u9760\u6027\u548cLLM\u7684\u6cdb\u5316\u80fd\u529b"}}
{"id": "2510.09073", "pdf": "https://arxiv.org/pdf/2510.09073", "abs": "https://arxiv.org/abs/2510.09073", "authors": ["Matthew Sotoudeh"], "title": "Literate Tracing", "categories": ["cs.SE", "cs.PL"], "comment": "examples at https://lair.masot.net/trex . SPLASH Onward 2025", "summary": "As computer systems grow ever larger and more complex, a crucial task in\nsoftware development is for one person (the system expert) to communicate to\nanother (the system novice) how a certain program works. This paper reports on\nthe author's experiences with a paradigm for program documentation that we call\nliterate tracing. A literate trace explains a software system using annotated,\nconcrete execution traces of the system. Literate traces complement both\nin-code comments (which often lack global context) and out-of-band design docs\n(which often lack a concrete connection to the code). We also describe TReX,\nour tool for making literate traces that are interactive, visual, and\nguaranteed by construction to be faithful to the program semantics. We have\nused TReX to write literate traces explaining components of large systems\nsoftware including the Linux kernel, Git source control system, and GCC\ncompiler.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u79f0\u4e3a\"\u6587\u5b66\u5316\u8ffd\u8e2a\"\u7684\u7a0b\u5e8f\u6587\u6863\u8303\u5f0f\uff0c\u901a\u8fc7\u5e26\u6ce8\u91ca\u7684\u5177\u4f53\u6267\u884c\u8ffd\u8e2a\u6765\u89e3\u91ca\u8f6f\u4ef6\u7cfb\u7edf\uff0c\u5e76\u5f00\u53d1\u4e86TReX\u5de5\u5177\u6765\u521b\u5efa\u4ea4\u4e92\u5f0f\u3001\u53ef\u89c6\u5316\u4e14\u8bed\u4e49\u4fdd\u771f\u7684\u6587\u5b66\u5316\u8ffd\u8e2a\u3002", "motivation": "\u968f\u7740\u8ba1\u7b97\u673a\u7cfb\u7edf\u53d8\u5f97\u66f4\u5927\u66f4\u590d\u6742\uff0c\u7cfb\u7edf\u4e13\u5bb6\u9700\u8981\u5411\u65b0\u624b\u89e3\u91ca\u7a0b\u5e8f\u5de5\u4f5c\u539f\u7406\u3002\u73b0\u6709\u4ee3\u7801\u6ce8\u91ca\u7f3a\u4e4f\u5168\u5c40\u4e0a\u4e0b\u6587\uff0c\u8bbe\u8ba1\u6587\u6863\u53c8\u7f3a\u4e4f\u4e0e\u4ee3\u7801\u7684\u5177\u4f53\u8fde\u63a5\uff0c\u56e0\u6b64\u9700\u8981\u4e00\u79cd\u66f4\u597d\u7684\u6587\u6863\u65b9\u6cd5\u3002", "method": "\u91c7\u7528\u6587\u5b66\u5316\u8ffd\u8e2a\u8303\u5f0f\uff0c\u901a\u8fc7\u5e26\u6ce8\u91ca\u7684\u5177\u4f53\u6267\u884c\u8ffd\u8e2a\u6765\u89e3\u91ca\u8f6f\u4ef6\u7cfb\u7edf\u3002\u5f00\u53d1\u4e86TReX\u5de5\u5177\uff0c\u80fd\u591f\u521b\u5efa\u4ea4\u4e92\u5f0f\u3001\u53ef\u89c6\u5316\u4e14\u4fdd\u8bc1\u4e0e\u7a0b\u5e8f\u8bed\u4e49\u4e00\u81f4\u7684\u8ffd\u8e2a\u6587\u6863\u3002", "result": "\u4f7f\u7528TReX\u5de5\u5177\u6210\u529f\u4e3a\u5927\u578b\u7cfb\u7edf\u8f6f\u4ef6\uff08\u5305\u62ecLinux\u5185\u6838\u3001Git\u6e90\u4ee3\u7801\u63a7\u5236\u7cfb\u7edf\u548cGCC\u7f16\u8bd1\u5668\uff09\u7684\u7ec4\u4ef6\u7f16\u5199\u4e86\u6587\u5b66\u5316\u8ffd\u8e2a\u6587\u6863\u3002", "conclusion": "\u6587\u5b66\u5316\u8ffd\u8e2a\u662f\u4e00\u79cd\u6709\u6548\u7684\u7a0b\u5e8f\u6587\u6863\u65b9\u6cd5\uff0c\u80fd\u591f\u5f25\u8865\u4ee3\u7801\u6ce8\u91ca\u548c\u8bbe\u8ba1\u6587\u6863\u7684\u4e0d\u8db3\uff0c\u901a\u8fc7\u5177\u4f53\u7684\u6267\u884c\u8ffd\u8e2a\u63d0\u4f9b\u66f4\u76f4\u89c2\u7684\u7cfb\u7edf\u7406\u89e3\u3002"}}
