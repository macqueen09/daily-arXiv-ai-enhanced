{"id": "2510.09726", "pdf": "https://arxiv.org/pdf/2510.09726", "abs": "https://arxiv.org/abs/2510.09726", "authors": ["Tilman Hinnerichs", "Reuben Gardos Reid", "Jaap de Jong", "Bart Swinkels", "Pamela Wochner", "Nicolae Filat", "Tudor Magurescu", "Issa Hanou", "Sebastijan Dumancic"], "title": "Herb.jl: A Unifying Program Synthesis Library", "categories": ["cs.PL", "cs.AI", "cs.SE"], "comment": null, "summary": "Program synthesis -- the automatic generation of code given a specification\n-- is one of the most fundamental tasks in artificial intelligence (AI) and\nmany programmers' dream. Numerous synthesizers have been developed to tackle\nprogram synthesis, manifesting different ideas to approach the exponentially\ngrowing program space. While numerous smart program synthesis tools exist,\nreusing and remixing previously developed methods is tedious and\ntime-consuming. We propose Herb.jl, a unifying program synthesis library\nwritten in the Julia programming language, to address these issues. Since\ncurrent methods rely on similar building blocks, we aim to modularize the\nunderlying synthesis algorithm into communicating and fully extendable\nsub-compartments, allowing for straightforward reapplication of these modules.\nTo demonstrate the benefits of using Herb.jl, we show three common use cases:\n1. how to implement a simple problem and grammar, and how to solve it, 2. how\nto implement a previously developed synthesizer with just a few lines of code,\nand 3. how to run a synthesizer against a benchmark.", "AI": {"tldr": "Herb.jl\u662f\u4e00\u4e2a\u7528Julia\u7f16\u7a0b\u8bed\u8a00\u7f16\u5199\u7684\u7edf\u4e00\u7a0b\u5e8f\u5408\u6210\u5e93\uff0c\u65e8\u5728\u6a21\u5757\u5316\u5408\u6210\u7b97\u6cd5\uff0c\u4fbf\u4e8e\u91cd\u7528\u548c\u6269\u5c55\u73b0\u6709\u65b9\u6cd5\u3002", "motivation": "\u73b0\u6709\u7684\u7a0b\u5e8f\u5408\u6210\u5de5\u5177\u867d\u7136\u4f17\u591a\uff0c\u4f46\u91cd\u7528\u548c\u6df7\u5408\u5148\u524d\u5f00\u53d1\u7684\u65b9\u6cd5\u65e2\u7e41\u7410\u53c8\u8017\u65f6\u3002\u9700\u8981\u4e00\u79cd\u7edf\u4e00\u7684\u65b9\u6cd5\u6765\u7b80\u5316\u5408\u6210\u7b97\u6cd5\u7684\u91cd\u7528\u548c\u6269\u5c55\u3002", "method": "\u5c06\u5e95\u5c42\u5408\u6210\u7b97\u6cd5\u6a21\u5757\u5316\u4e3a\u53ef\u901a\u4fe1\u548c\u5b8c\u5168\u53ef\u6269\u5c55\u7684\u5b50\u7ec4\u4ef6\uff0c\u5141\u8bb8\u76f4\u63a5\u91cd\u7528\u8fd9\u4e9b\u6a21\u5757\u3002\u5728Julia\u4e2d\u5b9e\u73b0\u7edf\u4e00\u7684\u7a0b\u5e8f\u5408\u6210\u5e93Herb.jl\u3002", "result": "\u5c55\u793a\u4e86\u4e09\u4e2a\u5e38\u89c1\u7528\u4f8b\uff1a\u5b9e\u73b0\u7b80\u5355\u95ee\u9898\u548c\u8bed\u6cd5\u5e76\u6c42\u89e3\uff1b\u7528\u51e0\u884c\u4ee3\u7801\u5b9e\u73b0\u5148\u524d\u5f00\u53d1\u7684\u5408\u6210\u5668\uff1b\u5728\u57fa\u51c6\u6d4b\u8bd5\u4e0a\u8fd0\u884c\u5408\u6210\u5668\u3002", "conclusion": "Herb.jl\u63d0\u4f9b\u4e86\u4e00\u4e2a\u6709\u6548\u7684\u7edf\u4e00\u6846\u67b6\uff0c\u7b80\u5316\u4e86\u7a0b\u5e8f\u5408\u6210\u65b9\u6cd5\u7684\u91cd\u7528\u548c\u6269\u5c55\uff0c\u63d0\u9ad8\u4e86\u5f00\u53d1\u6548\u7387\u3002"}}
{"id": "2510.09932", "pdf": "https://arxiv.org/pdf/2510.09932", "abs": "https://arxiv.org/abs/2510.09932", "authors": ["Devansh Jain", "Akash Pardeshi", "Marco Frigo", "Krut Patel", "Kaustubh Khulbe", "Jai Arora", "Charith Mendis"], "title": "ACT: Automatically Generating Compiler Backends from Tensor Accelerator ISA Descriptions", "categories": ["cs.PL", "cs.AR"], "comment": null, "summary": "Tensor compilers play a key role in enabling high-performance implementations\nof deep learning workloads. These compilers rely on existing CPU and GPU code\ngeneration backends to generate device-specific code. Recently, many tensor\naccelerators (neural processing units) have been proposed to further accelerate\nthese workloads. Compared to commodity hardware, however, most of the proposed\ntensor accelerators do not have compiler backends with code generation support.\nMoreover, the accelerator designs are subject to fast iteration cycles, making\nit difficult to manually develop compiler backends similar to commodity\nhardware platforms. Therefore, to increase adoption and enable faster software\ndevelopment cycles for novel tensor accelerator designs, we need to make the\ncompiler backend construction process more agile.\n  To address this gap, we introduce ACT, a compiler backend generator that\nautomatically generates compiler backends for tensor accelerators, given just\nthe instruction set architecture (ISA) descriptions. We first formally specify\nthe compiler backend generation problem that introduces a novel specification\nfor describing tensor accelerator ISAs. Next, we design ACT such that it\nsupports user-programmable memories and complex parameterized instructions that\nare prevalent in tensor accelerators. ACT uses a novel parameterized equality\nsaturation-based instruction selection phase and a constraint programming-based\nmemory allocation phase. We prove that compiler backends generated by ACT are\nsound and complete. Finally, we generate compiler backends for three\naccelerator platforms from industry and academia, and show that they match or\noutperform code written using hand-optimized kernel libraries while maintaining\nlow compilation overheads.", "AI": {"tldr": "ACT\u662f\u4e00\u4e2a\u81ea\u52a8\u751f\u6210\u5f20\u91cf\u52a0\u901f\u5668\u7f16\u8bd1\u5668\u540e\u7aef\u7684\u5de5\u5177\uff0c\u53ea\u9700\u8f93\u5165\u6307\u4ee4\u96c6\u67b6\u6784\u63cf\u8ff0\u5373\u53ef\u751f\u6210\u9ad8\u6027\u80fd\u7684\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u89e3\u51b3\u4e86\u65b0\u578b\u5f20\u91cf\u52a0\u901f\u5668\u7f3a\u4e4f\u7f16\u8bd1\u5668\u652f\u6301\u7684\u95ee\u9898\u3002", "motivation": "\u73b0\u6709\u7684\u5f20\u91cf\u52a0\u901f\u5668\u7f3a\u4e4f\u7f16\u8bd1\u5668\u540e\u7aef\u652f\u6301\uff0c\u4e14\u786c\u4ef6\u8bbe\u8ba1\u8fed\u4ee3\u5feb\u901f\uff0c\u624b\u52a8\u5f00\u53d1\u7f16\u8bd1\u5668\u540e\u7aef\u6210\u672c\u9ad8\u3001\u5468\u671f\u957f\uff0c\u963b\u788d\u4e86\u65b0\u578b\u52a0\u901f\u5668\u7684\u91c7\u7528\u548c\u8f6f\u4ef6\u5f00\u53d1\u3002", "method": "ACT\u901a\u8fc7\u5f62\u5f0f\u5316\u5b9a\u4e49\u7f16\u8bd1\u5668\u540e\u7aef\u751f\u6210\u95ee\u9898\uff0c\u652f\u6301\u7528\u6237\u53ef\u7f16\u7a0b\u5185\u5b58\u548c\u590d\u6742\u53c2\u6570\u5316\u6307\u4ee4\uff0c\u91c7\u7528\u53c2\u6570\u5316\u7b49\u5f0f\u9971\u548c\u7684\u6307\u4ee4\u9009\u62e9\u65b9\u6cd5\u548c\u57fa\u4e8e\u7ea6\u675f\u89c4\u5212\u7684\u5185\u5b58\u5206\u914d\u7b56\u7565\u3002", "result": "\u4e3a\u4e09\u4e2a\u5de5\u4e1a\u548c\u5b66\u672f\u754c\u7684\u52a0\u901f\u5668\u5e73\u53f0\u751f\u6210\u4e86\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u6027\u80fd\u8fbe\u5230\u6216\u8d85\u8fc7\u624b\u52a8\u4f18\u5316\u7684\u5185\u6838\u5e93\u4ee3\u7801\uff0c\u540c\u65f6\u4fdd\u6301\u8f83\u4f4e\u7684\u7f16\u8bd1\u5f00\u9500\u3002", "conclusion": "ACT\u80fd\u591f\u81ea\u52a8\u751f\u6210\u6b63\u786e\u4e14\u5b8c\u6574\u7684\u7f16\u8bd1\u5668\u540e\u7aef\uff0c\u663e\u8457\u964d\u4f4e\u4e86\u4e3a\u65b0\u578b\u5f20\u91cf\u52a0\u901f\u5668\u5f00\u53d1\u7f16\u8bd1\u5668\u8f6f\u4ef6\u7684\u6210\u672c\u548c\u5468\u671f\u3002"}}
{"id": "2510.10015", "pdf": "https://arxiv.org/pdf/2510.10015", "abs": "https://arxiv.org/abs/2510.10015", "authors": ["Jinhua Wu", "Yuting Wang", "Liukun Yu", "Linglong Meng"], "title": "End-to-end Compositional Verification of Program Safety through Verified and Verifying Compilation", "categories": ["cs.PL"], "comment": null, "summary": "Program safety (i.e., absence of undefined behaviors) is critical for correct\noperation of computer systems. It is usually verified at the source level\n(e.g., by separation logics) and preserved to the target by verified compilers\n(e.g., CompCert), thereby achieving end-to-end verification of safety. However,\nmodern safe programming languages like Rust pose new problems in achieving\nend-to-end safety. Because not all functionalities can be implemented in the\nsafe language, mixing safe and unsafe modules is needed. Therefore, verified\ncompilation must preserve a modular notion of safety which can be composed at\nthe target level. Furthermore, certain classes of errors (e.g., memory errors)\nare automatically excluded by verifying compilation (e.g., borrow checking) for\nmodules written in safe languages. As a result, verified compilation needs to\ncooperate with verifying compilation to ensure end-to-end safety.\n  To address the above problems, we propose a modular and generic definition of\nsafety called open safety based on program semantics described as open labeled\ntransition systems (LTS). Open safety is composable at the boundary of modules\nand can be modularly preserved by verified compositional compilation. Those\nproperties enable separate verification of safety for heterogeneous modules and\ncomposition of the safety results at the target level. Open safety can be\ngeneralized to partial safety (i.e., only a certain class of errors can occur).\nBy this we formalized the correctness of verifying compilation as derivation of\ntotal safety from partial safety. We demonstrate how our framework can combine\nverified and verifying compilation by developing a verified compiler for an\nownership language (called Owlang) inspired by Rust. We evaluate our approach\non the compositional safety verification using a hash map implemented by Owlang\nand C.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u57fa\u4e8e\u5f00\u653e\u6807\u8bb0\u8f6c\u79fb\u7cfb\u7edf\u7684\u6a21\u5757\u5316\u5b89\u5168\u5b9a\u4e49\uff08\u5f00\u653e\u5b89\u5168\uff09\uff0c\u652f\u6301\u5f02\u6784\u6a21\u5757\u7684\u5b89\u5168\u9a8c\u8bc1\u548c\u7ec4\u5408\uff0c\u5e76\u901a\u8fc7\u6240\u6709\u6743\u8bed\u8a00\u7f16\u8bd1\u5668\u9a8c\u8bc1\u4e86\u8be5\u6846\u67b6\u3002", "motivation": "\u73b0\u4ee3\u5b89\u5168\u7f16\u7a0b\u8bed\u8a00\uff08\u5982Rust\uff09\u9700\u8981\u6df7\u5408\u5b89\u5168\u548c\u4e0d\u5b89\u5168\u6a21\u5757\uff0c\u4f20\u7edf\u7aef\u5230\u7aef\u5b89\u5168\u9a8c\u8bc1\u65b9\u6cd5\u65e0\u6cd5\u5904\u7406\u6a21\u5757\u5316\u573a\u666f\uff0c\u9700\u8981\u65b0\u7684\u6a21\u5757\u5316\u5b89\u5168\u5b9a\u4e49\u548c\u7ec4\u5408\u65b9\u6cd5\u3002", "method": "\u57fa\u4e8e\u5f00\u653e\u6807\u8bb0\u8f6c\u79fb\u7cfb\u7edf\u5b9a\u4e49\u5f00\u653e\u5b89\u5168\u6982\u5ff5\uff0c\u652f\u6301\u6a21\u5757\u8fb9\u754c\u7ec4\u5408\uff0c\u5e76\u901a\u8fc7\u6240\u6709\u6743\u8bed\u8a00Owlang\u7684\u9a8c\u8bc1\u7f16\u8bd1\u5668\u8fdb\u884c\u5b9e\u8bc1\u3002", "result": "\u5f00\u53d1\u4e86\u6a21\u5757\u5316\u5b89\u5168\u9a8c\u8bc1\u6846\u67b6\uff0c\u80fd\u591f\u7ec4\u5408\u5f02\u6784\u6a21\u5757\uff08\u5982Owlang\u548cC\uff09\u7684\u5b89\u5168\u7ed3\u679c\uff0c\u5b9e\u73b0\u4e86\u9a8c\u8bc1\u7f16\u8bd1\u548c\u9a8c\u8bc1\u7f16\u8bd1\u7684\u534f\u540c\u5de5\u4f5c\u3002", "conclusion": "\u5f00\u653e\u5b89\u5168\u4e3a\u5f02\u6784\u6a21\u5757\u7684\u5b89\u5168\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u7406\u8bba\u57fa\u7840\uff0c\u652f\u6301\u6a21\u5757\u5316\u9a8c\u8bc1\u548c\u7ec4\u5408\uff0c\u662f\u73b0\u4ee3\u5b89\u5168\u7f16\u7a0b\u8bed\u8a00\u7aef\u5230\u7aef\u5b89\u5168\u9a8c\u8bc1\u7684\u6709\u6548\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.10209", "pdf": "https://arxiv.org/pdf/2510.10209", "abs": "https://arxiv.org/abs/2510.10209", "authors": ["Massinissa Merouani", "Afif Boudaoud", "Riyadh Baghdadi"], "title": "LOOPerSet: A Large-Scale Dataset for Data-Driven Polyhedral Compiler Optimization", "categories": ["cs.PL", "cs.LG", "cs.PF"], "comment": null, "summary": "The advancement of machine learning for compiler optimization, particularly\nwithin the polyhedral model, is constrained by the scarcity of large-scale,\npublic performance datasets. This data bottleneck forces researchers to\nundertake costly data generation campaigns, slowing down innovation and\nhindering reproducible research learned code optimization. To address this gap,\nwe introduce LOOPerSet, a new public dataset containing 28 million labeled data\npoints derived from 220,000 unique, synthetically generated polyhedral\nprograms. Each data point maps a program and a complex sequence of\nsemantics-preserving transformations (such as fusion, skewing, tiling, and\nparallelism)to a ground truth performance measurement (execution time). The\nscale and diversity of LOOPerSet make it a valuable resource for training and\nevaluating learned cost models, benchmarking new model architectures, and\nexploring the frontiers of automated polyhedral scheduling. The dataset is\nreleased under a permissive license to foster reproducible research and lower\nthe barrier to entry for data-driven compiler optimization.", "AI": {"tldr": "LOOPerSet\u662f\u4e00\u4e2a\u5305\u542b2800\u4e07\u4e2a\u6807\u8bb0\u6570\u636e\u70b9\u7684\u5927\u89c4\u6a21\u516c\u5171\u6570\u636e\u96c6\uff0c\u7528\u4e8e\u673a\u5668\u5b66\u4e60\u9a71\u52a8\u7684\u7f16\u8bd1\u5668\u4f18\u5316\u7814\u7a76\uff0c\u7279\u522b\u662f\u591a\u9762\u4f53\u6a21\u578b\u4e2d\u7684\u6027\u80fd\u9884\u6d4b\u3002", "motivation": "\u5f53\u524d\u673a\u5668\u5b66\u4e60\u5728\u7f16\u8bd1\u5668\u4f18\u5316\u4e2d\u7684\u5e94\u7528\u53d7\u5230\u5927\u89c4\u6a21\u516c\u5171\u6027\u80fd\u6570\u636e\u96c6\u7a00\u7f3a\u7684\u9650\u5236\uff0c\u7814\u7a76\u4eba\u5458\u9700\u8981\u8fdb\u884c\u6602\u8d35\u7684\u6570\u636e\u751f\u6210\u6d3b\u52a8\uff0c\u8fd9\u51cf\u7f13\u4e86\u521b\u65b0\u901f\u5ea6\u5e76\u963b\u788d\u4e86\u53ef\u91cd\u590d\u7814\u7a76\u3002", "method": "\u4ece22\u4e07\u4e2a\u72ec\u7279\u7684\u5408\u6210\u751f\u6210\u7684\u591a\u9762\u4f53\u7a0b\u5e8f\u4e2d\u63d0\u53d6\u6570\u636e\u70b9\uff0c\u6bcf\u4e2a\u6570\u636e\u70b9\u5c06\u7a0b\u5e8f\u53ca\u5176\u8bed\u4e49\u4fdd\u6301\u8f6c\u6362\u5e8f\u5217\uff08\u5982\u878d\u5408\u3001\u503e\u659c\u3001\u5206\u5757\u548c\u5e76\u884c\u5316\uff09\u6620\u5c04\u5230\u771f\u5b9e\u6027\u80fd\u6d4b\u91cf\uff08\u6267\u884c\u65f6\u95f4\uff09\u3002", "result": "\u521b\u5efa\u4e86\u4e00\u4e2a\u5305\u542b2800\u4e07\u4e2a\u6807\u8bb0\u6570\u636e\u70b9\u7684\u5927\u89c4\u6a21\u591a\u6837\u5316\u6570\u636e\u96c6\uff0c\u4e3a\u8bad\u7ec3\u548c\u8bc4\u4f30\u5b66\u4e60\u6210\u672c\u6a21\u578b\u3001\u57fa\u51c6\u6d4b\u8bd5\u65b0\u6a21\u578b\u67b6\u6784\u4ee5\u53ca\u63a2\u7d22\u81ea\u52a8\u5316\u591a\u9762\u4f53\u8c03\u5ea6\u524d\u6cbf\u63d0\u4f9b\u4e86\u5b9d\u8d35\u8d44\u6e90\u3002", "conclusion": "LOOPerSet\u901a\u8fc7\u63d0\u4f9b\u5927\u89c4\u6a21\u516c\u5171\u6570\u636e\u96c6\uff0c\u964d\u4f4e\u4e86\u6570\u636e\u9a71\u52a8\u7f16\u8bd1\u5668\u4f18\u5316\u7684\u5165\u95e8\u95e8\u69db\uff0c\u4fc3\u8fdb\u4e86\u53ef\u91cd\u590d\u7814\u7a76\uff0c\u63a8\u52a8\u4e86\u591a\u9762\u4f53\u6a21\u578b\u4e2d\u7684\u673a\u5668\u5b66\u4e60\u4f18\u5316\u53d1\u5c55\u3002"}}
{"id": "2510.10216", "pdf": "https://arxiv.org/pdf/2510.10216", "abs": "https://arxiv.org/abs/2510.10216", "authors": ["Zhechong Huang", "Zhao Zhang", "Ruyi Ji", "Tingxuan Xia", "Qihao Zhu", "Qinxiang Cao", "Zeyu Sun", "Yingfei Xiong"], "title": "Learning to Guarantee Type Correctness in Code Generation through Type-Guided Program Synthesis", "categories": ["cs.PL", "cs.AI", "cs.SE"], "comment": null, "summary": "Language models have shown remarkable proficiency in code generation;\nnevertheless, ensuring type correctness remains a challenge. Although\ntraditional methods, such as constrained decoding, alleviate this problem by\nexternally rejecting untypable code, the model itself does not effectively\nlearn type reasoning internally, which ultimately limits its overall\nperformance. This paper introduces TyFlow, a novel system that internalizes\ntype reasoning within code generation to guide the model to learn the type\nsystem. The core of our approach is a novel type-guided program synthesis\nsystem that maintains an isomorphism between type derivation trees and\nsynthesis derivation trees, enabling a new code representation based on\nsynthesis decision sequences rather than traditional text-based token\nsequences. By offloading the complexity of type system learning to the\nrepresentation itself, models can redirect their computational resources toward\nhigher-level program semantics. Our evaluation shows that TyFlow not only\neliminates type errors but also significantly improves functional correctness,\nhighlighting the importance of aligning LMs with type systems internally.", "AI": {"tldr": "TyFlow\u662f\u4e00\u4e2a\u5c06\u7c7b\u578b\u63a8\u7406\u5185\u5316\u5230\u4ee3\u7801\u751f\u6210\u4e2d\u7684\u65b0\u7cfb\u7edf\uff0c\u901a\u8fc7\u7c7b\u578b\u5f15\u5bfc\u7684\u7a0b\u5e8f\u5408\u6210\u65b9\u6cd5\uff0c\u5728\u7c7b\u578b\u63a8\u5bfc\u6811\u548c\u5408\u6210\u63a8\u5bfc\u6811\u4e4b\u95f4\u4fdd\u6301\u540c\u6784\u5173\u7cfb\uff0c\u4ece\u800c\u6d88\u9664\u7c7b\u578b\u9519\u8bef\u5e76\u63d0\u9ad8\u529f\u80fd\u6b63\u786e\u6027\u3002", "motivation": "\u5f53\u524d\u8bed\u8a00\u6a21\u578b\u5728\u4ee3\u7801\u751f\u6210\u65b9\u9762\u8868\u73b0\u51fa\u8272\uff0c\u4f46\u786e\u4fdd\u7c7b\u578b\u6b63\u786e\u6027\u4ecd\u7136\u662f\u4e00\u4e2a\u6311\u6218\u3002\u4f20\u7edf\u65b9\u6cd5\u5982\u7ea6\u675f\u89e3\u7801\u53ea\u80fd\u5916\u90e8\u62d2\u7edd\u4e0d\u53ef\u7c7b\u578b\u5316\u7684\u4ee3\u7801\uff0c\u4f46\u6a21\u578b\u672c\u8eab\u6ca1\u6709\u6709\u6548\u5b66\u4e60\u7c7b\u578b\u63a8\u7406\uff0c\u8fd9\u9650\u5236\u4e86\u6574\u4f53\u6027\u80fd\u3002", "method": "TyFlow\u91c7\u7528\u7c7b\u578b\u5f15\u5bfc\u7684\u7a0b\u5e8f\u5408\u6210\u7cfb\u7edf\uff0c\u7ef4\u6301\u7c7b\u578b\u63a8\u5bfc\u6811\u548c\u5408\u6210\u63a8\u5bfc\u6811\u4e4b\u95f4\u7684\u540c\u6784\u5173\u7cfb\uff0c\u4f7f\u7528\u57fa\u4e8e\u5408\u6210\u51b3\u7b56\u5e8f\u5217\u7684\u65b0\u4ee3\u7801\u8868\u793a\u800c\u975e\u4f20\u7edf\u7684\u57fa\u4e8e\u6587\u672c\u7684\u6807\u8bb0\u5e8f\u5217\uff0c\u5c06\u7c7b\u578b\u7cfb\u7edf\u5b66\u4e60\u7684\u590d\u6742\u6027\u5378\u8f7d\u5230\u8868\u793a\u672c\u8eab\u3002", "result": "\u8bc4\u4f30\u663e\u793aTyFlow\u4e0d\u4ec5\u6d88\u9664\u4e86\u7c7b\u578b\u9519\u8bef\uff0c\u8fd8\u663e\u8457\u63d0\u9ad8\u4e86\u529f\u80fd\u6b63\u786e\u6027\uff0c\u8bc1\u660e\u4e86\u5c06\u8bed\u8a00\u6a21\u578b\u4e0e\u7c7b\u578b\u7cfb\u7edf\u5185\u90e8\u5bf9\u9f50\u7684\u91cd\u8981\u6027\u3002", "conclusion": "\u5c06\u7c7b\u578b\u63a8\u7406\u5185\u5316\u5230\u4ee3\u7801\u751f\u6210\u4e2d\u5bf9\u4e8e\u63d0\u9ad8\u8bed\u8a00\u6a21\u578b\u7684\u4ee3\u7801\u751f\u6210\u8d28\u91cf\u81f3\u5173\u91cd\u8981\uff0cTyFlow\u901a\u8fc7\u65b0\u9896\u7684\u8868\u793a\u65b9\u6cd5\u6210\u529f\u5b9e\u73b0\u4e86\u8fd9\u4e00\u76ee\u6807\u3002"}}
{"id": "2510.10219", "pdf": "https://arxiv.org/pdf/2510.10219", "abs": "https://arxiv.org/abs/2510.10219", "authors": ["Ruihao Li", "Lizy K. John", "Neeraja J. Yadwadkar"], "title": "Old is Gold: Optimizing Single-threaded Applications with Exgen-Malloc", "categories": ["cs.PL"], "comment": null, "summary": "Memory allocators hide beneath nearly every application stack, yet their\nperformance footprint extends far beyond their code size. Even small\ninefficiencies in the allocators ripple through caches and the rest of the\nmemory hierarchy, collectively imposing what operators often call a \"datacenter\ntax\". At hyperscale, even a 1% improvement in allocator efficiency can unlock\nmillions of dollars in savings and measurable reductions in datacenter energy\nconsumption. Modern memory allocators are designed to optimize allocation speed\nand memory fragmentation in multi-threaded environments, relying on complex\nmetadata and control logic to achieve high performance. However, the overhead\nintroduced by this complexity prompts a reevaluation of allocator design.\nNotably, such overhead can be avoided in single-threaded scenarios, which\ncontinue to be widely used across diverse application domains.\n  In this paper, we introduce Exgen-Malloc, a memory allocator purpose-built\nfor single-threaded applications. By specializing for single-threaded\nexecution, Exgen-Malloc eliminates unnecessary metadata, simplifies the control\nflow, thereby reducing overhead and improving allocation efficiency. Its core\ndesign features include a centralized heap, a single free-block list, and a\nbalanced strategy for memory commitment and relocation. Additionally,\nExgen-Malloc incorporates design principles in modern multi-threaded\nallocators, which do not exist in legacy single-threaded allocators such as\ndlmalloc. We evaluate Exgen-Malloc on two Intel Xeon platforms. Across both\nsystems, Exgen-Malloc achieves a speedup of 1.17x, 1.10x, and 1.93x over\ndlmalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench, respectively. In\naddition to performance, Exgen-Malloc achieves 6.2%, 0.1%, and 25.2% memory\nsavings over mimalloc on SPEC CPU2017, redis-benchmark, and mimalloc-bench,\nrespectively.", "AI": {"tldr": "Exgen-Malloc\u662f\u4e00\u4e2a\u4e13\u4e3a\u5355\u7ebf\u7a0b\u5e94\u7528\u8bbe\u8ba1\u7684\u5185\u5b58\u5206\u914d\u5668\uff0c\u901a\u8fc7\u6d88\u9664\u4e0d\u5fc5\u8981\u7684\u5143\u6570\u636e\u3001\u7b80\u5316\u63a7\u5236\u6d41\u6765\u51cf\u5c11\u5f00\u9500\uff0c\u76f8\u6bd4\u4f20\u7edf\u5206\u914d\u5668\u5728\u6027\u80fd\u548c\u5185\u5b58\u4f7f\u7528\u4e0a\u90fd\u6709\u663e\u8457\u63d0\u5347\u3002", "motivation": "\u73b0\u4ee3\u5185\u5b58\u5206\u914d\u5668\u9488\u5bf9\u591a\u7ebf\u7a0b\u73af\u5883\u4f18\u5316\uff0c\u4f46\u5728\u5355\u7ebf\u7a0b\u573a\u666f\u4e0b\u4f1a\u5f15\u5165\u4e0d\u5fc5\u8981\u7684\u590d\u6742\u6027\u548c\u5f00\u9500\u3002\u5728\u8d85\u5927\u89c4\u6a21\u6570\u636e\u4e2d\u5fc3\uff0c\u5373\u4f7f1%\u7684\u6548\u7387\u63d0\u5347\u4e5f\u80fd\u8282\u7701\u6570\u767e\u4e07\u7f8e\u5143\u548c\u80fd\u6e90\u6d88\u8017\u3002", "method": "\u91c7\u7528\u96c6\u4e2d\u5f0f\u5806\u3001\u5355\u4e00\u7a7a\u95f2\u5757\u5217\u8868\u3001\u5e73\u8861\u7684\u5185\u5b58\u63d0\u4ea4\u548c\u91cd\u5b9a\u4f4d\u7b56\u7565\uff0c\u501f\u9274\u73b0\u4ee3\u591a\u7ebf\u7a0b\u5206\u914d\u5668\u7684\u8bbe\u8ba1\u539f\u5219\uff0c\u4f46\u4e13\u95e8\u9488\u5bf9\u5355\u7ebf\u7a0b\u6267\u884c\u8fdb\u884c\u4f18\u5316\u3002", "result": "\u5728\u4e24\u4e2aIntel Xeon\u5e73\u53f0\u4e0a\u6d4b\u8bd5\uff0c\u76f8\u6bd4dlmalloc\u5728SPEC CPU2017\u3001redis-benchmark\u548cmimalloc-bench\u4e0a\u5206\u522b\u83b7\u5f971.17x\u30011.10x\u548c1.93x\u7684\u901f\u5ea6\u63d0\u5347\uff0c\u76f8\u6bd4mimalloc\u5206\u522b\u8282\u77016.2%\u30010.1%\u548c25.2%\u7684\u5185\u5b58\u3002", "conclusion": "\u4e13\u95e8\u4e3a\u5355\u7ebf\u7a0b\u5e94\u7528\u8bbe\u8ba1\u7684\u5206\u914d\u5668\u80fd\u591f\u663e\u8457\u63d0\u5347\u6027\u80fd\u548c\u5185\u5b58\u6548\u7387\uff0c\u8bc1\u660e\u4e86\u5728\u7279\u5b9a\u573a\u666f\u4e0b\u7b80\u5316\u8bbe\u8ba1\u7684\u4ef7\u503c\u3002"}}
{"id": "2510.10410", "pdf": "https://arxiv.org/pdf/2510.10410", "abs": "https://arxiv.org/abs/2510.10410", "authors": ["Hui Xu"], "title": "A Trace-based Approach for Code Safety Analysis", "categories": ["cs.PL", "cs.SE"], "comment": null, "summary": "Rust is a memory-safe programming language that disallows undefined behavior.\nIts safety guarantees have been extensively examined by the community through\nempirical studies, which has led to its remarkable success. However, unsafe\ncode remains a critical concern in Rust. By reviewing the safety design of Rust\nand analyzing real-world Rust projects, this paper establishes a systematic\nframework for understanding unsafe code and undefined behavior, and summarizes\nthe soundness criteria for Rust code. It further derives actionable guidance\nfor achieving sound encapsulation.", "AI": {"tldr": "\u672c\u6587\u7cfb\u7edf\u5206\u6790\u4e86Rust\u8bed\u8a00\u4e2d\u7684\u4e0d\u5b89\u5168\u4ee3\u7801\u548c\u672a\u5b9a\u4e49\u884c\u4e3a\u95ee\u9898\uff0c\u5efa\u7acb\u4e86\u7406\u89e3\u6846\u67b6\u5e76\u603b\u7ed3\u4e86Rust\u4ee3\u7801\u7684\u6b63\u786e\u6027\u6807\u51c6\uff0c\u4e3a\u5b89\u5168\u5c01\u88c5\u63d0\u4f9b\u4e86\u5b9e\u8df5\u6307\u5bfc\u3002", "motivation": "Rust\u4f5c\u4e3a\u5185\u5b58\u5b89\u5168\u7f16\u7a0b\u8bed\u8a00\u867d\u7136\u7981\u6b62\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u4f46\u4e0d\u5b89\u5168\u4ee3\u7801\u4ecd\u7136\u662f\u5173\u952e\u95ee\u9898\u3002\u901a\u8fc7\u5ba1\u67e5Rust\u7684\u5b89\u5168\u8bbe\u8ba1\u548c\u5206\u6790\u5b9e\u9645\u9879\u76ee\uff0c\u9700\u8981\u5efa\u7acb\u7cfb\u7edf\u6846\u67b6\u6765\u7406\u89e3\u4e0d\u5b89\u5168\u4ee3\u7801\u548c\u672a\u5b9a\u4e49\u884c\u4e3a\u3002", "method": "\u901a\u8fc7\u56de\u987eRust\u7684\u5b89\u5168\u8bbe\u8ba1\uff0c\u5206\u6790\u771f\u5b9e\u4e16\u754c\u7684Rust\u9879\u76ee\uff0c\u5efa\u7acb\u7cfb\u7edf\u6846\u67b6\u6765\u7406\u89e3\u4e0d\u5b89\u5168\u4ee3\u7801\u548c\u672a\u5b9a\u4e49\u884c\u4e3a\uff0c\u5e76\u603b\u7ed3Rust\u4ee3\u7801\u7684\u6b63\u786e\u6027\u6807\u51c6\u3002", "result": "\u5efa\u7acb\u4e86\u7406\u89e3\u4e0d\u5b89\u5168\u4ee3\u7801\u548c\u672a\u5b9a\u4e49\u884c\u4e3a\u7684\u7cfb\u7edf\u6846\u67b6\uff0c\u603b\u7ed3\u4e86Rust\u4ee3\u7801\u7684\u6b63\u786e\u6027\u6807\u51c6\uff0c\u5e76\u63a8\u5bfc\u51fa\u5b9e\u73b0\u5b89\u5168\u5c01\u88c5\u7684\u53ef\u64cd\u4f5c\u6307\u5bfc\u3002", "conclusion": "\u8be5\u7814\u7a76\u4e3aRust\u5f00\u53d1\u8005\u63d0\u4f9b\u4e86\u7cfb\u7edf\u7684\u65b9\u6cd5\u6765\u7406\u89e3\u548c\u5904\u7406\u4e0d\u5b89\u5168\u4ee3\u7801\uff0c\u4e3a\u5b9e\u73b0\u5b89\u5168\u5c01\u88c5\u63d0\u4f9b\u4e86\u5177\u4f53\u6307\u5bfc\uff0c\u6709\u52a9\u4e8e\u63d0\u9ad8Rust\u4ee3\u7801\u7684\u6574\u4f53\u5b89\u5168\u6027\u3002"}}
{"id": "2510.10517", "pdf": "https://arxiv.org/pdf/2510.10517", "abs": "https://arxiv.org/abs/2510.10517", "authors": ["Su-Hyeon Kim", "Joonghyuk Hahn", "Sooyoung Cha", "Yo-Sub Han"], "title": "ECO: Enhanced Code Optimization via Performance-Aware Prompting for Code-LLMs", "categories": ["cs.PL", "cs.AI", "cs.SE"], "comment": null, "summary": "Code runtime optimization-the task of rewriting a given code to a faster\none-remains challenging, as it requires reasoning about performance trade-offs\ninvolving algorithmic and structural choices. Recent approaches employ\ncode-LLMs with slow-fast code pairs provided as optimization guidance, but such\npair-based methods obscure the causal factors of performance gains and often\nlead to superficial pattern imitation rather than genuine performance\nreasoning. We introduce ECO, a performance-aware prompting framework for code\noptimization. ECO first distills runtime optimization instructions (ROIs) from\nreference slow-fast code pairs; Each ROI describes root causes of inefficiency\nand the rationales that drive performance improvements. For a given input code,\nECO in parallel employs (i) a symbolic advisor to produce a bottleneck\ndiagnosis tailored to the code, and (ii) an ROI retriever to return related\nROIs. These two outputs are then composed into a performance-aware prompt,\nproviding actionable guidance for code-LLMs. ECO's prompts are model-agnostic,\nrequire no fine-tuning, and can be easily prepended to any code-LLM prompt. Our\nempirical studies highlight that ECO prompting significantly improves\ncode-LLMs' ability to generate efficient code, achieving speedups of up to\n7.81x while minimizing correctness loss.", "AI": {"tldr": "ECO\u662f\u4e00\u4e2a\u6027\u80fd\u611f\u77e5\u7684\u4ee3\u7801\u4f18\u5316\u63d0\u793a\u6846\u67b6\uff0c\u901a\u8fc7\u63d0\u53d6\u8fd0\u884c\u65f6\u4f18\u5316\u6307\u4ee4\u548c\u7b26\u53f7\u5316\u74f6\u9888\u8bca\u65ad\uff0c\u4e3a\u4ee3\u7801LLMs\u63d0\u4f9b\u4f18\u5316\u6307\u5bfc\uff0c\u65e0\u9700\u5fae\u8c03\u5373\u53ef\u663e\u8457\u63d0\u5347\u4ee3\u7801\u6548\u7387\u3002", "motivation": "\u73b0\u6709\u57fa\u4e8e\u6162-\u5feb\u4ee3\u7801\u5bf9\u7684\u4f18\u5316\u65b9\u6cd5\u5f80\u5f80\u5bfc\u81f4\u8868\u9762\u6a21\u5f0f\u6a21\u4eff\u800c\u975e\u771f\u6b63\u7684\u6027\u80fd\u63a8\u7406\uff0c\u65e0\u6cd5\u63ed\u793a\u6027\u80fd\u63d0\u5347\u7684\u56e0\u679c\u56e0\u7d20\u3002", "method": "ECO\u4ece\u53c2\u8003\u4ee3\u7801\u5bf9\u4e2d\u63d0\u53d6\u8fd0\u884c\u65f6\u4f18\u5316\u6307\u4ee4(ROIs)\uff0c\u5e76\u884c\u4f7f\u7528\u7b26\u53f7\u5316\u987e\u95ee\u8fdb\u884c\u74f6\u9888\u8bca\u65ad\u548cROI\u68c0\u7d22\u5668\uff0c\u5c06\u4e24\u8005\u7ec4\u5408\u6210\u6027\u80fd\u611f\u77e5\u63d0\u793a\u3002", "result": "ECO\u663e\u8457\u63d0\u5347\u4e86\u4ee3\u7801LLMs\u751f\u6210\u9ad8\u6548\u4ee3\u7801\u7684\u80fd\u529b\uff0c\u5b9e\u73b0\u4e86\u6700\u9ad87.81\u500d\u7684\u901f\u5ea6\u63d0\u5347\uff0c\u540c\u65f6\u6700\u5c0f\u5316\u6b63\u786e\u6027\u635f\u5931\u3002", "conclusion": "ECO\u6846\u67b6\u63d0\u4f9b\u4e86\u4e00\u79cd\u6a21\u578b\u65e0\u5173\u3001\u65e0\u9700\u5fae\u8c03\u7684\u4ee3\u7801\u4f18\u5316\u65b9\u6cd5\uff0c\u901a\u8fc7\u6027\u80fd\u611f\u77e5\u63d0\u793a\u6709\u6548\u6307\u5bfc\u4ee3\u7801LLMs\u8fdb\u884c\u6027\u80fd\u63a8\u7406\u3002"}}
{"id": "2510.10531", "pdf": "https://arxiv.org/pdf/2510.10531", "abs": "https://arxiv.org/abs/2510.10531", "authors": ["Guillaume Ambal", "George Hodgkins", "Mark Madler", "Gregory Chockler", "Brijesh Dongol", "Joseph Izraelevitz", "Azalea Raad", "Viktor Vafeiadis"], "title": "A Verified High-Performance Composable Object Library for Remote Direct Memory Access (Extended Version)", "categories": ["cs.PL", "cs.DC", "cs.LO", "cs.SY", "eess.SY"], "comment": null, "summary": "Remote Direct Memory Access (RDMA) is a memory technology that allows remote\ndevices to directly write to and read from each other's memory, bypassing\ncomponents such as the CPU and operating system. This enables low-latency\nhigh-throughput networking, as required for many modern data centres, HPC\napplications and AI/ML workloads. However, baseline RDMA comprises a highly\npermissive weak memory model that is difficult to use in practice and has only\nrecently been formalised. In this paper, we introduce the Library of Composable\nObjects (LOCO), a formally verified library for building multi-node objects on\nRDMA, filling the gap between shared memory and distributed system programming.\nLOCO objects are well-encapsulated and take advantage of the strong locality\nand the weak consistency characteristics of RDMA. They have performance\ncomparable to custom RDMA systems (e.g. distributed maps), but with a far\nsimpler programming model amenable to formal proofs of correctness. To support\nverification, we develop a novel modular declarative verification framework,\ncalled Mowgli, that is flexible enough to model multinode objects and is\nindependent of a memory consistency model. We instantiate Mowgli with the RDMA\nmemory model, and use it to verify correctness of LOCO libraries.", "AI": {"tldr": "LOCO\u662f\u4e00\u4e2a\u7ecf\u8fc7\u5f62\u5f0f\u5316\u9a8c\u8bc1\u7684RDMA\u591a\u8282\u70b9\u5bf9\u8c61\u5e93\uff0c\u586b\u8865\u4e86\u5171\u4eab\u5185\u5b58\u548c\u5206\u5e03\u5f0f\u7cfb\u7edf\u7f16\u7a0b\u4e4b\u95f4\u7684\u7a7a\u767d\uff0c\u63d0\u4f9b\u9ad8\u6027\u80fd\u4e14\u6613\u4e8e\u9a8c\u8bc1\u7684\u7f16\u7a0b\u6a21\u578b\u3002", "motivation": "RDMA\u867d\u7136\u63d0\u4f9b\u4f4e\u5ef6\u8fdf\u9ad8\u541e\u5410\u91cf\uff0c\u4f46\u5176\u5f31\u5185\u5b58\u6a21\u578b\u96be\u4ee5\u4f7f\u7528\u4e14\u6700\u8fd1\u624d\u88ab\u5f62\u5f0f\u5316\uff0c\u9700\u8981\u7b80\u5316\u7f16\u7a0b\u6a21\u578b\u5e76\u652f\u6301\u5f62\u5f0f\u5316\u9a8c\u8bc1\u3002", "method": "\u5f00\u53d1LOCO\u5e93\u6784\u5efa\u591a\u8282\u70b9\u5bf9\u8c61\uff0c\u5229\u7528RDMA\u7684\u5f3a\u5c40\u90e8\u6027\u548c\u5f31\u4e00\u81f4\u6027\u7279\u6027\uff0c\u5e76\u521b\u5efaMowgli\u6a21\u5757\u5316\u58f0\u660e\u5f0f\u9a8c\u8bc1\u6846\u67b6\u6765\u9a8c\u8bc1\u6b63\u786e\u6027\u3002", "result": "LOCO\u5bf9\u8c61\u6027\u80fd\u4e0e\u5b9a\u5236RDMA\u7cfb\u7edf\u76f8\u5f53\uff0c\u4f46\u7f16\u7a0b\u6a21\u578b\u66f4\u7b80\u5355\uff0c\u9002\u5408\u5f62\u5f0f\u5316\u6b63\u786e\u6027\u8bc1\u660e\u3002", "conclusion": "LOCO\u6210\u529f\u586b\u8865\u4e86RDMA\u7f16\u7a0b\u7684\u7a7a\u767d\uff0c\u63d0\u4f9b\u4e86\u9ad8\u6027\u80fd\u4e14\u53ef\u9a8c\u8bc1\u7684\u591a\u8282\u70b9\u5bf9\u8c61\u5e93\uff0cMowgli\u6846\u67b6\u4e3a\u591a\u8282\u70b9\u5bf9\u8c61\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u7075\u6d3b\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.11007", "pdf": "https://arxiv.org/pdf/2510.11007", "abs": "https://arxiv.org/abs/2510.11007", "authors": ["Antonina Nepeivoda", "Ilya Afanasyev"], "title": "Abstract String Domain Defined with Word Equations as a Reduced Product (Extended Version)", "categories": ["cs.PL", "cs.FL"], "comment": null, "summary": "We introduce a string-interval abstract domain, where string intervals are\ncharacterized by systems of word equations (encoding lower bounds on string\nvalues) and word disequalities (encoding upper bounds). Building upon the\nlattice structure of string intervals, we define an abstract string object as a\nreduced product on a string property semilattice, determined by\nlength-non-increasing morphisms. We consider several reduction strategies for\nabstract string objects and show that upon these strategies the string object\ndomain forms a lattice. We define basic abstract string operations on the\ndomain, aiming to minimize computational overheads on the reduction, and show\nhow the domain can be used to analyse properties of JavaScript string\nmanipulating programs.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u57fa\u4e8e\u5b57\u7b26\u4e32\u533a\u95f4\u7684\u62bd\u8c61\u57df\uff0c\u4f7f\u7528\u5b57\u65b9\u7a0b\u548c\u5b57\u4e0d\u7b49\u5f0f\u6765\u8868\u5f81\u5b57\u7b26\u4e32\u8fb9\u754c\uff0c\u6784\u5efa\u4e86\u5b57\u7b26\u4e32\u5bf9\u8c61\u7684\u683c\u7ed3\u6784\uff0c\u5e76\u5b9a\u4e49\u4e86\u9ad8\u6548\u7684\u62bd\u8c61\u5b57\u7b26\u4e32\u64cd\u4f5c\uff0c\u7528\u4e8e\u5206\u6790JavaScript\u5b57\u7b26\u4e32\u5904\u7406\u7a0b\u5e8f\u3002", "motivation": "\u9700\u8981\u4e00\u79cd\u80fd\u591f\u7cbe\u786e\u5206\u6790\u5b57\u7b26\u4e32\u64cd\u4f5c\u7a0b\u5e8f\u7684\u62bd\u8c61\u57df\uff0c\u7279\u522b\u662f\u9488\u5bf9JavaScript\u7b49\u52a8\u6001\u8bed\u8a00\u4e2d\u7684\u5b57\u7b26\u4e32\u5904\u7406\uff0c\u4f20\u7edf\u65b9\u6cd5\u5728\u5904\u7406\u590d\u6742\u5b57\u7b26\u4e32\u64cd\u4f5c\u65f6\u5b58\u5728\u7cbe\u5ea6\u4e0d\u8db3\u7684\u95ee\u9898\u3002", "method": "\u5b9a\u4e49\u5b57\u7b26\u4e32\u533a\u95f4\u62bd\u8c61\u57df\uff0c\u4f7f\u7528\u5b57\u65b9\u7a0b\u8868\u793a\u4e0b\u754c\u3001\u5b57\u4e0d\u7b49\u5f0f\u8868\u793a\u4e0a\u754c\uff1b\u6784\u5efa\u57fa\u4e8e\u957f\u5ea6\u975e\u9012\u589e\u6001\u5c04\u7684\u5b57\u7b26\u4e32\u5c5e\u6027\u534a\u683c\uff1b\u8bbe\u8ba1\u591a\u79cd\u7ea6\u7b80\u7b56\u7565\u5f62\u6210\u683c\u7ed3\u6784\uff1b\u5b9a\u4e49\u9ad8\u6548\u7684\u62bd\u8c61\u5b57\u7b26\u4e32\u64cd\u4f5c\u3002", "result": "\u5efa\u7acb\u4e86\u5b57\u7b26\u4e32\u5bf9\u8c61\u57df\u7684\u683c\u7ed3\u6784\uff0c\u8bbe\u8ba1\u4e86\u8ba1\u7b97\u5f00\u9500\u8f83\u5c0f\u7684\u62bd\u8c61\u64cd\u4f5c\uff0c\u80fd\u591f\u6709\u6548\u5206\u6790JavaScript\u5b57\u7b26\u4e32\u5904\u7406\u7a0b\u5e8f\u7684\u5c5e\u6027\u3002", "conclusion": "\u8be5\u5b57\u7b26\u4e32\u533a\u95f4\u62bd\u8c61\u57df\u4e3a\u7a0b\u5e8f\u5206\u6790\u63d0\u4f9b\u4e86\u7cbe\u786e\u4e14\u9ad8\u6548\u7684\u5b57\u7b26\u4e32\u62bd\u8c61\u65b9\u6cd5\uff0c\u7279\u522b\u9002\u7528\u4e8eJavaScript\u7b49\u8bed\u8a00\u7684\u5b57\u7b26\u4e32\u64cd\u4f5c\u5206\u6790\u3002"}}
{"id": "2510.11420", "pdf": "https://arxiv.org/pdf/2510.11420", "abs": "https://arxiv.org/abs/2510.11420", "authors": ["Mark Koch", "Agust\u00edn Borgna", "Seyon Sivarajah", "Alan Lawrence", "Alec Edgington", "Douglas Wilson", "Craig Roy", "Luca Mondada", "Lukas Heidemann", "Ross Duncan"], "title": "HUGR: A Quantum-Classical Intermediate Representation", "categories": ["cs.PL", "quant-ph"], "comment": "8 pages, extended abstract submitted to PlanQC25", "summary": "We introduce the Hierarchical Unified Graph Representation (HUGR): a novel\ngraph based intermediate representation for mixed quantum-classical programs.\nHUGR's design features high expressivity and extensibility to capture the\ncapabilities of near-term and forthcoming quantum computing devices, as well as\nnew and evolving abstractions from novel quantum programming paradigms. The\ngraph based structure is machine-friendly and supports powerful pattern\nmatching based compilation techniques. Inspired by MLIR, HUGR's extensibility\nfurther allows compilation tooling to reason about programs at multiple levels\nof abstraction, lowering smoothly between them. Safety guarantees in the\nstructure including strict, static typing and linear quantum types allow rapid\ndevelopment of compilation tooling without fear of program invalidation. A full\nspecification of HUGR and reference implementation are open-source and\navailable online.", "AI": {"tldr": "HUGR\u662f\u4e00\u79cd\u65b0\u9896\u7684\u57fa\u4e8e\u56fe\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u7528\u4e8e\u6df7\u5408\u91cf\u5b50-\u7ecf\u5178\u7a0b\u5e8f\uff0c\u5177\u6709\u9ad8\u8868\u8fbe\u6027\u548c\u53ef\u6269\u5c55\u6027\uff0c\u652f\u6301\u591a\u7ea7\u62bd\u8c61\u7f16\u8bd1\u548c\u5b89\u5168\u6027\u4fdd\u8bc1\u3002", "motivation": "\u4e3a\u4e86\u6355\u6349\u8fd1\u7aef\u548c\u672a\u6765\u91cf\u5b50\u8ba1\u7b97\u8bbe\u5907\u7684\u80fd\u529b\uff0c\u4ee5\u53ca\u65b0\u5174\u91cf\u5b50\u7f16\u7a0b\u8303\u5f0f\u4e2d\u7684\u62bd\u8c61\u6982\u5ff5\uff0c\u9700\u8981\u4e00\u79cd\u673a\u5668\u53cb\u597d\u4e14\u652f\u6301\u5f3a\u5927\u7f16\u8bd1\u6280\u672f\u7684\u4e2d\u95f4\u8868\u793a\u3002", "method": "\u8bbe\u8ba1\u57fa\u4e8e\u56fe\u7684\u5c42\u6b21\u5316\u7edf\u4e00\u56fe\u8868\u793a\uff08HUGR\uff09\uff0c\u53d7MLIR\u542f\u53d1\uff0c\u652f\u6301\u591a\u7ea7\u62bd\u8c61\u7f16\u8bd1\uff0c\u5305\u542b\u4e25\u683c\u7684\u9759\u6001\u7c7b\u578b\u548c\u7ebf\u6027\u91cf\u5b50\u7c7b\u578b\u7b49\u5b89\u5168\u4fdd\u8bc1\u3002", "result": "\u5f00\u53d1\u4e86\u5b8c\u6574\u7684HUGR\u89c4\u8303\u548c\u5f00\u6e90\u53c2\u8003\u5b9e\u73b0\uff0c\u652f\u6301\u6a21\u5f0f\u5339\u914d\u7f16\u8bd1\u6280\u672f\uff0c\u80fd\u591f\u5e73\u6ed1\u5730\u5728\u4e0d\u540c\u62bd\u8c61\u7ea7\u522b\u4e4b\u95f4\u8fdb\u884c\u7a0b\u5e8f\u8f6c\u6362\u3002", "conclusion": "HUGR\u4e3a\u91cf\u5b50\u7f16\u8bd1\u5de5\u5177\u63d0\u4f9b\u4e86\u5b89\u5168\u3001\u53ef\u6269\u5c55\u7684\u4e2d\u95f4\u8868\u793a\uff0c\u6709\u52a9\u4e8e\u5feb\u901f\u5f00\u53d1\u7f16\u8bd1\u5de5\u5177\u800c\u4e0d\u7528\u62c5\u5fc3\u7a0b\u5e8f\u5931\u6548\u3002"}}
{"id": "2510.11573", "pdf": "https://arxiv.org/pdf/2510.11573", "abs": "https://arxiv.org/abs/2510.11573", "authors": ["Santiago Arranz-Olmos", "Gilles Barthe", "Lionel Blatter", "Xingyu Xie", "Zhiyuan Zhang"], "title": "(Dis)Proving Spectre Security with Speculation-Passing Style", "categories": ["cs.PL"], "comment": null, "summary": "Constant-time (CT) verification tools are commonly used for detecting\npotential side-channel vulnerabilities in cryptographic libraries. Recently, a\nnew class of tools, called speculative constant-time (SCT) tools, has also been\nused for detecting potential Spectre vulnerabilities. In many cases, these SCT\ntools have emerged as liftings of CT tools. However, these liftings are seldom\ndefined precisely and are almost never analyzed formally. The goal of this\npaper is to address this gap, by developing formal foundations for these\nliftings, and to demonstrate that these foundations can yield practical\nbenefits.\n  Concretely, we introduce a program transformation, coined Speculation-Passing\nStyle (SPS), for reducing SCT verification to CT verification. Essentially, the\ntransformation instruments the program with a new input that corresponds to\nattacker-controlled predictions and modifies the program to follow them. This\napproach is sound and complete, in the sense that a program is SCT if and only\nif its SPS transform is CT. Thus, we can leverage existing CT verification\ntools to prove SCT; we illustrate this by combining SPS with three standard\nmethodologies for CT verification, namely reducing it to non-interference,\nassertion safety and dynamic taint analysis. We realize these combinations with\nthree existing tools, EasyCrypt, BINSEC, and ctgrind, and we evaluate them on\nKocher's benchmarks for Spectre-v1. Our results focus on Spectre-v1 in the\nstandard CT leakage model; however, we also discuss applications of our method\nto other variants of Spectre and other leakage models.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u79f0\u4e3a\u63a8\u6d4b\u4f20\u9012\u98ce\u683c(SPS)\u7684\u7a0b\u5e8f\u8f6c\u6362\u65b9\u6cd5\uff0c\u5c06\u63a8\u6d4b\u5e38\u6570\u65f6\u95f4(SCT)\u9a8c\u8bc1\u7b80\u5316\u4e3a\u5e38\u6570\u65f6\u95f4(CT)\u9a8c\u8bc1\uff0c\u4ece\u800c\u53ef\u4ee5\u5229\u7528\u73b0\u6709CT\u9a8c\u8bc1\u5de5\u5177\u6765\u68c0\u6d4bSpectre\u6f0f\u6d1e\u3002", "motivation": "\u73b0\u6709\u7684\u63a8\u6d4b\u5e38\u6570\u65f6\u95f4(SCT)\u9a8c\u8bc1\u5de5\u5177\u901a\u5e38\u662f\u4ece\u5e38\u6570\u65f6\u95f4(CT)\u5de5\u5177\u63d0\u5347\u800c\u6765\uff0c\u4f46\u8fd9\u4e9b\u63d0\u5347\u7f3a\u4e4f\u7cbe\u786e\u5b9a\u4e49\u548c\u5f62\u5f0f\u5316\u5206\u6790\u3002\u672c\u6587\u65e8\u5728\u586b\u8865\u8fd9\u4e00\u7a7a\u767d\uff0c\u4e3a\u8fd9\u4e9b\u63d0\u5347\u5efa\u7acb\u5f62\u5f0f\u5316\u57fa\u7840\u3002", "method": "\u5f15\u5165\u63a8\u6d4b\u4f20\u9012\u98ce\u683c(SPS)\u7a0b\u5e8f\u8f6c\u6362\uff0c\u901a\u8fc7\u4e3a\u7a0b\u5e8f\u6dfb\u52a0\u5bf9\u5e94\u653b\u51fb\u8005\u63a7\u5236\u9884\u6d4b\u7684\u65b0\u8f93\u5165\uff0c\u5e76\u4fee\u6539\u7a0b\u5e8f\u4ee5\u9075\u5faa\u8fd9\u4e9b\u9884\u6d4b\uff0c\u4ece\u800c\u5c06SCT\u9a8c\u8bc1\u95ee\u9898\u8f6c\u5316\u4e3aCT\u9a8c\u8bc1\u95ee\u9898\u3002", "result": "SPS\u8f6c\u6362\u662f\u5b8c\u5907\u7684\uff0c\u5373\u7a0b\u5e8f\u662fSCT\u5f53\u4e14\u4ec5\u5f53\u5176SPS\u8f6c\u6362\u662fCT\u3002\u901a\u8fc7\u5c06SPS\u4e0eEasyCrypt\u3001BINSEC\u548cctgrind\u4e09\u79cdCT\u9a8c\u8bc1\u5de5\u5177\u7ed3\u5408\uff0c\u5728Spectre-v1\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u8fdb\u884c\u4e86\u8bc4\u4f30\u3002", "conclusion": "SPS\u65b9\u6cd5\u4e3aSCT\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u5f62\u5f0f\u5316\u57fa\u7840\uff0c\u80fd\u591f\u6709\u6548\u5229\u7528\u73b0\u6709CT\u9a8c\u8bc1\u5de5\u5177\u6765\u68c0\u6d4bSpectre\u6f0f\u6d1e\uff0c\u5e76\u53ef\u6269\u5c55\u5230\u5176\u4ed6Spectre\u53d8\u79cd\u548c\u6cc4\u6f0f\u6a21\u578b\u3002"}}
{"id": "2510.09633", "pdf": "https://arxiv.org/pdf/2510.09633", "abs": "https://arxiv.org/abs/2510.09633", "authors": ["Bernhard Mueller"], "title": "Hound: Relation-First Knowledge Graphs for Complex-System Reasoning in Security Audits", "categories": ["cs.CR", "cs.AI", "cs.LG", "cs.PL"], "comment": null, "summary": "Hound introduces a relation-first graph engine that improves system-level\nreasoning across interrelated components in complex codebases. The agent\ndesigns flexible, analyst-defined views with compact annotations (e.g.,\nmonetary/value flows, authentication/authorization roles, call graphs, protocol\ninvariants) and uses them to anchor exact retrieval: for any question, it loads\nprecisely the code that matters (often across components) so it can zoom out to\nsystem structure and zoom in to the decisive lines. A second contribution is a\npersistent belief system: long-lived vulnerability hypotheses whose confidence\nis updated as evidence accrues. The agent employs coverage-versus-intuition\nplanning and a QA finalizer to confirm or reject hypotheses. On a five-project\nsubset of ScaBench[1], Hound improves recall and F1 over a baseline LLM\nanalyzer (micro recall 31.2% vs. 8.3%; F1 14.2% vs. 9.8%) with a modest\nprecision trade-off. We attribute these gains to flexible, relation-first\ngraphs that extend model understanding beyond call/dataflow to abstract\naspects, plus the hypothesis-centric loop; code and artifacts are released to\nsupport reproduction.", "AI": {"tldr": "Hound\u662f\u4e00\u4e2a\u5173\u7cfb\u4f18\u5148\u7684\u56fe\u5f15\u64ce\uff0c\u901a\u8fc7\u5206\u6790\u5e08\u5b9a\u4e49\u7684\u89c6\u56fe\u548c\u6301\u4e45\u4fe1\u5ff5\u7cfb\u7edf\uff0c\u5728\u590d\u6742\u4ee3\u7801\u5e93\u4e2d\u5b9e\u73b0\u7cbe\u786e\u68c0\u7d22\u548c\u7cfb\u7edf\u7ea7\u63a8\u7406\uff0c\u663e\u8457\u63d0\u9ad8\u4e86\u6f0f\u6d1e\u68c0\u6d4b\u7684\u53ec\u56de\u7387\u548cF1\u5206\u6570\u3002", "motivation": "\u89e3\u51b3\u590d\u6742\u4ee3\u7801\u5e93\u4e2d\u7cfb\u7edf\u7ea7\u63a8\u7406\u7684\u6311\u6218\uff0c\u4f20\u7edf\u65b9\u6cd5\u96be\u4ee5\u8de8\u7ec4\u4ef6\u5206\u6790\u62bd\u8c61\u5173\u7cfb\uff08\u5982\u4ef7\u503c\u6d41\u3001\u6743\u9650\u89d2\u8272\u7b49\uff09\uff0c\u9700\u8981\u66f4\u7075\u6d3b\u7684\u56fe\u8868\u793a\u548c\u6301\u7eed\u7684\u8bc1\u636e\u79ef\u7d2f\u673a\u5236\u3002", "method": "\u91c7\u7528\u5173\u7cfb\u4f18\u5148\u7684\u56fe\u5f15\u64ce\uff0c\u652f\u6301\u5206\u6790\u5e08\u5b9a\u4e49\u89c6\u56fe\u548c\u7d27\u51d1\u6807\u6ce8\uff1b\u5efa\u7acb\u6301\u4e45\u4fe1\u5ff5\u7cfb\u7edf\u8ddf\u8e2a\u6f0f\u6d1e\u5047\u8bbe\uff1b\u4f7f\u7528\u8986\u76d6vs\u76f4\u89c9\u89c4\u5212\u548cQA\u6700\u7ec8\u786e\u8ba4\u673a\u5236\u3002", "result": "\u5728ScaBench\u7684\u4e94\u4e2a\u9879\u76ee\u4e0a\uff0c\u76f8\u6bd4\u57fa\u7ebfLLM\u5206\u6790\u5668\uff0c\u5fae\u53ec\u56de\u7387\u4ece8.3%\u63d0\u5347\u523031.2%\uff0cF1\u5206\u6570\u4ece9.8%\u63d0\u5347\u523014.2%\uff0c\u4f46\u7cbe\u5ea6\u7565\u6709\u4e0b\u964d\u3002", "conclusion": "\u5173\u7cfb\u4f18\u5148\u7684\u56fe\u8868\u793a\u548c\u5047\u8bbe\u4e2d\u5fc3\u5faa\u73af\u6709\u6548\u6269\u5c55\u4e86\u6a21\u578b\u7406\u89e3\u80fd\u529b\uff0c\u652f\u6301\u8de8\u7ec4\u4ef6\u5206\u6790\u62bd\u8c61\u65b9\u9762\uff0c\u663e\u8457\u6539\u5584\u4e86\u7cfb\u7edf\u7ea7\u6f0f\u6d1e\u68c0\u6d4b\u6027\u80fd\u3002"}}
{"id": "2510.10066", "pdf": "https://arxiv.org/pdf/2510.10066", "abs": "https://arxiv.org/abs/2510.10066", "authors": ["Shan Jiang", "Chenguang Zhu", "Sarfraz Khurshid"], "title": "OBsmith: Testing JavaScript Obfuscator using LLM-powered sketching", "categories": ["cs.SE", "cs.AI", "cs.PL"], "comment": null, "summary": "JavaScript obfuscators are widely deployed to protect intellectual property\nand resist reverse engineering, yet their correctness has been largely\noverlooked compared to performance and resilience. Existing evaluations\ntypically measure resistance to deobfuscation, leaving the critical question of\nwhether obfuscators preserve program semantics unanswered. Incorrect\ntransformations can silently alter functionality, compromise reliability, and\nerode security-undermining the very purpose of obfuscation. To address this\ngap, we present OBsmith, a novel framework to systematically test JavaScript\nobfuscators using large language models (LLMs). OBsmith leverages LLMs to\ngenerate program sketches abstract templates capturing diverse language\nconstructs, idioms, and corner cases-which are instantiated into executable\nprograms and subjected to obfuscation under different configurations. Besides\nLLM-powered sketching, OBsmith also employs a second source: automatic\nextraction of sketches from real programs. This extraction path enables more\nfocused testing of project specific features and lets developers inject domain\nknowledge into the resulting test cases. OBsmith uncovers 11 previously unknown\ncorrectness bugs. Under an equal program budget, five general purpose\nstate-of-the-art JavaScript fuzzers (FuzzJIT, Jsfunfuzz, Superion, DIE,\nFuzzilli) failed to detect these issues, highlighting OBsmith's complementary\nfocus on obfuscation induced misbehavior. An ablation shows that all components\nexcept our generic MRs contribute to at least one bug class; the negative MR\nresult suggests the need for obfuscator-specific metamorphic relations. Our\nresults also seed discussion on how to balance obfuscation presets and\nperformance cost. We envision OBsmith as an important step towards automated\ntesting and quality assurance of obfuscators and other semantic-preserving\ntoolchains.", "AI": {"tldr": "OBsmith\u662f\u4e00\u4e2a\u4f7f\u7528\u5927\u8bed\u8a00\u6a21\u578b\u7cfb\u7edf\u6d4b\u8bd5JavaScript\u6df7\u6dc6\u5668\u6b63\u786e\u6027\u7684\u6846\u67b6\uff0c\u53d1\u73b0\u4e8611\u4e2a\u672a\u77e5\u7684\u6b63\u786e\u6027bug\uff0c\u6bd4\u73b0\u6709\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u66f4\u6709\u6548", "motivation": "JavaScript\u6df7\u6dc6\u5668\u5e7f\u6cdb\u7528\u4e8e\u4fdd\u62a4\u77e5\u8bc6\u4ea7\u6743\u548c\u62b5\u6297\u9006\u5411\u5de5\u7a0b\uff0c\u4f46\u5176\u6b63\u786e\u6027\u4e00\u76f4\u88ab\u5ffd\u89c6\u3002\u4e0d\u6b63\u786e\u7684\u8f6c\u6362\u53ef\u80fd\u9759\u9ed8\u6539\u53d8\u7a0b\u5e8f\u529f\u80fd\uff0c\u7834\u574f\u53ef\u9760\u6027\u548c\u5b89\u5168\u6027\uff0c\u8fdd\u80cc\u6df7\u6dc6\u7684\u6839\u672c\u76ee\u7684", "method": "OBsmith\u5229\u7528LLM\u751f\u6210\u7a0b\u5e8f\u8349\u56fe\uff08\u62bd\u8c61\u6a21\u677f\uff09\uff0c\u5b9e\u4f8b\u5316\u4e3a\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u5728\u4e0d\u540c\u914d\u7f6e\u4e0b\u8fdb\u884c\u6df7\u6dc6\u6d4b\u8bd5\u3002\u540c\u65f6\u4ece\u771f\u5b9e\u7a0b\u5e8f\u4e2d\u81ea\u52a8\u63d0\u53d6\u8349\u56fe\uff0c\u652f\u6301\u9879\u76ee\u7279\u5b9a\u529f\u80fd\u7684\u9488\u5bf9\u6027\u6d4b\u8bd5", "result": "\u53d1\u73b0\u4e8611\u4e2a\u5148\u524d\u672a\u77e5\u7684\u6b63\u786e\u6027bug\u3002\u5728\u76f8\u540c\u7a0b\u5e8f\u9884\u7b97\u4e0b\uff0c\u4e94\u4e2a\u6700\u5148\u8fdb\u7684JavaScript\u6a21\u7cca\u6d4b\u8bd5\u5de5\u5177\u90fd\u65e0\u6cd5\u68c0\u6d4b\u5230\u8fd9\u4e9b\u95ee\u9898\u3002\u6d88\u878d\u5b9e\u9a8c\u8868\u660e\u9664\u901a\u7528\u5143\u6001\u5173\u7cfb\u5916\uff0c\u6240\u6709\u7ec4\u4ef6\u90fd\u5bf9\u81f3\u5c11\u4e00\u4e2abug\u7c7b\u6709\u8d21\u732e", "conclusion": "OBsmith\u662f\u81ea\u52a8\u5316\u6d4b\u8bd5\u6df7\u6dc6\u5668\u548c\u5176\u4ed6\u8bed\u4e49\u4fdd\u6301\u5de5\u5177\u94fe\u8d28\u91cf\u4fdd\u8bc1\u7684\u91cd\u8981\u4e00\u6b65\uff0c\u7ed3\u679c\u8fd8\u5f15\u53d1\u4e86\u5173\u4e8e\u5982\u4f55\u5e73\u8861\u6df7\u6dc6\u9884\u8bbe\u548c\u6027\u80fd\u6210\u672c\u7684\u8ba8\u8bba"}}
{"id": "2510.11199", "pdf": "https://arxiv.org/pdf/2510.11199", "abs": "https://arxiv.org/abs/2510.11199", "authors": ["Kaustuv Chaudhuri", "Daniele Nantes-Sobrinho"], "title": "Proceedings Twentieth International Workshop on Logical Frameworks and Meta-Languages: Theory and Practice", "categories": ["cs.LO", "cs.PL"], "comment": null, "summary": "These are the contributed papers presented at the 20th International Workshop\non Logical Frameworks and Meta-Languages: Theory and Practice (LFMTP 2025), at\nBirmingham, UK on 19 July as a satellite event of the FSCD conference. The\nprogram committee for this edition of LFMTP was chaired by Kaustuv Chaudhuri\nand Daniele Nantes-Sobrinho. More information about LFMTP can be found on\nhttps://lfmtp.org.", "AI": {"tldr": "LFMTP 2025\u56fd\u9645\u7814\u8ba8\u4f1a\u8bba\u6587\u96c6\uff0c\u5305\u542b\u903b\u8f91\u6846\u67b6\u548c\u5143\u8bed\u8a00\u7406\u8bba\u4e0e\u5b9e\u8df5\u7684\u8d21\u732e\u8bba\u6587", "motivation": "\u4fc3\u8fdb\u903b\u8f91\u6846\u67b6\u548c\u5143\u8bed\u8a00\u9886\u57df\u7684\u7814\u7a76\u4ea4\u6d41\u4e0e\u53d1\u5c55", "method": "\u4f5c\u4e3aFSCD\u4f1a\u8bae\u7684\u536b\u661f\u6d3b\u52a8\uff0c\u901a\u8fc7\u5b66\u672f\u7814\u8ba8\u4f1a\u5f62\u5f0f\u7ec4\u7ec7\u8bba\u6587\u5c55\u793a\u548c\u8ba8\u8bba", "result": "\u6c47\u96c6\u4e86\u8be5\u9886\u57df\u7684\u6700\u65b0\u7814\u7a76\u6210\u679c\uff0c\u4e3a\u7814\u7a76\u8005\u63d0\u4f9b\u4e86\u4ea4\u6d41\u5e73\u53f0", "conclusion": "LFMTP 2025\u6210\u529f\u4e3e\u529e\u4e86\u7b2c20\u5c4a\u56fd\u9645\u7814\u8ba8\u4f1a\uff0c\u63a8\u52a8\u4e86\u903b\u8f91\u6846\u67b6\u548c\u5143\u8bed\u8a00\u9886\u57df\u7684\u53d1\u5c55"}}
