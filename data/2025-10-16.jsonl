{"id": "2510.13082", "pdf": "https://arxiv.org/pdf/2510.13082", "abs": "https://arxiv.org/abs/2510.13082", "authors": ["Mark Koch", "Agust√≠n Borgna", "Craig Roy", "Alan Lawrence", "Kartik Singhal", "Seyon Sivarajah", "Ross Duncan"], "title": "Imperative Quantum Programming with Ownership and Borrowing in Guppy", "categories": ["cs.PL", "cs.SE", "quant-ph"], "comment": "Presented at the Fifth International Workshop on Programming\n  Languages for Quantum Computing (PLanQC 2025)", "summary": "Linear types enforce no-cloning and no-deleting theorems in functional\nquantum programming. However, in imperative quantum programming, they have not\ngained widespread adoption. This work aims to develop a quantum type system\nthat combines ergonomic linear typing with imperative semantics and maintains\nsafety guarantees. All ideas presented here have been implemented in\nQuantinuum's Guppy programming language."}
{"id": "2510.13236", "pdf": "https://arxiv.org/pdf/2510.13236", "abs": "https://arxiv.org/abs/2510.13236", "authors": ["Sebastian mateos Nicolajsen"], "title": "Extensibility in Programming Languages: An overview", "categories": ["cs.PL"], "comment": null, "summary": "I here conduct an exploration of programming language extensibility, making\nan argument for an often overlooked component of conventional language design.\nNow, this is not a technical detailing of these components, rather, I attempt\nto provide an overview as I myself have lacked during my time investigating\nprogramming languages. Thus, read this as an introduction to the magical world\nof extensibility. Through a literature review, I identify key extensibility\nthemes - Macros, Modules, Types, and Reflection - highlighting diverse\nstrategies for fostering extensibility. The analysis extends to cross-theme\nproperties such as Parametricism and First-class citizen behaviour, introducing\nlayers of complexity by highlighting the importance of customizability and\nflexibility in programming language constructs. By outlining these facets of\nexisting programming languages and research, I aim to inspire future language\ndesigners to assess and consider the extensibility of their creations\ncritically."}
{"id": "2510.13426", "pdf": "https://arxiv.org/pdf/2510.13426", "abs": "https://arxiv.org/abs/2510.13426", "authors": ["Sehyeok Park", "Santosh Nagarakatte"], "title": "Fast Trigonometric Functions using the RLIBM Approach", "categories": ["cs.PL"], "comment": "In Proceedings VSS 2025, arXiv:2510.12314", "summary": "This paper describes our experience developing polynomial approximations for\ntrigonometric functions that produce correctly rounded results for multiple\nrepresentations and rounding modes using the RLIBM approach. A key challenge\nwith trigonometric functions concerns range reduction with \"pi\", which reduces\na given input in the domain of a 32-bit float to a small domain. Any rounding\nerror in the value of \"pi\" is amplified during range reduction, which can\nresult in wrong results. We describe our experience implementing fast range\nreduction techniques that maintain a large number of bits of \"pi\" both with\nfloating-point and integer computations. The resulting implementations for\ntrigonometric functions are fast and produce correctly rounded results for all\ninputs for multiple representations up to 32-bits with a single implementation."}
{"id": "2510.13725", "pdf": "https://arxiv.org/pdf/2510.13725", "abs": "https://arxiv.org/abs/2510.13725", "authors": ["Celia Mengyue Li", "Sophie Pull", "Steven Ramsay"], "title": "A Complementary Approach to Incorrectness Typing", "categories": ["cs.PL"], "comment": "Version conditionally accepted to POPL'26, with reviewer suggestions\n  incorporated", "summary": "We introduce a new two-sided type system for verifying the correctness and\nincorrectness of functional programs with atoms and pattern matching. A key\nidea in the work is that types should range over sets of normal forms, rather\nthan sets of values, and this allows us to define a complement operator on\ntypes that acts as a negation on typing formulas. We show that the complement\nallows us to derive a wide range of refutation principles within the system,\nincluding the type-theoretic analogue of co-implication, and we use them to\ncertify that a number of Erlang-like programs go wrong. An expressive\naxiomatisation of the complement operator via subtyping is shown decidable, and\nthe type system as a whole is shown to be not only sound, but also complete for\nnormal forms."}
{"id": "2510.12803", "pdf": "https://arxiv.org/pdf/2510.12803", "abs": "https://arxiv.org/abs/2510.12803", "authors": ["Shang Zhou", "Zihan Zheng", "Kaiyuan Liu", "Zeyu Shen", "Zerui Cheng", "Zexing Chen", "Hansen He", "Jianzhu Yao", "Huanzhi Mao", "Qiuyang Mang", "Tianfu Fu", "Beichen Li", "Dongruixuan Li", "Wenhao Chai", "Zhuang Liu", "Aleksandra Korolova", "Peter Henderson", "Natasha Jaques", "Pramod Viswanath", "Saining Xie", "Jingbo Shang"], "title": "AutoCode: LLMs as Problem Setters for Competitive Programming", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.PL"], "comment": "Project page: https://livecodebenchpro.com/projects/autocode/overview", "summary": "Writing competitive programming problems is exacting. Authors must: set\nconstraints, input distributions, and edge cases that rule out shortcuts;\ntarget specific algorithms (e.g., max-flow, dynamic programming, data\nstructures); and calibrate complexity beyond the reach of most competitors. We\nargue that this makes for an ideal test of general large language model\ncapabilities and study whether they can do this reliably. We introduce\nAutoCode, which uses multiple rounds of validation to yield competition-grade\nproblem statements and test cases. On held-out problems, AutoCode test suites\napproach 99% consistency with official judgments, a significant improvement\nover current state-of-the-art methods like HardTests, which achieve less than\n81%. Furthermore, starting with a random seed problem, AutoCode can create\nnovel variants with reference and brute-force solutions. By cross-verifying\nthese generated solutions against test cases, we can further filter out\nmalformed problems. Our system ensures high correctness, as verified by human\nexperts. AutoCode successfully produces novel problems judged by\nGrandmaster-level (top 0.3%) competitive programmers to be of contest quality."}
