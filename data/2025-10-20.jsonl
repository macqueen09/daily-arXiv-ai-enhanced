{"id": "2510.15178", "pdf": "https://arxiv.org/pdf/2510.15178", "abs": "https://arxiv.org/abs/2510.15178", "authors": ["Brysen Pfingsten", "Jason Hemann"], "title": "Visualizing miniKanren Search with a Fine-Grained Small-Step Semantics", "categories": ["cs.PL"], "comment": "2025 miniKanren Workshop", "summary": "We present a deterministic small-step operational semantics for miniKanren\nthat explicitly represents the evolving search tree during execution. This\nsemantics models interleaving and goal scheduling at fine granularity, allowing\neach evaluation step-goal activation, suspension, resumption, and success -- to\nbe visualized precisely. Building on this model, we implement an interactive\nvisualizer that renders the search tree as it develops and lets users step\nthrough execution. The tool acts as a pedagogical notional machine for\nreasoning about miniKanren's fair search behavior, helping users understand\nsurprising answer orders and operational effects. Our semantics and tool are\nvalidated through property-based testing and illustrated with several examples."}
{"id": "2510.15747", "pdf": "https://arxiv.org/pdf/2510.15747", "abs": "https://arxiv.org/abs/2510.15747", "authors": ["Ehud Shapiro"], "title": "Grassroots Logic Programs: A Secure, Multiagent, Concurrent, Logic Programming Language", "categories": ["cs.PL", "cs.CR", "cs.DC", "cs.LO", "cs.MA"], "comment": null, "summary": "Grassroots platforms are distributed applications run by\\linebreak\ncryptographically-identified people on their networked personal devices, where\nmultiple disjoint platform instances emerge independently and coalesce when\nthey interoperate. Their foundation is the grassroots social graph, upon which\ngrassroots social networks, grassroots cryptocurrencies, and grassroots\ndemocratic federations can be built.\n  Grassroots platforms have yet to be implemented, the key challenge being\nfaulty and malicious participants: without secure programming support, correct\nparticipants cannot reliably identify each other, establish secure\ncommunication, or verify each other's code integrity.\n  We present Grassroots Logic Programs (GLP), a secure, multiagent, concurrent,\nlogic programming language for implementing grassroots platforms. GLP extends\nlogic programs with paired single-reader/single-writer (SRSW) logic variables,\nproviding secure communication channels among cryptographically-identified\npeople through encrypted, signed and attested messages, which enable identity\nand code integrity verification. We present GLP progressively: logic programs,\nconcurrent GLP, multiagent GLP, augmenting it with cryptographic security, and\nproviding smartphone implementation-ready specifications. We prove safety\nproperties including that GLP computations are deductions, SRSW preservation,\nacyclicity, and monotonicity. We prove multiagent GLP is grassroots and that\nGLP streams achieve blockchain security properties. We present a grassroots\nsocial graph protocol establishing authenticated peer-to-peer connections and\ndemonstrate secure grassroots social networking applications."}
{"id": "2510.15585", "pdf": "https://arxiv.org/pdf/2510.15585", "abs": "https://arxiv.org/abs/2510.15585", "authors": ["Dr Simon Thorne", "Dr Advait Sarkar"], "title": "Leveraging Test Driven Development with Large Language Models for Reliable and Verifiable Spreadsheet Code Generation: A Research Framework", "categories": ["cs.SE", "cs.CL", "cs.PL", "F.2.2; I.2.7"], "comment": "16 pages", "summary": "Large Language Models (LLMs), such as ChatGPT, are increasingly leveraged for\ngenerating both traditional software code and spreadsheet logic. Despite their\nimpressive generative capabilities, these models frequently exhibit critical\nissues such as hallucinations, subtle logical inconsistencies, and syntactic\nerrors, risks particularly acute in high stakes domains like financial\nmodelling and scientific computations, where accuracy and reliability are\nparamount. This position paper proposes a structured research framework that\nintegrates the proven software engineering practice of Test-Driven Development\n(TDD) with Large Language Model (LLM) driven generation to enhance the\ncorrectness of, reliability of, and user confidence in generated outputs. We\nhypothesise that a \"test first\" methodology provides both technical constraints\nand cognitive scaffolding, guiding LLM outputs towards more accurate,\nverifiable, and comprehensible solutions. Our framework, applicable across\ndiverse programming contexts, from spreadsheet formula generation to scripting\nlanguages such as Python and strongly typed languages like Rust, includes an\nexplicitly outlined experimental design with clearly defined participant\ngroups, evaluation metrics, and illustrative TDD based prompting examples. By\nemphasising test driven thinking, we aim to improve computational thinking,\nprompt engineering skills, and user engagement, particularly benefiting\nspreadsheet users who often lack formal programming training yet face serious\nconsequences from logical errors. We invite collaboration to refine and\nempirically evaluate this approach, ultimately aiming to establish responsible\nand reliable LLM integration in both educational and professional development\npractices."}
{"id": "2510.15700", "pdf": "https://arxiv.org/pdf/2510.15700", "abs": "https://arxiv.org/abs/2510.15700", "authors": ["Alex Gu", "Bartosz Piotrowski", "Fabian Gloeckle", "Kaiyu Yang", "Aram H. Markosyan"], "title": "ProofOptimizer: Training Language Models to Simplify Proofs without Human Demonstrations", "categories": ["cs.LG", "cs.AI", "cs.PL"], "comment": "52 pages, 16 figures, website: http://proof-optimizer.github.io/", "summary": "Neural theorem proving has advanced rapidly in the past year, reaching IMO\ngold-medalist capabilities and producing formal proofs that span thousands of\nlines. Although such proofs are mechanically verified by formal systems like\nLean, their excessive length renders them difficult for humans to comprehend\nand limits their usefulness for mathematical insight. Proof simplification is\ntherefore a critical bottleneck. Yet, training data for this task is scarce,\nand existing methods -- mainly agentic scaffolding with off-the-shelf LLMs --\nstruggle with the extremely long proofs generated by RL-trained provers. We\nintroduce ProofOptimizer, the first language model trained to simplify Lean\nproofs without requiring additional human supervision. ProofOptimizer is\ntrained via expert iteration and reinforcement learning, using Lean to verify\nsimplifications and provide training signal. At inference time, it operates\nwithin an iterative proof-shortening workflow, progressively reducing proof\nlength. Experiments show that ProofOptimizer substantially compresses proofs\ngenerated by state-of-the-art RL-trained provers on standard benchmarks,\nreducing proof length by 87% on miniF2F, 57% on PutnamBench, and 49% on\nSeed-Prover's IMO 2025 proofs. Beyond conciseness, the simplified proofs check\nfaster in Lean and further improve downstream prover performance when reused as\ntraining data for supervised finetuning."}
