{"id": "2510.15912", "pdf": "https://arxiv.org/pdf/2510.15912", "abs": "https://arxiv.org/abs/2510.15912", "authors": ["Jack Cashman"], "title": "Latency Based Tiling", "categories": ["cs.PL", "cs.AR", "cs.PF"], "comment": null, "summary": "Latency Based Tiling provides a systems based approach to deriving\napproximate tiling solution that maximizes locality while maintaining a fast\ncompile time. The method uses triangular loops to characterize miss ratio\nscaling of a machine avoiding prefetcher distortion. Miss ratio scaling\ncaptures the relationship between data access latency and working set size with\nsharp increases in latency indicating the data footprint exceeds capacity from\na cache level. Through these noticeable increases in latency we can determine\nan approximate location for L1, L2, and L3 memory sizes. These sizes are\nexpected to be under approximations of a systems true memory sizes which is in\nline with our expectations given the shared nature of cache in a multi process\nsystem as described in defensive loop tiling. Unlike auto tuning, which can be\neffective but prohibitively slow, Latency Based Tiling achieves negligible\ncompile time overhead. The implementation in Rust enables a hardware agnostic\napproach which combined with a cache timing based techniques, yields a\nportable, memory safe system running wherever Rust is supported. The tiling\nstrategy is applied to a subset of the polyhedral model, where loop nestings\nare tiled based on both the derived memory hierarchy and the observed data\nfootprint per iteration.", "AI": {"tldr": "Latency Based Tiling \u662f\u4e00\u79cd\u7cfb\u7edf\u65b9\u6cd5\uff0c\u901a\u8fc7\u4e09\u89d2\u5faa\u73af\u8868\u5f81\u673a\u5668\u5931\u914d\u7387\u7f29\u653e\u6765\u63a8\u5bfc\u8fd1\u4f3c\u5206\u5757\u89e3\uff0c\u5728\u4fdd\u6301\u5feb\u901f\u7f16\u8bd1\u65f6\u95f4\u7684\u540c\u65f6\u6700\u5927\u5316\u5c40\u90e8\u6027\u3002", "motivation": "\u89e3\u51b3\u4f20\u7edf\u81ea\u52a8\u8c03\u4f18\u65b9\u6cd5\u867d\u7136\u6709\u6548\u4f46\u7f16\u8bd1\u65f6\u95f4\u8fc7\u957f\u7684\u95ee\u9898\uff0c\u63d0\u4f9b\u4e00\u79cd\u786c\u4ef6\u65e0\u5173\u7684\u5feb\u901f\u5206\u5757\u7b56\u7565\u3002", "method": "\u4f7f\u7528\u4e09\u89d2\u5faa\u73af\u907f\u514d\u9884\u53d6\u5668\u5931\u771f\uff0c\u901a\u8fc7\u5931\u914d\u7387\u7f29\u653e\u6355\u6349\u6570\u636e\u8bbf\u95ee\u5ef6\u8fdf\u4e0e\u5de5\u4f5c\u96c6\u5927\u5c0f\u7684\u5173\u7cfb\uff0c\u6839\u636e\u5ef6\u8fdf\u663e\u8457\u589e\u52a0\u786e\u5b9aL1\u3001L2\u3001L3\u7f13\u5b58\u5927\u5c0f\u7684\u8fd1\u4f3c\u4f4d\u7f6e\u3002", "result": "\u5b9e\u73b0\u4e86\u53ef\u5ffd\u7565\u7684\u7f16\u8bd1\u65f6\u95f4\u5f00\u9500\uff0c\u5728Rust\u4e2d\u5b9e\u73b0\u786c\u4ef6\u65e0\u5173\u65b9\u6cd5\uff0c\u7ed3\u5408\u7f13\u5b58\u8ba1\u65f6\u6280\u672f\uff0c\u5728\u652f\u6301Rust\u7684\u4efb\u4f55\u5730\u65b9\u63d0\u4f9b\u53ef\u79fb\u690d\u3001\u5185\u5b58\u5b89\u5168\u7684\u7cfb\u7edf\u3002", "conclusion": "\u8be5\u65b9\u6cd5\u5728\u591a\u9762\u4f53\u6a21\u578b\u7684\u5b50\u96c6\u4e2d\u5e94\u7528\u5206\u5757\u7b56\u7565\uff0c\u57fa\u4e8e\u63a8\u5bfc\u7684\u5185\u5b58\u5c42\u6b21\u7ed3\u6784\u548c\u89c2\u5bdf\u5230\u7684\u6bcf\u6b21\u8fed\u4ee3\u6570\u636e\u8db3\u8ff9\u8fdb\u884c\u5faa\u73af\u5d4c\u5957\u5206\u5757\uff0c\u63d0\u4f9b\u4e86\u4e00\u79cd\u9ad8\u6548\u7684\u8fd1\u4f3c\u5206\u5757\u89e3\u51b3\u65b9\u6848\u3002"}}
{"id": "2510.16133", "pdf": "https://arxiv.org/pdf/2510.16133", "abs": "https://arxiv.org/abs/2510.16133", "authors": ["Daniel Sainati", "Joseph W. Cutler", "Benjamin C. Pierce", "Stephanie Weirich"], "title": "Typing Strictness (Extended Version)", "categories": ["cs.PL"], "comment": "30 pages, 22 figures, extended version of a paper to be published at\n  POPL 2026", "summary": "Strictness analysis is critical to efficient implementation of languages with\nnon-strict evaluation, mitigating much of the performance overhead of laziness.\nHowever, reasoning about strictness at the source level can be challenging and\nunintuitive. We propose a new definition of strictness that refines the\ntraditional one by describing variable usage more precisely. We lay\ntype-theoretic foundations for this definition in both call-by-name and\ncall-by-push-value settings, drawing inspiration from the literature on type\nsystems tracking effects and coeffects. We prove via a logical relation that\nthe strictness attributes computed by our type systems accurately describe the\nuse of variables at runtime, and we offer a strictness-annotation-preserving\ntranslation from the call-by-name system to the call-by-push-value one. All our\nresults are mechanized in Rocq.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u4e25\u683c\u6027\u5b9a\u4e49\uff0c\u901a\u8fc7\u66f4\u7cbe\u786e\u5730\u63cf\u8ff0\u53d8\u91cf\u4f7f\u7528\u6765\u6539\u8fdb\u4f20\u7edf\u5b9a\u4e49\uff0c\u5728\u6309\u540d\u8c03\u7528\u548c\u6309\u503c\u63a8\u9001\u8c03\u7528\u8bbe\u7f6e\u4e2d\u5efa\u7acb\u4e86\u7c7b\u578b\u7406\u8bba\u57fa\u7840\uff0c\u5e76\u901a\u8fc7\u903b\u8f91\u5173\u7cfb\u8bc1\u660e\u4e25\u683c\u6027\u5c5e\u6027\u51c6\u786e\u63cf\u8ff0\u4e86\u8fd0\u884c\u65f6\u53d8\u91cf\u4f7f\u7528\u3002", "motivation": "\u4e25\u683c\u6027\u5206\u6790\u5bf9\u4e8e\u975e\u4e25\u683c\u6c42\u503c\u8bed\u8a00\u7684\u9ad8\u6548\u5b9e\u73b0\u81f3\u5173\u91cd\u8981\uff0c\u4f46\u6e90\u7ea7\u522b\u7684\u4e25\u683c\u6027\u63a8\u7406\u5177\u6709\u6311\u6218\u6027\u548c\u53cd\u76f4\u89c9\u6027\u3002\u9700\u8981\u66f4\u7cbe\u786e\u7684\u4e25\u683c\u6027\u5b9a\u4e49\u6765\u6539\u8fdb\u4f20\u7edf\u65b9\u6cd5\u3002", "method": "\u5728\u6309\u540d\u8c03\u7528\u548c\u6309\u503c\u63a8\u9001\u8c03\u7528\u8bbe\u7f6e\u4e2d\u5efa\u7acb\u7c7b\u578b\u7406\u8bba\u57fa\u7840\uff0c\u501f\u9274\u8ddf\u8e2a\u6548\u679c\u548c\u5171\u6548\u679c\u7684\u7c7b\u578b\u7cfb\u7edf\u6587\u732e\uff0c\u4f7f\u7528\u903b\u8f91\u5173\u7cfb\u8bc1\u660e\u4e25\u683c\u6027\u5c5e\u6027\u7684\u51c6\u786e\u6027\uff0c\u5e76\u63d0\u4f9b\u4e25\u683c\u6027\u6ce8\u91ca\u4fdd\u7559\u7684\u7ffb\u8bd1\u3002", "result": "\u5f00\u53d1\u4e86\u65b0\u7684\u4e25\u683c\u6027\u5b9a\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\uff0c\u80fd\u591f\u66f4\u7cbe\u786e\u5730\u63cf\u8ff0\u53d8\u91cf\u4f7f\u7528\uff0c\u5e76\u901a\u8fc7\u903b\u8f91\u5173\u7cfb\u9a8c\u8bc1\u4e86\u8fd0\u884c\u65f6\u884c\u4e3a\u7684\u51c6\u786e\u6027\u3002", "conclusion": "\u63d0\u51fa\u7684\u4e25\u683c\u6027\u5b9a\u4e49\u548c\u7c7b\u578b\u7cfb\u7edf\u4e3a\u4e25\u683c\u6027\u5206\u6790\u63d0\u4f9b\u4e86\u66f4\u7cbe\u786e\u7684\u7406\u8bba\u57fa\u7840\uff0c\u6240\u6709\u7ed3\u679c\u90fd\u5728Rocq\u4e2d\u673a\u68b0\u5316\u9a8c\u8bc1\u3002"}}
{"id": "2510.16594", "pdf": "https://arxiv.org/pdf/2510.16594", "abs": "https://arxiv.org/abs/2510.16594", "authors": ["Moida Praneeth Jain", "Venkatesh Choppella"], "title": "SimpliPy: A Source-Tracking Notional Machine for Simplified Python", "categories": ["cs.PL", "F.3.2; F.1.1"], "comment": "15 pages, 1 figure, 1 table. Accepted at the 4th Workshop on Research\n  Highlights in Programming Languages (RHPL 2025), co-located with FSTTCS 2025.\n  Code available at: https://github.com/PraneethJain/simplipy", "summary": "Misconceptions about program execution hinder many novice programmers. We\nintroduce SimpliPy, a notional machine designed around a carefully chosen\nPython subset to clarify core control flow and scoping concepts. Its foundation\nis a precise operational semantics that explicitly tracks source code line\nnumbers for each execution step, making the link between code and behavior\nunambiguous. Complementing the dynamic semantics, SimpliPy uses static analysis\nto generate Control Flow Graphs (CFGs) and identify lexical scopes, helping\nstudents build a structural understanding before tracing. We also present an\ninteractive web-based debugger built on these principles. This tool embodies\nthe formal techniques, visualizing the operational state (environments, stack)\nand using the static CFG to animate control flow directly on the graph during\nstep-by-step execution. SimpliPy thus integrates formal semantics, program\nanalysis, and visualization to offer both a pedagogical approach and a\npractical demonstration of applying formal methods to program understanding.", "AI": {"tldr": "SimpliPy\u662f\u4e00\u4e2a\u4e3aPython\u5b50\u96c6\u8bbe\u8ba1\u7684\u6559\u5b66\u6027\u6982\u5ff5\u673a\u5668\uff0c\u901a\u8fc7\u7cbe\u786e\u7684\u64cd\u4f5c\u8bed\u4e49\u548c\u9759\u6001\u5206\u6790\u6765\u6f84\u6e05\u7a0b\u5e8f\u6267\u884c\u4e2d\u7684\u63a7\u5236\u6d41\u548c\u4f5c\u7528\u57df\u6982\u5ff5\uff0c\u5e76\u63d0\u4f9b\u4e86\u57fa\u4e8eWeb\u7684\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u5668\u6765\u53ef\u89c6\u5316\u6267\u884c\u8fc7\u7a0b\u3002", "motivation": "\u89e3\u51b3\u65b0\u624b\u7a0b\u5e8f\u5458\u5bf9\u7a0b\u5e8f\u6267\u884c\u7684\u8bef\u89e3\uff0c\u7279\u522b\u662f\u63a7\u5236\u6d41\u548c\u4f5c\u7528\u57df\u7b49\u6838\u5fc3\u6982\u5ff5\u7684\u7406\u89e3\u56f0\u96be\u3002", "method": "\u8bbe\u8ba1SimpliPy\u6982\u5ff5\u673a\u5668\uff0c\u5305\u542b\u7cbe\u786e\u7684\u64cd\u4f5c\u8bed\u4e49\uff08\u663e\u5f0f\u8ddf\u8e2a\u6e90\u4ee3\u7801\u884c\u53f7\uff09\u3001\u9759\u6001\u5206\u6790\u751f\u6210\u63a7\u5236\u6d41\u56fe(CFG)\u548c\u8bc6\u522b\u8bcd\u6cd5\u4f5c\u7528\u57df\uff0c\u5e76\u5f00\u53d1\u57fa\u4e8eWeb\u7684\u4ea4\u4e92\u5f0f\u8c03\u8bd5\u5668\u6765\u53ef\u89c6\u5316\u6267\u884c\u72b6\u6001\u3002", "result": "\u5f00\u53d1\u4e86\u4e00\u4e2a\u96c6\u6210\u5f62\u5f0f\u8bed\u4e49\u3001\u7a0b\u5e8f\u5206\u6790\u548c\u53ef\u89c6\u5316\u7684\u6559\u5b66\u5de5\u5177\uff0c\u80fd\u591f\u6e05\u6670\u5730\u5c55\u793a\u4ee3\u7801\u4e0e\u6267\u884c\u884c\u4e3a\u4e4b\u95f4\u7684\u8054\u7cfb\u3002", "conclusion": "SimpliPy\u6210\u529f\u5730\u5c06\u5f62\u5f0f\u8bed\u4e49\u3001\u7a0b\u5e8f\u5206\u6790\u548c\u53ef\u89c6\u5316\u6280\u672f\u6574\u5408\uff0c\u4e3a\u7a0b\u5e8f\u7406\u89e3\u63d0\u4f9b\u4e86\u6709\u6548\u7684\u6559\u5b66\u65b9\u6cd5\u548c\u5b9e\u9645\u5e94\u7528\u6f14\u793a\u3002"}}
{"id": "2510.16883", "pdf": "https://arxiv.org/pdf/2510.16883", "abs": "https://arxiv.org/abs/2510.16883", "authors": ["Giulia Giusti", "Michele Pagani"], "title": "JAX Autodiff from a Linear Logic Perspective (Extended Version)", "categories": ["cs.PL", "cs.LO"], "comment": null, "summary": "Autodiff refers to the core of the automatic differentiation systems\ndeveloped in projects like JAX and Dex. Autodiff has recently been formalised\nin a linear typed calculus by Radul et al in arXiv:2204.10923. Although this\nformalisation suffices to express the main program transformations of Autodiff,\nthe calculus is very specific to this task, and it is not clear whether the\ntype system yields a substructural logic that has interest on its own.\n  We propose an encoding of Autodiff into a linear $\\lambda$-calculus that\nenjoys a Curry-Howard correspondence with Girard's linear logic. We prove that\nthe encoding is sound both qualitatively (the encoded terms are extensionally\nequivalent to the original ones) and quantitatively (the encoding preserves the\noriginal work cost as described in arXiv:2204.10923). As a byproduct, we show\nthat unzipping, one of the transformations used to implement backpropagation in\nAutodiff, is, in fact, optional.", "AI": {"tldr": "\u672c\u6587\u63d0\u51fa\u4e86\u4e00\u79cd\u5c06Autodiff\u7f16\u7801\u5230\u7ebf\u6027\u03bb\u6f14\u7b97\u7684\u65b9\u6cd5\uff0c\u8be5\u7f16\u7801\u4e0eGirard\u7684\u7ebf\u6027\u903b\u8f91\u5177\u6709Curry-Howard\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e76\u8bc1\u660e\u4e86\u7f16\u7801\u7684\u5b9a\u6027\u548c\u5b9a\u91cf\u6b63\u786e\u6027\u3002", "motivation": "\u73b0\u6709\u7684Autodiff\u5f62\u5f0f\u5316\u867d\u7136\u8db3\u4ee5\u8868\u8fbe\u4e3b\u8981\u7a0b\u5e8f\u53d8\u6362\uff0c\u4f46\u5176\u7c7b\u578b\u7cfb\u7edf\u975e\u5e38\u7279\u5b9a\u4e8e\u8be5\u4efb\u52a1\uff0c\u4e0d\u6e05\u695a\u662f\u5426\u4ea7\u751f\u5177\u6709\u72ec\u7acb\u5174\u8da3\u7684\u5b50\u7ed3\u6784\u903b\u8f91\u3002", "method": "\u5c06Autodiff\u7f16\u7801\u5230\u7ebf\u6027\u03bb\u6f14\u7b97\u4e2d\uff0c\u8be5\u6f14\u7b97\u4e0e\u7ebf\u6027\u903b\u8f91\u5177\u6709Curry-Howard\u5bf9\u5e94\u5173\u7cfb\uff0c\u5e76\u8bc1\u660e\u7f16\u7801\u7684\u5b9a\u6027\u548c\u5b9a\u91cf\u6b63\u786e\u6027\u3002", "result": "\u7f16\u7801\u5728\u5b9a\u6027\u548c\u5b9a\u91cf\u4e0a\u90fd\u662f\u6b63\u786e\u7684\uff0c\u5e76\u4e14\u53d1\u73b0\u53cd\u5411\u4f20\u64ad\u4e2d\u4f7f\u7528\u7684unzipping\u53d8\u6362\u5b9e\u9645\u4e0a\u662f\u53ef\u9009\u7684\u3002", "conclusion": "\u63d0\u51fa\u7684\u7f16\u7801\u65b9\u6cd5\u4e0d\u4ec5\u8fde\u63a5\u4e86Autodiff\u4e0e\u7ebf\u6027\u903b\u8f91\uff0c\u8fd8\u63ed\u793a\u4e86\u5b9e\u73b0\u7ec6\u8282\u4e2d\u7684\u5197\u4f59\uff0c\u4e3a\u81ea\u52a8\u5fae\u5206\u7cfb\u7edf\u63d0\u4f9b\u4e86\u66f4\u7b80\u6d01\u7684\u7406\u8bba\u57fa\u7840\u3002"}}
{"id": "2510.17429", "pdf": "https://arxiv.org/pdf/2510.17429", "abs": "https://arxiv.org/abs/2510.17429", "authors": ["Jin Sano", "Naoki Yamamoto", "Kazunori Ueda"], "title": "Introducing Linear Implication Types to $\u03bb_{GT}$ for Computing With Incomplete Graphs", "categories": ["cs.PL", "D.3.1"], "comment": "26 pages, 14 figures, This paper is submitted to PRO2025-3", "summary": "Designing programming languages that enable intuitive and safe manipulation\nof data structures is a critical research challenge. Conventional destructive\nmemory operations using pointers are complex and prone to errors. Existing type\nsystems, such as affine types and shape types, address this problem towards\nsafe manipulation of heaps and pointers, but design of high-level declarative\nlanguages that allow us to manipulate complex pointer data structures at a\nhigher level of abstraction is largely an open problem. The $\\lambda_{GT}$\nlanguage, a purely functional programming language that treats hypergraphs\n(hereafter referred to as graphs) as primary data structures, addresses some of\nthese challenges. By abstracting data with shared references and cycles as\ngraphs, it enables declarative operations through pattern matching and\nleverages its type system to guarantee safety of these operations.\nNevertheless, the previously proposed type system of $\\lambda_{GT}$ leaves two\nsignificant open challenges. First, the type system does not support\n\\emph{incomplete graphs}, that is, graphs in which some elements are missing\nfrom the graphs of user-defined types. Second, the type system relies on\ndynamic type checking during pattern matching. This study addresses these two\nchallenges by incorporating linear implication into the $\\lambda_{GT}$ type\nsystem, while introducing new constraints to ensure its soundness.", "AI": {"tldr": "\u8be5\u7814\u7a76\u901a\u8fc7\u5728\u7ebf\u6027\u7c7b\u578b\u7cfb\u7edf\u03bb_GT\u4e2d\u5f15\u5165\u7ebf\u6027\u8574\u542b\uff0c\u89e3\u51b3\u4e86\u5bf9\u4e0d\u5b8c\u6574\u56fe\u7684\u652f\u6301\u95ee\u9898\uff0c\u5e76\u6d88\u9664\u4e86\u6a21\u5f0f\u5339\u914d\u4e2d\u7684\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u9700\u6c42\u3002", "motivation": "\u73b0\u6709\u03bb_GT\u8bed\u8a00\u7684\u7c7b\u578b\u7cfb\u7edf\u5b58\u5728\u4e24\u4e2a\u4e3b\u8981\u95ee\u9898\uff1a\u4e0d\u652f\u6301\u4e0d\u5b8c\u6574\u56fe\uff08\u5373\u7528\u6237\u5b9a\u4e49\u7c7b\u578b\u56fe\u4e2d\u7f3a\u5c11\u67d0\u4e9b\u5143\u7d20\u7684\u56fe\uff09\uff0c\u4ee5\u53ca\u5728\u6a21\u5f0f\u5339\u914d\u4e2d\u4f9d\u8d56\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u3002", "method": "\u5728\u03bb_GT\u7c7b\u578b\u7cfb\u7edf\u4e2d\u5f15\u5165\u7ebf\u6027\u8574\u542b\uff0c\u5e76\u6dfb\u52a0\u65b0\u7684\u7ea6\u675f\u6761\u4ef6\u6765\u786e\u4fdd\u7c7b\u578b\u7cfb\u7edf\u7684\u6b63\u786e\u6027\u3002", "result": "\u6210\u529f\u6269\u5c55\u4e86\u03bb_GT\u7c7b\u578b\u7cfb\u7edf\uff0c\u4f7f\u5176\u80fd\u591f\u652f\u6301\u4e0d\u5b8c\u6574\u56fe\uff0c\u540c\u65f6\u6d88\u9664\u4e86\u6a21\u5f0f\u5339\u914d\u4e2d\u7684\u52a8\u6001\u7c7b\u578b\u68c0\u67e5\u9700\u6c42\u3002", "conclusion": "\u901a\u8fc7\u5f15\u5165\u7ebf\u6027\u8574\u542b\u548c\u76f8\u5e94\u7ea6\u675f\uff0c\u663e\u8457\u63d0\u5347\u4e86\u03bb_GT\u8bed\u8a00\u7c7b\u578b\u7cfb\u7edf\u7684\u8868\u8fbe\u80fd\u529b\u548c\u5b89\u5168\u6027\u3002"}}
{"id": "2510.17505", "pdf": "https://arxiv.org/pdf/2510.17505", "abs": "https://arxiv.org/abs/2510.17505", "authors": ["Jaeyeon Won", "Willow Ahrens", "Joel S. Emer", "Saman Amarasinghe"], "title": "Insum: Sparse GPU Kernels Simplified and Optimized with Indirect Einsums", "categories": ["cs.PL", "cs.PF"], "comment": null, "summary": "Programming high-performance sparse GPU kernels is notoriously difficult,\nrequiring both substantial effort and deep expertise. Sparse compilers aim to\nsimplify this process, but existing systems fall short in two key ways. First,\nthey are primarily designed for CPUs and rarely produce high-performance GPU\ncode. Second, when computations involve both sparse and dense regions, these\ncompilers often fail to optimize the dense portions effectively. In this paper,\nwe propose a new approach for expressing sparse computations. We start from\nformat-agnostic Einsums over sparse tensors and rewrite them into\nformat-conscious indirect Einsums, which explicitly encode format information\nby mapping sparse data and metadata onto dense tensor operations through\nindirect indexing. To execute indirect Einsums, we introduce the Insum\ncompiler, which generates efficient GPU code for these Einsums by lowering to\nthe PyTorch compiler, extended to better support Tensor Core-enabled indirect\nEinsums. We also present two fixed-length sparse formats, GroupCOO and\nBlockGroupCOO, designed to fit naturally with indirect Einsums. Our approach\nachieves 1.14x to 3.81x speedups across a range of sparse GPU applications\nwhile reducing lines of code by 202x to 4491x compared to hand-written\nimplementations.", "AI": {"tldr": "\u63d0\u51fa\u4e86\u4e00\u79cd\u65b0\u7684\u7a00\u758f\u8ba1\u7b97\u8868\u8fbe\u65b9\u6cd5\uff0c\u901a\u8fc7\u5c06\u683c\u5f0f\u65e0\u5173\u7684\u7a00\u758f\u5f20\u91cfEinsums\u91cd\u5199\u4e3a\u683c\u5f0f\u611f\u77e5\u7684\u95f4\u63a5Einsums\uff0c\u5e76\u5f00\u53d1Insum\u7f16\u8bd1\u5668\u751f\u6210\u9ad8\u6548GPU\u4ee3\u7801\uff0c\u5728\u7a00\u758fGPU\u5e94\u7528\u4e2d\u5b9e\u73b0\u663e\u8457\u6027\u80fd\u63d0\u5347\u548c\u4ee3\u7801\u7b80\u5316\u3002", "motivation": "\u73b0\u6709\u7a00\u758f\u7f16\u8bd1\u5668\u4e3b\u8981\u9488\u5bf9CPU\u8bbe\u8ba1\uff0c\u96be\u4ee5\u751f\u6210\u9ad8\u6027\u80fdGPU\u4ee3\u7801\uff0c\u4e14\u5728\u7a00\u758f\u548c\u5bc6\u96c6\u6df7\u5408\u8ba1\u7b97\u4e2d\u65e0\u6cd5\u6709\u6548\u4f18\u5316\u5bc6\u96c6\u90e8\u5206\u3002", "method": "\u4ece\u683c\u5f0f\u65e0\u5173\u7684\u7a00\u758f\u5f20\u91cfEinsums\u51fa\u53d1\uff0c\u91cd\u5199\u4e3a\u683c\u5f0f\u611f\u77e5\u7684\u95f4\u63a5Einsums\uff0c\u901a\u8fc7\u95f4\u63a5\u7d22\u5f15\u5c06\u7a00\u758f\u6570\u636e\u548c\u5143\u6570\u636e\u6620\u5c04\u5230\u5bc6\u96c6\u5f20\u91cf\u64cd\u4f5c\uff0c\u5e76\u5f00\u53d1Insum\u7f16\u8bd1\u5668\u751f\u6210GPU\u4ee3\u7801\u3002", "result": "\u5728\u7a00\u758fGPU\u5e94\u7528\u4e2d\u5b9e\u73b01.14x\u52303.81x\u7684\u52a0\u901f\uff0c\u76f8\u6bd4\u624b\u5199\u5b9e\u73b0\u51cf\u5c11202x\u52304491x\u7684\u4ee3\u7801\u884c\u6570\u3002", "conclusion": "\u63d0\u51fa\u7684\u95f4\u63a5Einsums\u65b9\u6cd5\u548cInsum\u7f16\u8bd1\u5668\u80fd\u591f\u6709\u6548\u89e3\u51b3\u7a00\u758fGPU\u8ba1\u7b97\u4e2d\u7684\u6027\u80fd\u4f18\u5316\u548c\u7f16\u7a0b\u590d\u6742\u5ea6\u95ee\u9898\u3002"}}
{"id": "2510.15914", "pdf": "https://arxiv.org/pdf/2510.15914", "abs": "https://arxiv.org/abs/2510.15914", "authors": ["Jiayu Zhao", "Song Chen"], "title": "VeriGRAG: Enhancing LLM-Based Verilog Code Generation with Structure-Aware Soft Prompts", "categories": ["cs.AR", "cs.AI", "cs.PL"], "comment": "9 pages, 5 figures", "summary": "Large language models (LLMs) have demonstrated strong capabilities in\ngenerating Verilog code from natural language descriptions. However, Verilog\ncode inherently encodes structural information of hardware circuits.\nEffectively leveraging this structural information to enhance the functional\nand syntactic correctness of LLM-generated Verilog code remains a significant\nchallenge. To address this challenge, we propose VeriGRAG , a novel framework\nthat extracts structural graph embeddings from Verilog code using graph neural\nnetworks (GNNs). A multimodal retriever then selects the graph embeddings most\nrelevant to the given generation task, which are aligned with the code modality\nthrough the VeriFormer module to generate structure-aware soft prompts. Our\nexperiments demonstrate that VeriGRAG substantially improves the correctness of\nVerilog code generation, achieving state-of-the-art or superior performance\nacross both VerilogEval and RTLLM benchmarks.", "AI": {"tldr": "VeriGRAG\u662f\u4e00\u4e2a\u901a\u8fc7\u56fe\u795e\u7ecf\u7f51\u7edc\u63d0\u53d6Verilog\u4ee3\u7801\u7ed3\u6784\u4fe1\u606f\uff0c\u5e76\u5229\u7528\u591a\u6a21\u6001\u68c0\u7d22\u5668\u9009\u62e9\u76f8\u5173\u56fe\u5d4c\u5165\u6765\u751f\u6210\u7ed3\u6784\u611f\u77e5\u8f6f\u63d0\u793a\u7684\u6846\u67b6\uff0c\u663e\u8457\u63d0\u5347\u4e86LLM\u751f\u6210\u7684Verilog\u4ee3\u7801\u7684\u6b63\u786e\u6027\u3002", "motivation": "Verilog\u4ee3\u7801\u7f16\u7801\u4e86\u786c\u4ef6\u7535\u8def\u7684\u7ed3\u6784\u4fe1\u606f\uff0c\u4f46\u73b0\u6709\u65b9\u6cd5\u672a\u80fd\u6709\u6548\u5229\u7528\u8fd9\u4e9b\u7ed3\u6784\u4fe1\u606f\u6765\u63d0\u5347LLM\u751f\u6210\u7684Verilog\u4ee3\u7801\u7684\u529f\u80fd\u548c\u8bed\u6cd5\u6b63\u786e\u6027\u3002", "method": "\u4f7f\u7528GNN\u63d0\u53d6Verilog\u4ee3\u7801\u7684\u7ed3\u6784\u56fe\u5d4c\u5165\uff0c\u901a\u8fc7\u591a\u6a21\u6001\u68c0\u7d22\u5668\u9009\u62e9\u76f8\u5173\u56fe\u5d4c\u5165\uff0c\u5e76\u901a\u8fc7VeriFormer\u6a21\u5757\u5c06\u5176\u4e0e\u4ee3\u7801\u6a21\u6001\u5bf9\u9f50\u751f\u6210\u7ed3\u6784\u611f\u77e5\u8f6f\u63d0\u793a\u3002", "result": "\u5728VerilogEval\u548cRTLLM\u57fa\u51c6\u6d4b\u8bd5\u4e2d\u5b9e\u73b0\u4e86\u6700\u5148\u8fdb\u6216\u66f4\u4f18\u7684\u6027\u80fd\uff0c\u663e\u8457\u63d0\u9ad8\u4e86Verilog\u4ee3\u7801\u751f\u6210\u7684\u6b63\u786e\u6027\u3002", "conclusion": "VeriGRAG\u6846\u67b6\u901a\u8fc7\u6709\u6548\u5229\u7528Verilog\u4ee3\u7801\u7684\u7ed3\u6784\u4fe1\u606f\uff0c\u6210\u529f\u63d0\u5347\u4e86LLM\u751f\u6210\u4ee3\u7801\u7684\u8d28\u91cf\u548c\u6b63\u786e\u6027\u3002"}}
{"id": "2510.16357", "pdf": "https://arxiv.org/pdf/2510.16357", "abs": "https://arxiv.org/abs/2510.16357", "authors": ["Jugal Gajjar", "Kamalasankari Subramaniakuppusamy"], "title": "MLCPD: A Unified Multi-Language Code Parsing Dataset with Universal AST Schema", "categories": ["cs.SE", "cs.LG", "cs.PL"], "comment": "12 pages, 7 figures, 4 tables, 2 algorithms, and 34 references.\n  HuggingFace:\n  https://huggingface.co/datasets/jugalgajjar/MultiLang-Code-Parser-Dataset\n  GitHub: https://github.com/JugalGajjar/MultiLang-Code-Parser-Dataset", "summary": "We introduce the MultiLang Code Parser Dataset (MLCPD), a large-scale,\nlanguage-agnostic dataset unifying syntactic and structural representations of\ncode across ten major programming languages. MLCPD contains over seven million\nparsed source files normalized under our proposed universal Abstract Syntax\nTree (AST) schema, enabling consistent cross-language reasoning, structural\nlearning, and multilingual software analysis. Unlike existing corpora that\nfocus purely on token-level code or isolated parsers, MLCPD provides both\nhierarchical tree representations and rich metadata for every file, ensuring\nlossless syntactic coverage and structural uniformity. Each entry includes a\nnormalized schema, language-level metadata, and abstracted node semantics\nstored in Parquet format for scalable retrieval. Empirical analyses reveal\nstrong cross-language structural regularities-demonstrating that syntactic\ngraphs from languages as diverse as Python, Java, and Go can be aligned under a\nshared schema. We release the dataset publicly on Hugging Face and the\naccompanying codebase on GitHub, which includes complete pipelines for dataset\nreproduction, grammar compilation, and a visualization tool for exploring the\nunified AST across languages. Together, these resources establish MLCPD as an\nopen, reproducible foundation for future research in cross-language\nrepresentation learning and program analysis.", "AI": {"tldr": "MLCPD\u662f\u4e00\u4e2a\u5927\u89c4\u6a21\u3001\u8bed\u8a00\u65e0\u5173\u7684\u4ee3\u7801\u89e3\u6790\u6570\u636e\u96c6\uff0c\u7edf\u4e00\u4e8610\u79cd\u4e3b\u8981\u7f16\u7a0b\u8bed\u8a00\u7684\u8bed\u6cd5\u548c\u7ed3\u6784\u8868\u793a\uff0c\u5305\u542b\u8d85\u8fc7700\u4e07\u4e2a\u89e3\u6790\u540e\u7684\u6e90\u4ee3\u7801\u6587\u4ef6\uff0c\u91c7\u7528\u7edf\u4e00\u7684\u62bd\u8c61\u8bed\u6cd5\u6811\u6a21\u5f0f\u3002", "motivation": "\u73b0\u6709\u8bed\u6599\u5e93\u4e3b\u8981\u5173\u6ce8\u8bcd\u5143\u7ea7\u4ee3\u7801\u6216\u5b64\u7acb\u89e3\u6790\u5668\uff0c\u7f3a\u4e4f\u7edf\u4e00\u7684\u8de8\u8bed\u8a00\u7ed3\u6784\u8868\u793a\uff0c\u9700\u8981\u5efa\u7acb\u4e00\u4e2a\u80fd\u591f\u652f\u6301\u8de8\u8bed\u8a00\u63a8\u7406\u3001\u7ed3\u6784\u5b66\u4e60\u548c\u591a\u8bed\u8a00\u8f6f\u4ef6\u5206\u6790\u7684\u6570\u636e\u96c6\u3002", "method": "\u63d0\u51fa\u901a\u7528\u62bd\u8c61\u8bed\u6cd5\u6811\u6a21\u5f0f\uff0c\u5bf910\u79cd\u7f16\u7a0b\u8bed\u8a00\u7684\u6e90\u4ee3\u7801\u8fdb\u884c\u89e3\u6790\u548c\u5f52\u4e00\u5316\u5904\u7406\uff0c\u6bcf\u4e2a\u6761\u76ee\u5305\u542b\u5f52\u4e00\u5316\u6a21\u5f0f\u3001\u8bed\u8a00\u7ea7\u5143\u6570\u636e\u548c\u62bd\u8c61\u8282\u70b9\u8bed\u4e49\uff0c\u4ee5Parquet\u683c\u5f0f\u5b58\u50a8\u4fbf\u4e8e\u6269\u5c55\u68c0\u7d22\u3002", "result": "\u7ecf\u9a8c\u5206\u6790\u663e\u793a\u5b58\u5728\u5f3a\u70c8\u7684\u8de8\u8bed\u8a00\u7ed3\u6784\u89c4\u5f8b\u6027\uff0c\u8bc1\u660ePython\u3001Java\u3001Go\u7b49\u4e0d\u540c\u8bed\u8a00\u7684\u8bed\u6cd5\u56fe\u53ef\u4ee5\u5728\u5171\u4eab\u6a21\u5f0f\u4e0b\u5bf9\u9f50\u3002\u6570\u636e\u96c6\u5df2\u5728Hugging Face\u516c\u5f00\u53d1\u5e03\uff0c\u4ee3\u7801\u5e93\u5728GitHub\u4e0a\u63d0\u4f9b\u3002", "conclusion": "MLCPD\u4e3a\u8de8\u8bed\u8a00\u8868\u793a\u5b66\u4e60\u548c\u7a0b\u5e8f\u5206\u6790\u7684\u672a\u6765\u7814\u7a76\u5efa\u7acb\u4e86\u4e00\u4e2a\u5f00\u653e\u3001\u53ef\u590d\u73b0\u7684\u57fa\u7840\u3002"}}
{"id": "2510.16809", "pdf": "https://arxiv.org/pdf/2510.16809", "abs": "https://arxiv.org/abs/2510.16809", "authors": ["Amirkia Rafiei Oskooei", "Kaan Baturalp Cosdan", "Husamettin Isiktas", "Mehmet S. Aktas"], "title": "When Many-Shot Prompting Fails: An Empirical Study of LLM Code Translation", "categories": ["cs.SE", "cs.AI", "cs.CL", "cs.PL", "68T50, 68N30, 68W40", "I.2.7; D.2.7; I.2.6"], "comment": null, "summary": "Large Language Models (LLMs) with vast context windows offer new avenues for\nin-context learning (ICL), where providing many examples (\"many-shot\"\nprompting) is often assumed to enhance performance. We investigate this\nassumption for the complex task of code translation. Through a large-scale\nempirical study of over 90,000 translations, we systematically evaluate the\nimpact of scaling in-context examples from zero-shot to many-shot\nconfigurations of up to 625 examples, with prompts spanning from approximately\n100,000 to 800,000 tokens. Our findings reveal a \"many-shot paradox\": while\nstatic similarity metrics may modestly improve with more examples, functional\ncorrectness consistently peaks with few-shot prompting (5-25 examples).\nProviding substantially more examples often degrades this crucial functional\nperformance. This study highlights that for code translation, the quality of a\nfew well-chosen examples outweighs sheer quantity, challenging the universal\nefficacy of \"more is better\" for ICL and underscoring the task-dependent nature\nof optimal prompting strategies. Our results have significant implications for\neffectively leveraging LLMs in software engineering.", "AI": {"tldr": "\u672c\u6587\u7814\u7a76\u4e86\u4ee3\u7801\u7ffb\u8bd1\u4efb\u52a1\u4e2d\u7684\u591a\u793a\u4f8b\u63d0\u793a\u6548\u679c\uff0c\u53d1\u73b0\u5b58\u5728\"\u591a\u793a\u4f8b\u6096\u8bba\"\uff1a\u867d\u7136\u9759\u6001\u76f8\u4f3c\u5ea6\u6307\u6807\u968f\u793a\u4f8b\u589e\u52a0\u7565\u6709\u63d0\u5347\uff0c\u4f46\u529f\u80fd\u6b63\u786e\u6027\u57285-25\u4e2a\u793a\u4f8b\u65f6\u8fbe\u5230\u5cf0\u503c\uff0c\u66f4\u591a\u793a\u4f8b\u53cd\u800c\u4f1a\u964d\u4f4e\u6027\u80fd\u3002", "motivation": "\u5927\u578b\u8bed\u8a00\u6a21\u578b\u7684\u957f\u4e0a\u4e0b\u6587\u7a97\u53e3\u4e3a\u591a\u793a\u4f8b\u5b66\u4e60\u63d0\u4f9b\u4e86\u65b0\u673a\u4f1a\uff0c\u4f46\u4ee3\u7801\u7ffb\u8bd1\u4efb\u52a1\u4e2d\u591a\u793a\u4f8b\u63d0\u793a\u7684\u6709\u6548\u6027\u5047\u8bbe\u5c1a\u672a\u5f97\u5230\u7cfb\u7edf\u9a8c\u8bc1\u3002", "method": "\u901a\u8fc7\u5927\u89c4\u6a21\u5b9e\u8bc1\u7814\u7a76\uff0c\u8bc4\u4f30\u4e86\u8d85\u8fc790,000\u6b21\u7ffb\u8bd1\uff0c\u7cfb\u7edf\u6d4b\u8bd5\u4e86\u4ece\u96f6\u793a\u4f8b\u5230625\u4e2a\u793a\u4f8b\u7684\u63d0\u793a\u914d\u7f6e\uff0c\u63d0\u793a\u957f\u5ea6\u4ece\u7ea610\u4e07\u523080\u4e07token\u4e0d\u7b49\u3002", "result": "\u7814\u7a76\u53d1\u73b0\u529f\u80fd\u6b63\u786e\u6027\u5728\u5c11\u91cf\u793a\u4f8b\uff085-25\u4e2a\uff09\u65f6\u8fbe\u5230\u6700\u4f73\uff0c\u800c\u63d0\u4f9b\u66f4\u591a\u793a\u4f8b\u4f1a\u964d\u4f4e\u8fd9\u4e00\u5173\u952e\u6027\u80fd\u6307\u6807\u3002", "conclusion": "\u5bf9\u4e8e\u4ee3\u7801\u7ffb\u8bd1\u4efb\u52a1\uff0c\u5c11\u91cf\u7cbe\u5fc3\u9009\u62e9\u7684\u793a\u4f8b\u8d28\u91cf\u6bd4\u6570\u91cf\u66f4\u91cd\u8981\uff0c\u6311\u6218\u4e86\"\u8d8a\u591a\u8d8a\u597d\"\u7684\u901a\u7528\u5047\u8bbe\uff0c\u5f3a\u8c03\u4e86\u6700\u4f18\u63d0\u793a\u7b56\u7565\u7684\u4efb\u52a1\u4f9d\u8d56\u6027\u3002"}}
{"id": "2510.17220", "pdf": "https://arxiv.org/pdf/2510.17220", "abs": "https://arxiv.org/abs/2510.17220", "authors": ["Giulia Giusti"], "title": "Exploiting the Potential of Linearity in Automatic Differentiation and Computational Cryptography", "categories": ["cs.CR", "cs.LO", "cs.PL"], "comment": null, "summary": "The concept of linearity plays a central role in both mathematics and\ncomputer science, with distinct yet complementary meanings. In mathematics,\nlinearity underpins functions and vector spaces, forming the foundation of\nlinear algebra and functional analysis. In computer science, it relates to\nresource-sensitive computation. Linear Logic (LL), for instance, models\nassumptions that must be used exactly once, providing a natural framework for\ntracking computational resources such as time, memory, or data access. This\ndual perspective makes linearity essential to programming languages, type\nsystems, and formal models that express both computational complexity and\ncomposability. Bridging these interpretations enables rigorous yet practical\nmethodologies for analyzing and verifying complex systems.\n  This thesis explores the use of LL to model programming paradigms based on\nlinearity. It comprises two parts: ADLL and CryptoBLL. The former applies LL to\nAutomatic Differentiation (AD), modeling linear functions over the reals and\nthe transposition operation. The latter uses LL to express complexity\nconstraints on adversaries in computational cryptography.\n  In AD, two main approaches use linear type systems: a theoretical one\ngrounded in proof theory, and a practical one implemented in JAX, a Python\nlibrary developed by Google for machine learning research. In contrast,\nframeworks like PyTorch and TensorFlow support AD without linear types. ADLL\naims to bridge theory and practice by connecting JAX's type system to LL.\n  In modern cryptography, several calculi aim to model cryptographic proofs\nwithin the computational paradigm. These efforts face a trade-off between\nexpressiveness, to capture reductions, and simplicity, to abstract probability\nand complexity. CryptoBLL addresses this tension by proposing a framework for\nthe automatic analysis of protocols in computational cryptography.", "AI": {"tldr": "\u8be5\u8bba\u6587\u63a2\u8ba8\u4e86\u7ebf\u6027\u903b\u8f91\u5728\u7f16\u7a0b\u8303\u5f0f\u4e2d\u7684\u5e94\u7528\uff0c\u5206\u4e3aADLL\u548cCryptoBLL\u4e24\u90e8\u5206\uff0c\u5206\u522b\u5e94\u7528\u4e8e\u81ea\u52a8\u5fae\u5206\u548c\u8ba1\u7b97\u5bc6\u7801\u5b66\u9886\u57df\u3002", "motivation": "\u7ebf\u6027\u6982\u5ff5\u5728\u6570\u5b66\u548c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u5177\u6709\u4e92\u8865\u4f46\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u6570\u5b66\u4e2d\u652f\u6491\u51fd\u6570\u548c\u5411\u91cf\u7a7a\u95f4\uff0c\u8ba1\u7b97\u673a\u79d1\u5b66\u4e2d\u6d89\u53ca\u8d44\u6e90\u654f\u611f\u8ba1\u7b97\u3002\u7ebf\u6027\u903b\u8f91\u80fd\u591f\u5efa\u6a21\u5fc5\u987b\u6070\u597d\u4f7f\u7528\u4e00\u6b21\u7684\u5047\u8bbe\uff0c\u4e3a\u8ddf\u8e2a\u8ba1\u7b97\u8d44\u6e90\u63d0\u4f9b\u81ea\u7136\u6846\u67b6\u3002", "method": "ADLL\u90e8\u5206\u5c06\u7ebf\u6027\u903b\u8f91\u5e94\u7528\u4e8e\u81ea\u52a8\u5fae\u5206\uff0c\u5efa\u6a21\u5b9e\u6570\u4e0a\u7684\u7ebf\u6027\u51fd\u6570\u548c\u8f6c\u7f6e\u64cd\u4f5c\uff1bCryptoBLL\u90e8\u5206\u4f7f\u7528\u7ebf\u6027\u903b\u8f91\u8868\u8fbe\u8ba1\u7b97\u5bc6\u7801\u5b66\u4e2d\u5bf9\u624b\u7684\u590d\u6742\u6027\u7ea6\u675f\u3002", "result": "ADLL\u65e8\u5728\u901a\u8fc7\u5c06JAX\u7684\u7c7b\u578b\u7cfb\u7edf\u4e0e\u7ebf\u6027\u903b\u8f91\u8fde\u63a5\u6765\u5f25\u5408\u7406\u8bba\u4e0e\u5b9e\u8df5\u7684\u5dee\u8ddd\uff1bCryptoBLL\u63d0\u51fa\u4e86\u4e00\u4e2a\u7528\u4e8e\u8ba1\u7b97\u5bc6\u7801\u5b66\u4e2d\u534f\u8bae\u81ea\u52a8\u5206\u6790\u7684\u6846\u67b6\u3002", "conclusion": "\u901a\u8fc7\u7ebf\u6027\u903b\u8f91\u7684\u5e94\u7528\uff0c\u8be5\u8bba\u6587\u4e3a\u5206\u6790\u590d\u6742\u7cfb\u7edf\u63d0\u4f9b\u4e86\u4e25\u8c28\u800c\u5b9e\u7528\u7684\u65b9\u6cd5\uff0c\u7279\u522b\u662f\u5728\u81ea\u52a8\u5fae\u5206\u548c\u8ba1\u7b97\u5bc6\u7801\u5b66\u9886\u57df\u3002"}}
