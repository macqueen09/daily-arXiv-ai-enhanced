{"id": "2510.25112", "pdf": "https://arxiv.org/pdf/2510.25112", "abs": "https://arxiv.org/abs/2510.25112", "authors": ["Di Zhang"], "title": "The Singularity Theory of Concurrent Programs: A Topological Characterization and Detection of Deadlocks and Livelocks", "categories": ["cs.PL", "cs.DC", "cs.LO", "math.AT", "68Q85, 55P99, 68N30, 55U10", "D.2.4; F.3.1; D.1.3; F.1.2"], "comment": "10 pages", "summary": "This paper introduces a novel paradigm for the analysis and verification of\nconcurrent programs -- the Singularity Theory. We model the execution space of\na concurrent program as a branched topological space, where program states are\npoints and state transitions are paths. Within this framework, we characterize\ndeadlocks as attractors and livelocks as non-contractible loops in the\nexecution space. By employing tools from algebraic topology, particularly\nhomotopy and homology groups, we define a series of concurrent topological\ninvariants to systematically detect and classify these concurrent\n\"singularities\" without exhaustively traversing all states. This work aims to\nestablish a geometric and topological foundation for concurrent program\nverification, transcending the limitations of traditional model checking.", "AI": {"tldr": "\u63d0\u51fa\u5e76\u53d1\u7a0b\u5e8f\u5206\u6790\u548c\u9a8c\u8bc1\u7684\u65b0\u8303\u5f0f\u2014\u2014\u5947\u70b9\u7406\u8bba\uff0c\u5c06\u5e76\u53d1\u7a0b\u5e8f\u6267\u884c\u7a7a\u95f4\u5efa\u6a21\u4e3a\u5206\u652f\u62d3\u6251\u7a7a\u95f4\uff0c\u4f7f\u7528\u4ee3\u6570\u62d3\u6251\u5de5\u5177\u68c0\u6d4b\u6b7b\u9501\u548c\u6d3b\u9501\u3002", "motivation": "\u5efa\u7acb\u5e76\u53d1\u7a0b\u5e8f\u9a8c\u8bc1\u7684\u51e0\u4f55\u548c\u62d3\u6251\u57fa\u7840\uff0c\u8d85\u8d8a\u4f20\u7edf\u6a21\u578b\u68c0\u6d4b\u7684\u5c40\u9650\u6027\u3002", "method": "\u5c06\u7a0b\u5e8f\u6267\u884c\u7a7a\u95f4\u5efa\u6a21\u4e3a\u5206\u652f\u62d3\u6251\u7a7a\u95f4\uff0c\u72b6\u6001\u4e3a\u70b9\uff0c\u72b6\u6001\u8f6c\u79fb\u4e3a\u8def\u5f84\uff1b\u4f7f\u7528\u540c\u4f26\u548c\u540c\u8c03\u7fa4\u7b49\u4ee3\u6570\u62d3\u6251\u5de5\u5177\u5b9a\u4e49\u5e76\u53d1\u62d3\u6251\u4e0d\u53d8\u91cf\u3002", "result": "\u80fd\u591f\u7cfb\u7edf\u6027\u5730\u68c0\u6d4b\u548c\u5206\u7c7b\u6b7b\u9501\uff08\u5438\u5f15\u5b50\uff09\u548c\u6d3b\u9501\uff08\u4e0d\u53ef\u6536\u7f29\u73af\uff09\u7b49\u5e76\u53d1\u5947\u70b9\uff0c\u65e0\u9700\u7a77\u4e3e\u904d\u5386\u6240\u6709\u72b6\u6001\u3002", "conclusion": "\u5947\u70b9\u7406\u8bba\u4e3a\u5e76\u53d1\u7a0b\u5e8f\u9a8c\u8bc1\u63d0\u4f9b\u4e86\u65b0\u7684\u51e0\u4f55\u62d3\u6251\u6846\u67b6\uff0c\u6709\u671b\u514b\u670d\u4f20\u7edf\u65b9\u6cd5\u7684\u5c40\u9650\u3002"}}
{"id": "2510.25369", "pdf": "https://arxiv.org/pdf/2510.25369", "abs": "https://arxiv.org/abs/2510.25369", "authors": ["Elliot Bobrow", "Bryan Ford", "Stefan Milenkovi\u0107"], "title": "Have a thing? Reasoning around recursion with dynamic typing in grounded arithmetic", "categories": ["cs.PL", "cs.FL", "cs.LO", "math.LO", "F.3.1; F.4.1"], "comment": null, "summary": "Neither the classical nor intuitionistic logic traditions are\nperfectly-aligned with the purpose of reasoning about computation, in that\nneither logical tradition can normally permit the direct expression of\narbitrary general-recursive functions without inconsistency. We introduce\ngrounded arithmetic or GA, a minimalistic but nonetheless powerful foundation\nfor formal reasoning that allows the direct expression of arbitrary recursive\ndefinitions. GA adjusts the traditional inference rules such that terms that\nexpress nonterminating computations harmlessly denote no semantic value (i.e.,\n\"bottom\") instead of leading into logical paradox or inconsistency. Recursive\nfunctions may be proven terminating in GA essentially by \"dynamically typing\"\nterms, or equivalently, symbolically reverse-executing the computations they\ndenote via GA's inference rules. Once recursive functions have been proven\nterminating, logical reasoning about their results reduce to the familiar\nclassical rules. A mechanically-checked consistency proof in Isabelle/HOL\nexists for the basic quantifier-free fragment of GA. Quantifiers may be added\natop this foundation as ordinary computations, whose inference rules are thus\nadmissible and do not introduce new inconsistency risks. While GA is only a\nfirst step towards richly-typed grounded deduction practical for everyday use\nin manual or automated computational reasoning, it shows the promise that the\nexpressive freedom of arbitrary recursive definition can in principle be\nincorporated into formal systems.", "AI": {"tldr": "GA\uff08\u57fa\u7840\u7b97\u672f\uff09\u662f\u4e00\u79cd\u5141\u8bb8\u76f4\u63a5\u8868\u8fbe\u4efb\u610f\u9012\u5f52\u5b9a\u4e49\u7684\u5f62\u5f0f\u63a8\u7406\u57fa\u7840\uff0c\u901a\u8fc7\u8c03\u6574\u4f20\u7edf\u63a8\u7406\u89c4\u5219\u4f7f\u975e\u7ec8\u6b62\u8ba1\u7b97\u65e0\u5bb3\u5730\u8868\u793a\u65e0\u8bed\u4e49\u503c\uff0c\u907f\u514d\u903b\u8f91\u6096\u8bba\u3002", "motivation": "\u7ecf\u5178\u903b\u8f91\u548c\u76f4\u89c9\u4e3b\u4e49\u903b\u8f91\u4f20\u7edf\u90fd\u65e0\u6cd5\u5728\u4e0d\u5bfc\u81f4\u4e0d\u4e00\u81f4\u6027\u7684\u60c5\u51b5\u4e0b\u76f4\u63a5\u8868\u8fbe\u4efb\u610f\u4e00\u822c\u9012\u5f52\u51fd\u6570\uff0c\u9700\u8981\u4e00\u79cd\u80fd\u5b89\u5168\u5904\u7406\u975e\u7ec8\u6b62\u8ba1\u7b97\u7684\u5f62\u5f0f\u63a8\u7406\u57fa\u7840\u3002", "method": "\u8c03\u6574\u4f20\u7edf\u63a8\u7406\u89c4\u5219\uff0c\u4f7f\u8868\u793a\u975e\u7ec8\u6b62\u8ba1\u7b97\u7684\u9879\u65e0\u5bb3\u5730\u8868\u793a\u65e0\u8bed\u4e49\u503c\uff08\"\u5e95\u90e8\"\uff09\uff1b\u901a\u8fc7\"\u52a8\u6001\u7c7b\u578b\u5316\"\u9879\u6216\u7b26\u53f7\u5316\u53cd\u5411\u6267\u884c\u8ba1\u7b97\u6765\u8bc1\u660e\u9012\u5f52\u51fd\u6570\u7684\u7ec8\u6b62\u6027\u3002", "result": "\u5f00\u53d1\u4e86GA\u7684\u57fa\u672c\u65e0\u91cf\u8bcd\u7247\u6bb5\uff0c\u5e76\u5728Isabelle/HOL\u4e2d\u8fdb\u884c\u4e86\u673a\u68b0\u9a8c\u8bc1\u7684\u4e00\u81f4\u6027\u8bc1\u660e\uff1b\u4e00\u65e6\u9012\u5f52\u51fd\u6570\u88ab\u8bc1\u660e\u7ec8\u6b62\uff0c\u903b\u8f91\u63a8\u7406\u5c31\u8fd8\u539f\u4e3a\u719f\u6089\u7684\u7ecf\u5178\u89c4\u5219\u3002", "conclusion": "GA\u5c55\u793a\u4e86\u5728\u5f62\u5f0f\u7cfb\u7edf\u4e2d\u539f\u5219\u4e0a\u53ef\u4ee5\u878d\u5165\u4efb\u610f\u9012\u5f52\u5b9a\u4e49\u7684\u8868\u8fbe\u81ea\u7531\uff0c\u4e3a\u65e5\u5e38\u624b\u52a8\u6216\u81ea\u52a8\u8ba1\u7b97\u63a8\u7406\u4e2d\u5b9e\u7528\u7684\u4e30\u5bcc\u7c7b\u578b\u57fa\u7840\u63a8\u7406\u8fc8\u51fa\u4e86\u7b2c\u4e00\u6b65\u3002"}}
{"id": "2510.24798", "pdf": "https://arxiv.org/pdf/2510.24798", "abs": "https://arxiv.org/abs/2510.24798", "authors": ["Evgeny Ukhanov"], "title": "Formal Verification of a Token Sale Launchpad: A Compositional Approach in Dafny", "categories": ["cs.LO", "cs.PL"], "comment": "29 pages, no figures. The full Dafny source code and formal proofs\n  are available at:\n  https://github.com/aurora-is-near/aurora-launchpad-contracts/tree/master/verification", "summary": "The proliferation of decentralized financial (DeFi) systems and smart\ncontracts has underscored the critical need for software correctness. Bugs in\nsuch systems can lead to catastrophic financial losses. Formal verification\noffers a path to achieving mathematical certainty about software behavior. This\npaper presents the formal verification of the core logic for a token sale\nlaunchpad, implemented and proven correct using the Dafny programming language\nand verification system. We detail a compositional, bottom-up verification\nstrategy, beginning with the proof of fundamental non-linear integer arithmetic\nproperties, and building upon them to verify complex business logic, including\nasset conversion, time-based discounts, and capped-sale refund mechanics. The\nprincipal contributions are the formal proofs of critical safety and lifecycle\nproperties. Most notably, we prove that refunds in a capped sale can never\nexceed the user's original deposit amount, and that the precision loss in\nround-trip financial calculations is strictly bounded. Furthermore, we verify\nthe complete lifecycle logic, including user withdrawals under various sale\nmechanics and the correctness of post-sale token allocation, vesting, and\nclaiming. This work serves as a comprehensive case study in applying rigorous\nverification techniques to build high-assurance financial software.", "AI": {"tldr": "\u672c\u6587\u4f7f\u7528Dafny\u7f16\u7a0b\u8bed\u8a00\u548c\u9a8c\u8bc1\u7cfb\u7edf\u5bf9\u4ee3\u5e01\u9500\u552e\u542f\u52a8\u5e73\u53f0\u7684\u6838\u5fc3\u903b\u8f91\u8fdb\u884c\u4e86\u5f62\u5f0f\u5316\u9a8c\u8bc1\uff0c\u8bc1\u660e\u4e86\u5173\u952e\u5b89\u5168\u5c5e\u6027\u548c\u751f\u547d\u5468\u671f\u903b\u8f91\u7684\u6b63\u786e\u6027\u3002", "motivation": "\u53bb\u4e2d\u5fc3\u5316\u91d1\u878d\u7cfb\u7edf\u548c\u667a\u80fd\u5408\u7ea6\u7684\u666e\u53ca\u51f8\u663e\u4e86\u8f6f\u4ef6\u6b63\u786e\u6027\u7684\u5173\u952e\u9700\u6c42\uff0c\u6b64\u7c7b\u7cfb\u7edf\u4e2d\u7684\u6f0f\u6d1e\u53ef\u80fd\u5bfc\u81f4\u707e\u96be\u6027\u8d22\u52a1\u635f\u5931\u3002\u5f62\u5f0f\u5316\u9a8c\u8bc1\u80fd\u591f\u63d0\u4f9b\u5173\u4e8e\u8f6f\u4ef6\u884c\u4e3a\u7684\u6570\u5b66\u786e\u5b9a\u6027\u3002", "method": "\u91c7\u7528\u7ec4\u5408\u5f0f\u3001\u81ea\u4e0b\u800c\u4e0a\u7684\u9a8c\u8bc1\u7b56\u7565\uff0c\u4ece\u8bc1\u660e\u57fa\u672c\u975e\u7ebf\u6027\u6574\u6570\u7b97\u672f\u5c5e\u6027\u5f00\u59cb\uff0c\u9010\u6b65\u6784\u5efa\u9a8c\u8bc1\u590d\u6742\u4e1a\u52a1\u903b\u8f91\uff0c\u5305\u62ec\u8d44\u4ea7\u8f6c\u6362\u3001\u57fa\u4e8e\u65f6\u95f4\u7684\u6298\u6263\u548c\u5c01\u9876\u9500\u552e\u9000\u6b3e\u673a\u5236\u3002", "result": "\u8bc1\u660e\u4e86\u5173\u952e\u5b89\u5168\u5c5e\u6027\uff1a\u5c01\u9876\u9500\u552e\u4e2d\u7684\u9000\u6b3e\u6c38\u8fdc\u4e0d\u4f1a\u8d85\u8fc7\u7528\u6237\u539f\u59cb\u5b58\u6b3e\u91d1\u989d\uff0c\u5f80\u8fd4\u8d22\u52a1\u8ba1\u7b97\u4e2d\u7684\u7cbe\u5ea6\u635f\u5931\u4e25\u683c\u6709\u754c\u3002\u9a8c\u8bc1\u4e86\u5b8c\u6574\u7684\u751f\u547d\u5468\u671f\u903b\u8f91\uff0c\u5305\u62ec\u5404\u79cd\u9500\u552e\u673a\u5236\u4e0b\u7684\u7528\u6237\u63d0\u6b3e\u4ee5\u53ca\u552e\u540e\u4ee3\u5e01\u5206\u914d\u3001\u5f52\u5c5e\u548c\u7533\u9886\u7684\u6b63\u786e\u6027\u3002", "conclusion": "\u8fd9\u9879\u5de5\u4f5c\u4f5c\u4e3a\u5e94\u7528\u4e25\u683c\u9a8c\u8bc1\u6280\u672f\u6784\u5efa\u9ad8\u4fdd\u8bc1\u91d1\u878d\u8f6f\u4ef6\u7684\u7efc\u5408\u6848\u4f8b\u7814\u7a76\uff0c\u5c55\u793a\u4e86\u5f62\u5f0f\u5316\u9a8c\u8bc1\u5728\u786e\u4fdd\u91d1\u878d\u7cfb\u7edf\u5b89\u5168\u6027\u548c\u6b63\u786e\u6027\u65b9\u9762\u7684\u91cd\u8981\u4ef7\u503c\u3002"}}
{"id": "2510.24819", "pdf": "https://arxiv.org/pdf/2510.24819", "abs": "https://arxiv.org/abs/2510.24819", "authors": ["Vincenzo Scotti", "Jan Keim", "Tobias Hey", "Andreas Metzger", "Anne Koziolek", "Raffaela Mirandola"], "title": "A Roadmap for Tamed Interactions with Large Language Models", "categories": ["cs.SE", "cs.PL"], "comment": null, "summary": "We are witnessing a bloom of AI-powered software driven by Large Language\nModels (LLMs). Although the applications of these LLMs are impressive and\nseemingly countless, their unreliability hinders adoption. In fact, the\ntendency of LLMs to produce faulty or hallucinated content makes them\nunsuitable for automating workflows and pipelines. In this regard, Software\nEngineering (SE) provides valuable support, offering a wide range of formal\ntools to specify, verify, and validate software behaviour. Such SE tools can be\napplied to define constraints over LLM outputs and, consequently, offer\nstronger guarantees on the generated content. In this paper, we argue that the\ndevelopment of a Domain Specific Language (DSL) for scripting interactions with\nLLMs using an LLM Scripting Language (LSL) may be key to improve AI-based\napplications. Currently, LLMs and LLM-based software still lack reliability,\nrobustness, and trustworthiness, and the tools or frameworks to cope with these\nissues suffer from fragmentation. In this paper, we present our vision of LSL.\nWith LSL, we aim to address the limitations above by exploring ways to control\nLLM outputs, enforce structure in interactions, and integrate these aspects\nwith verification, validation, and explainability. Our goal is to make LLM\ninteraction programmable and decoupled from training or implementation.", "AI": {"tldr": "\u63d0\u51faLLM\u811a\u672c\u8bed\u8a00(LSL)\u6765\u6539\u5584AI\u5e94\u7528\u7684\u53ef\u4fe1\u5ea6\uff0c\u901a\u8fc7\u5b9a\u4e49\u7ea6\u675f\u3001\u9a8c\u8bc1\u8f93\u51fa\u548c\u7ed3\u6784\u5316\u4ea4\u4e92\u6765\u89e3\u51b3LLM\u7684\u4e0d\u53ef\u9760\u6027\u95ee\u9898\u3002", "motivation": "\u5f53\u524dLLM\u5e94\u7528\u867d\u7136\u4ee4\u4eba\u5370\u8c61\u6df1\u523b\uff0c\u4f46\u5176\u4e0d\u53ef\u9760\u6027\uff08\u5982\u4ea7\u751f\u9519\u8bef\u6216\u5e7b\u89c9\u5185\u5bb9\uff09\u963b\u788d\u4e86\u5b9e\u9645\u5e94\u7528\uff0c\u9700\u8981\u8f6f\u4ef6\u5de5\u7a0b\u5de5\u5177\u6765\u63d0\u4f9b\u66f4\u5f3a\u7684\u8f93\u51fa\u4fdd\u8bc1\u3002", "method": "\u5f00\u53d1\u9886\u57df\u7279\u5b9a\u8bed\u8a00(DSL)\u6765\u7f16\u5199LLM\u4ea4\u4e92\u811a\u672c\uff0c\u901a\u8fc7\u63a7\u5236\u8f93\u51fa\u3001\u5f3a\u5236\u6267\u884c\u7ed3\u6784\uff0c\u5e76\u4e0e\u9a8c\u8bc1\u3001\u9a8c\u8bc1\u548c\u53ef\u89e3\u91ca\u6027\u76f8\u7ed3\u5408\u3002", "result": "\u63d0\u51faLSL\u613f\u666f\uff0c\u4f7fLLM\u4ea4\u4e92\u53ef\u7f16\u7a0b\u5316\uff0c\u5e76\u4e0e\u8bad\u7ec3\u6216\u5b9e\u73b0\u89e3\u8026\u3002", "conclusion": "LSL\u53ef\u80fd\u662f\u63d0\u9ad8\u57fa\u4e8eAI\u5e94\u7528\u7684\u5173\u952e\uff0c\u901a\u8fc7\u7a0b\u5e8f\u5316\u63a7\u5236LLM\u8f93\u51fa\u6765\u589e\u5f3a\u53ef\u9760\u6027\u3001\u9c81\u68d2\u6027\u548c\u53ef\u4fe1\u5ea6\u3002"}}
{"id": "2510.25468", "pdf": "https://arxiv.org/pdf/2510.25468", "abs": "https://arxiv.org/abs/2510.25468", "authors": ["Emanuele De Angelis", "Florian Frohn"], "title": "Proceedings of the 12th Workshop on Horn Clauses for Verification and Synthesis", "categories": ["cs.LO", "cs.PL", "cs.SE"], "comment": null, "summary": "This volume contains the post-proceedings of the 12th Workshop on Horn\nClauses for Verification and Synthesis (HCVS 2025), which took place in Zagreb,\nCroatia, on July 22, 2025, as affiliated workshop of the 37th International\nConference on Computer Aided Verification (CAV 2025).", "AI": {"tldr": "\u8fd9\u662fHCVS 2025\u5de5\u4f5c\u574a\u7684\u540e\u4f1a\u8bae\u8bba\u6587\u96c6\uff0c\u5305\u542b2025\u5e747\u670822\u65e5\u5728\u514b\u7f57\u5730\u4e9a\u8428\u683c\u52d2\u5e03\u4e3e\u884c\u7684\u7b2c12\u5c4a\u9a8c\u8bc1\u4e0e\u7efc\u5408Horn\u5b50\u53e5\u5de5\u4f5c\u574a\u7684\u8bba\u6587\u3002", "motivation": "\u6536\u96c6\u548c\u51fa\u7248HCVS 2025\u5de5\u4f5c\u574a\u7684\u7814\u7a76\u6210\u679c\uff0c\u4fc3\u8fdbHorn\u5b50\u53e5\u5728\u7a0b\u5e8f\u9a8c\u8bc1\u548c\u7efc\u5408\u9886\u57df\u7684\u5b66\u672f\u4ea4\u6d41\u3002", "method": "\u4f5c\u4e3aCAV 2025\u7684\u9644\u5c5e\u5de5\u4f5c\u574a\uff0c\u901a\u8fc7\u5b66\u672f\u4f1a\u8bae\u5f62\u5f0f\u7ec4\u7ec7\u8bba\u6587\u5f81\u96c6\u3001\u8bc4\u5ba1\u548c\u53d1\u8868\u3002", "result": "\u6210\u529f\u4e3e\u529e\u4e86\u7b2c12\u5c4aHCVS\u5de5\u4f5c\u574a\uff0c\u5e76\u51fa\u7248\u4e86\u5305\u542b\u76f8\u5173\u7814\u7a76\u6210\u679c\u7684\u540e\u4f1a\u8bae\u8bba\u6587\u96c6\u3002", "conclusion": "\u8be5\u8bba\u6587\u96c6\u8bb0\u5f55\u4e86HCVS 2025\u5de5\u4f5c\u574a\u7684\u5b66\u672f\u6210\u679c\uff0c\u4e3aHorn\u5b50\u53e5\u5728\u9a8c\u8bc1\u548c\u7efc\u5408\u9886\u57df\u7684\u7814\u7a76\u63d0\u4f9b\u4e86\u91cd\u8981\u53c2\u8003\u3002"}}
